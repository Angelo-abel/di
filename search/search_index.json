{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Introduction [Boost::ext].DI Your C++14 header only Dependency Injection library with no dependencies ( Try it online! ) GitHub Download Changelog Tutorial Examples What is Dependency Injection? \"Don't call us, we'll call you\", Hollywood principle Dependency Injection (DI) involves passing (injecting) one or more dependencies (or services) to a dependent object (or client) which become part of the client\u2019s state. It is like the Strategy Pattern, except the strategy is set once, at construction. DI enables loosely coupled designs, which are easier to maintain and test. In short, DI is all about construction! \"Let's make some coffee!\" No Dependency injection | Dependency Injection ----------------------------------------|------------------------------------------- class coffee_maker { | class coffee_maker { public: | public: void brew() { | coffee_maker(const shared_ptr iheater heater heater- on(); | , unique_ptr ipump pump) pump- pump(); | : heater(heater), pump(move(pump)) clog coffee ! endl; | { } heater- off(); | } | void brew() { | heater- on(); private: | pump- pump(); shared_ptr iheater heater = | clog coffee! endl; make_shared electric_heater (); | heater- off(); | } unique_ptr ipump pump = | make_unique heat_pump (heater); | private: }; | shared_ptr iheater heater; | unique_ptr ipump pump; | }; Do I use a Dependency Injection already? If you are using constructors in your code then you are probably using some form of Dependency Injection too! class Button { public: Button(const std::string name, Position position); // Dependency Injection! }; Do I use Dependency Injection correctly? Common mistakes when using Dependency Injection are: Passing a dependency to create another dependency inside your object It's a bad practice to pass dependencies to an object just in order to create another one with those dependencies. It's much cleaner to create the latter object beforehand and pass it to the former. class Model { public: Model(int width, int height) : board(std::make_unique Board (width, height)) // Bad { } explicit Model(std::unique_ptr IBoard board) // Better : board(std::move(board)) { } ... private: std::unique_ptr IBoard board; }; Carrying dependencies It's also important NOT to pass depenencies through layers of constructors (carrying them). It's much better to always pass only dependecies which are required ONLY by the given constructor. class Model : public Service { // Bad public: explicit Model(std::unique_ptr IBoard board) // Bad : Service(std::move(board)) { } void update() { Service::do_something_with_board(); // Bad } }; class Model { // Better public: explicit Model(std::unique_ptr Service service) // Better : service(std::move(service)) { } void update() { service- do_something_with_board(); // Better } private: std::unique_ptr Service service; }; Carrying injector (Service Locator pattern) Service locator is consider to be an anti-pattern because its instance is required to be passed as the ONLY constructor parameter into all constructors. Such approach makes the code highly coupled to the Service Locator framework. It's better to pass required dependencies direclty instead and use a DI framework to inject them. class Model { public: explicit Model(service_locator sl) // Bad (ask) : service(sl.resolve unique_ptr Service ()) { } explicit Model(std::unique_ptr Service service) // Better (tell) : service(std::move(service)) { } ... private: std::unique_ptr Service service; }; Not using strong typedefs for constructor parameters Being explicit and declarative is always better than being impilicit. Using common types (ex. numbers) in order to define any common-like type may cause missusage of the constructor interface. Using strong typedefs is easier to follow and protects against missusage of the constructor interface. class Board { public: Board(int /*width*/, int /*height*/) // Bad; Board{2, 3} vs Board{3, 2}? Board(width, height) // Better, explicit; Board{width{2}, height{3}}; ... }; Do I need a Dependency Injection? DI provides loosely coupled code (separation of business logic and object creation) DI provides easier to maintain code (different objects might be easily injected) DI provides easier to test code (fakes objects might be injected) STUPID vs SOLID - \"Clean Code\" Uncle Bob S Singleton T Tight Coupling U Untestability P Premature Optimization I Indescriptive Naming D Duplication vs S Single Responsibility O Open-close L Liskov substitution I Interface segregation D Dependency inversion Do I need a DI Framework/Library? Depending on a project and its scale you may put up with or without a DI library, however, in any project a DI framework may free you from maintaining a following (boilerplate) code... logger logger_; renderer renderer_; view view_{renderer_, logger_}; model model_{logger_}; controller controller_{model_, view_, logger_}; user user_{logger_}; app app_{controller_, user_}; Notice that ORDER in which above dependencies are created is IMPORTANT as well as that ANY change in ANY of the objects constructor will REQUIRE a change in this code! Manual DI - Wiring Mess (Avoid it by using [Boost].DI) * Single Responsibility Principle = * A lot of classes = * Wiring Mess = * Hard to maintain + Lazy programmers (99%) = * Hacks/Workarounds (~~Single Responsibility~~) Right now, imagine a project with hundreds or thousands of those dependencies and a critical issue which has to be fixed ASAP. Unfortunately, in order to fix the bug properly a new non-trivial dependency has to be introduced. Now, imagine that a 'smart' dev figured out that it will be much easier to extend the functionally of already passed object and sneak a workaround/'solution' this way. Such approach will possibly break the single responsibility principle of the changed object but no worries though, it might be refactored later on (meaning: most likely, the workaround will stay unchanged forever and that there are no tests). If that sounds familiar , take a look into DI library as it helps to solve developer dilemma by taking care of creating all required dependencies whereas dev may focus on fixing and testing the issue. DI library , not only let you forget about maintaining dependencies creation (See Create Objects Tree ), but also can help you with... Testing (See Mocks Provider ) Serializing (See Serialize ) Understand code dependencies (See UML Dumper ) Restrict what types and how they should be created (See Constructible Policy ) Real Life examples? Match-3 Game Simple web game in C++14 using SDL2 / Model View Controller / Meta State Machine / Dependency Injection / Range-V3 / Emscripten Play it online! Automatic Mocks Injector Automatically create and inject required mocks to tested classes via constructors Experimental Boost.SML C++14 header only Meta State Machine library with no dependencies Why [Boost].DI? [Boost].DI has none run-time overhead (See Performance ) [Boost].DI compiles fast / Faster than Java- Dagger2 ! (See Benchmarks ) [Boost].DI gives short diagnostic messages (See Error messages ) [Boost].DI is non-intrusive (See Injections ) [Boost].DI reduces boilerplate code (See Create Objects Tree ) [Boost].DI reduces testing effort (See Mocks Provider ) [Boost].DI gives better control of what and how is created (See Constructible Policy ) [Boost].DI gives better understanding about objects hierarchy (See UML Dumper ) Try it online! [Boost].DI design goals Be as fast as possible (See Performance ) Compile as fast as possible (See Benchmarks ) Give short and intuitive error messages (See Error messages ) Guarantee object creation at compile-time (See Create Objects Tree ) Be as non-intrusive as possible (See Injections ) Be easy to extend (See Extensions ) Articles Inversion of Control Containers and the Dependency Injection pattern DIP in the Wild Videos [Boost::ext].DI C++Now 2019: Dependency Injection - a 25-dollar term for a 5-cent concept | Slides CppCon 2018: [Boost].DI - Inject all the things! | Slides C++Now 2017: Concepts driven design with Dependency Injection | Slides C++Now 2016: C++14 Dependency Injection Library | Slides Meeting C++ 2016: TDD/BDD and Dependency Injection | Slides Boost your design with C++14 dependency injection | Slides Dependency Injection In General Dependency Injection The Clean Code Talks - Don't Look For Things! A New Type of dependency injection The Future of Dependency Injection with Dagger 2 Design Patterns in C++: Creational Acknowledgements Thanks to Bartosz Kalinczuk for code review and tips how to improve [Boost::ext].DI Thanks to Kanstantsin Chernik for all his contributions to [Boost::ext].DI Thanks to Olof Edlund for very useful feedback and for all the improvements to the documentation Thanks to Rob Stewart and Robert Ramey for documentation feedback and tips how to improve it Thanks to Sohail Somani for support and tips how to improve [Boost::ext].DI","title":"Introduction"},{"location":"index.html#introduction","text":"[Boost::ext].DI Your C++14 header only Dependency Injection library with no dependencies ( Try it online! ) GitHub Download Changelog Tutorial Examples","title":"Introduction"},{"location":"index.html#what-is-dependency-injection","text":"\"Don't call us, we'll call you\", Hollywood principle Dependency Injection (DI) involves passing (injecting) one or more dependencies (or services) to a dependent object (or client) which become part of the client\u2019s state. It is like the Strategy Pattern, except the strategy is set once, at construction. DI enables loosely coupled designs, which are easier to maintain and test. In short, DI is all about construction! \"Let's make some coffee!\" No Dependency injection | Dependency Injection ----------------------------------------|------------------------------------------- class coffee_maker { | class coffee_maker { public: | public: void brew() { | coffee_maker(const shared_ptr iheater heater heater- on(); | , unique_ptr ipump pump) pump- pump(); | : heater(heater), pump(move(pump)) clog coffee ! endl; | { } heater- off(); | } | void brew() { | heater- on(); private: | pump- pump(); shared_ptr iheater heater = | clog coffee! endl; make_shared electric_heater (); | heater- off(); | } unique_ptr ipump pump = | make_unique heat_pump (heater); | private: }; | shared_ptr iheater heater; | unique_ptr ipump pump; | };","title":"What is Dependency Injection?"},{"location":"index.html#do-i-use-a-dependency-injection-already","text":"If you are using constructors in your code then you are probably using some form of Dependency Injection too! class Button { public: Button(const std::string name, Position position); // Dependency Injection! };","title":"Do I use a Dependency Injection already?"},{"location":"index.html#do-i-use-dependency-injection-correctly","text":"Common mistakes when using Dependency Injection are: Passing a dependency to create another dependency inside your object It's a bad practice to pass dependencies to an object just in order to create another one with those dependencies. It's much cleaner to create the latter object beforehand and pass it to the former. class Model { public: Model(int width, int height) : board(std::make_unique Board (width, height)) // Bad { } explicit Model(std::unique_ptr IBoard board) // Better : board(std::move(board)) { } ... private: std::unique_ptr IBoard board; }; Carrying dependencies It's also important NOT to pass depenencies through layers of constructors (carrying them). It's much better to always pass only dependecies which are required ONLY by the given constructor. class Model : public Service { // Bad public: explicit Model(std::unique_ptr IBoard board) // Bad : Service(std::move(board)) { } void update() { Service::do_something_with_board(); // Bad } }; class Model { // Better public: explicit Model(std::unique_ptr Service service) // Better : service(std::move(service)) { } void update() { service- do_something_with_board(); // Better } private: std::unique_ptr Service service; }; Carrying injector (Service Locator pattern) Service locator is consider to be an anti-pattern because its instance is required to be passed as the ONLY constructor parameter into all constructors. Such approach makes the code highly coupled to the Service Locator framework. It's better to pass required dependencies direclty instead and use a DI framework to inject them. class Model { public: explicit Model(service_locator sl) // Bad (ask) : service(sl.resolve unique_ptr Service ()) { } explicit Model(std::unique_ptr Service service) // Better (tell) : service(std::move(service)) { } ... private: std::unique_ptr Service service; }; Not using strong typedefs for constructor parameters Being explicit and declarative is always better than being impilicit. Using common types (ex. numbers) in order to define any common-like type may cause missusage of the constructor interface. Using strong typedefs is easier to follow and protects against missusage of the constructor interface. class Board { public: Board(int /*width*/, int /*height*/) // Bad; Board{2, 3} vs Board{3, 2}? Board(width, height) // Better, explicit; Board{width{2}, height{3}}; ... };","title":"Do I use Dependency Injection correctly?"},{"location":"index.html#do-i-need-a-dependency-injection","text":"DI provides loosely coupled code (separation of business logic and object creation) DI provides easier to maintain code (different objects might be easily injected) DI provides easier to test code (fakes objects might be injected)","title":"Do I need a Dependency Injection?"},{"location":"index.html#stupid-vs-solid-clean-code-uncle-bob","text":"S Singleton T Tight Coupling U Untestability P Premature Optimization I Indescriptive Naming D Duplication vs S Single Responsibility O Open-close L Liskov substitution I Interface segregation D Dependency inversion","title":"STUPID vs SOLID - \"Clean Code\" Uncle Bob"},{"location":"index.html#do-i-need-a-di-frameworklibrary","text":"Depending on a project and its scale you may put up with or without a DI library, however, in any project a DI framework may free you from maintaining a following (boilerplate) code... logger logger_; renderer renderer_; view view_{renderer_, logger_}; model model_{logger_}; controller controller_{model_, view_, logger_}; user user_{logger_}; app app_{controller_, user_}; Notice that ORDER in which above dependencies are created is IMPORTANT as well as that ANY change in ANY of the objects constructor will REQUIRE a change in this code!","title":"Do I need a DI Framework/Library?"},{"location":"index.html#manual-di-wiring-mess-avoid-it-by-using-boostdi","text":"* Single Responsibility Principle = * A lot of classes = * Wiring Mess = * Hard to maintain + Lazy programmers (99%) = * Hacks/Workarounds (~~Single Responsibility~~) Right now, imagine a project with hundreds or thousands of those dependencies and a critical issue which has to be fixed ASAP. Unfortunately, in order to fix the bug properly a new non-trivial dependency has to be introduced. Now, imagine that a 'smart' dev figured out that it will be much easier to extend the functionally of already passed object and sneak a workaround/'solution' this way. Such approach will possibly break the single responsibility principle of the changed object but no worries though, it might be refactored later on (meaning: most likely, the workaround will stay unchanged forever and that there are no tests). If that sounds familiar , take a look into DI library as it helps to solve developer dilemma by taking care of creating all required dependencies whereas dev may focus on fixing and testing the issue. DI library , not only let you forget about maintaining dependencies creation (See Create Objects Tree ), but also can help you with... Testing (See Mocks Provider ) Serializing (See Serialize ) Understand code dependencies (See UML Dumper ) Restrict what types and how they should be created (See Constructible Policy )","title":"Manual DI - Wiring Mess (Avoid it by using [Boost].DI)"},{"location":"index.html#real-life-examples","text":"Match-3 Game Simple web game in C++14 using SDL2 / Model View Controller / Meta State Machine / Dependency Injection / Range-V3 / Emscripten Play it online! Automatic Mocks Injector Automatically create and inject required mocks to tested classes via constructors Experimental Boost.SML C++14 header only Meta State Machine library with no dependencies","title":"Real Life examples?"},{"location":"index.html#why-boostdi","text":"[Boost].DI has none run-time overhead (See Performance ) [Boost].DI compiles fast / Faster than Java- Dagger2 ! (See Benchmarks ) [Boost].DI gives short diagnostic messages (See Error messages ) [Boost].DI is non-intrusive (See Injections ) [Boost].DI reduces boilerplate code (See Create Objects Tree ) [Boost].DI reduces testing effort (See Mocks Provider ) [Boost].DI gives better control of what and how is created (See Constructible Policy ) [Boost].DI gives better understanding about objects hierarchy (See UML Dumper ) Try it online!","title":"Why [Boost].DI?"},{"location":"index.html#boostdi-design-goals","text":"Be as fast as possible (See Performance ) Compile as fast as possible (See Benchmarks ) Give short and intuitive error messages (See Error messages ) Guarantee object creation at compile-time (See Create Objects Tree ) Be as non-intrusive as possible (See Injections ) Be easy to extend (See Extensions )","title":"[Boost].DI design goals"},{"location":"index.html#articles","text":"Inversion of Control Containers and the Dependency Injection pattern DIP in the Wild","title":"Articles"},{"location":"index.html#videos","text":"","title":"Videos"},{"location":"index.html#boostextdi","text":"C++Now 2019: Dependency Injection - a 25-dollar term for a 5-cent concept | Slides CppCon 2018: [Boost].DI - Inject all the things! | Slides C++Now 2017: Concepts driven design with Dependency Injection | Slides C++Now 2016: C++14 Dependency Injection Library | Slides Meeting C++ 2016: TDD/BDD and Dependency Injection | Slides Boost your design with C++14 dependency injection | Slides","title":"[Boost::ext].DI"},{"location":"index.html#dependency-injection-in-general","text":"Dependency Injection The Clean Code Talks - Don't Look For Things! A New Type of dependency injection The Future of Dependency Injection with Dagger 2 Design Patterns in C++: Creational","title":"Dependency Injection In General"},{"location":"index.html#acknowledgements","text":"Thanks to Bartosz Kalinczuk for code review and tips how to improve [Boost::ext].DI Thanks to Kanstantsin Chernik for all his contributions to [Boost::ext].DI Thanks to Olof Edlund for very useful feedback and for all the improvements to the documentation Thanks to Rob Stewart and Robert Ramey for documentation feedback and tips how to improve it Thanks to Sohail Somani for support and tips how to improve [Boost::ext].DI","title":"Acknowledgements"},{"location":"CHANGELOG.html","text":"1.1.0 - 2019-01-07 Additions Support for Clang-5.0/6.0/7.0 Support for GCC-7/8 Support for MSVC-2017 Preview Core Is Creatable Binding To Constructor Examples Polymorphism Inheritance Type Erasure Variant Templates Concepts Extensions Runtime Provider Injector Bug Fixes Issues Contributions Kanstantsin Chernik Jaak Ristioja Gregor Jasny 1.0.2 - 2018-01-04 Additions Support for Clang-4.0 Support for GCC-7 Support for MSVC-2017 Fixed support for MSVC-2015 Update 3 Core Support for injecting templates/concepts Extensions Extensions are now available using header files Extensible Injector Shared Factory Bug Fixes Implementation class cannot be marked as final Creation with Factory doesn't allow to pass exceptions through Bound policy doesn't work with multiple bindings Problems compiling with _GLIBCXX_DEBUG defined Exception in ctor not propagated Unable to compile with VS 2017 RC, VS 2015 works fine Broken under VS2015 Update 3 Contributions Kanstantsin Chernik 1.0.1 - 2016-05-04 Breaking Changes Simplified interface for policies Additions Support for Clang-3.9 Support for GCC-6 Extensions Contextual Bindings Serialize Bug Fixes Link error if di.hpp is included in two cpp-files Creation of empty injector crashes on MSVC 2015, Update 1, x64, Debug 1.0.0 - 2016-02-22 Support for MSVC-2015+ Support for GCC-5+ Support for CMake 2.8+ Support for libc++, libstdc++ Support for Mac OS 0.5.0 - 2015-01-12 C++14 version Support for Clang3.4+ 0.1.0 - 2014-08-15 C++03/C++11 version Support for Clang3.2+","title":"CHANGELOG"},{"location":"CHANGELOG.html#110-2019-01-07","text":"Additions Support for Clang-5.0/6.0/7.0 Support for GCC-7/8 Support for MSVC-2017 Preview Core Is Creatable Binding To Constructor Examples Polymorphism Inheritance Type Erasure Variant Templates Concepts Extensions Runtime Provider Injector Bug Fixes Issues Contributions Kanstantsin Chernik Jaak Ristioja Gregor Jasny","title":"1.1.0 - 2019-01-07"},{"location":"CHANGELOG.html#102-2018-01-04","text":"Additions Support for Clang-4.0 Support for GCC-7 Support for MSVC-2017 Fixed support for MSVC-2015 Update 3 Core Support for injecting templates/concepts Extensions Extensions are now available using header files Extensible Injector Shared Factory Bug Fixes Implementation class cannot be marked as final Creation with Factory doesn't allow to pass exceptions through Bound policy doesn't work with multiple bindings Problems compiling with _GLIBCXX_DEBUG defined Exception in ctor not propagated Unable to compile with VS 2017 RC, VS 2015 works fine Broken under VS2015 Update 3 Contributions Kanstantsin Chernik","title":"1.0.2 - 2018-01-04"},{"location":"CHANGELOG.html#101-2016-05-04","text":"Breaking Changes Simplified interface for policies Additions Support for Clang-3.9 Support for GCC-6 Extensions Contextual Bindings Serialize Bug Fixes Link error if di.hpp is included in two cpp-files Creation of empty injector crashes on MSVC 2015, Update 1, x64, Debug","title":"1.0.1 - 2016-05-04"},{"location":"CHANGELOG.html#100-2016-02-22","text":"Support for MSVC-2015+ Support for GCC-5+ Support for CMake 2.8+ Support for libc++, libstdc++ Support for Mac OS","title":"1.0.0 - 2016-02-22"},{"location":"CHANGELOG.html#050-2015-01-12","text":"C++14 version Support for Clang3.4+","title":"0.5.0 - 2015-01-12"},{"location":"CHANGELOG.html#010-2014-08-15","text":"C++03/C++11 version Support for Clang3.2+","title":"0.1.0 - 2014-08-15"},{"location":"FAQ.html","text":"Dependency Inversion vs Dependency Injection In principle Dependency Inversion might be implemented using DI or Service Locator (SL). The latter is more like a 'God' object. It has a lot of benefits but, probably, the same amount of cons such as that SL requires that SL will be the only constructor parameter for any class which can be created using it. DI, on the other hand, is less intrusive and easier to follow than SL. Why C++14 is required for [Boost].DI? At first [Boost].DI was implemented using C++03 standard with a switch to C++11 when available/possible. However, this approach, although was/is working just fine, was/is really slow to compile and hard to maintain too. Moreover, interface for modules wasn't perfect due to missing return type deduction for functions in C++11. Therefore, I made a decision to reimplement the core using C++14 features which sped up compilation times dramatically and make the interface cleaner and easier to maintain. Nevertheless, effort was made to support the newest versions of popular C++ compilers including GCC/Clang and MSVC. If you are interested in C++03 version of the library, please, take a look into cpp03 branch. Please, also notice that this branch is not maintained anymore. How the constructor deduction works without reflection support in C++? Please check out injection design and http://boost-ext.github.io/di/cppnow-2016/#/7/11. Can I inject templates/concepts? Yes, concepts/templates can be injected. :w template class T = class Greater struct example { using type = T; }; struct hello {}; int main() { const auto injector = di::make_injector( di::bind class Greater ().to hello () ); auto object = injector.create example (); static_assert(std::is_same hello, decltype(object)::type {}); } Can I use XML in order to set-up bindings configuration? Yes, however, XML injection is not part of the [Boost].DI release. Please, check out XML Extension . Since [Boost].DI has a compile time approach can I have dynamic bindings? Yes, [Boost].DI supports dynamic bindings. auto use_gui_view = true/false; auto injector = di::make_injector( di::bind iview .to([ ](const auto injector) - iview { if (use_gui_view) return injector.template create gui_view (); else return injector.template create text_view (); }) , di::bind .to(42) // renderer device ); Check out full example of Dynamic Bindings .","title":"FAQ"},{"location":"FAQ.html#dependency-inversion-vs-dependency-injection","text":"In principle Dependency Inversion might be implemented using DI or Service Locator (SL). The latter is more like a 'God' object. It has a lot of benefits but, probably, the same amount of cons such as that SL requires that SL will be the only constructor parameter for any class which can be created using it. DI, on the other hand, is less intrusive and easier to follow than SL.","title":"Dependency Inversion vs Dependency Injection"},{"location":"FAQ.html#why-c14-is-required-for-boostdi","text":"At first [Boost].DI was implemented using C++03 standard with a switch to C++11 when available/possible. However, this approach, although was/is working just fine, was/is really slow to compile and hard to maintain too. Moreover, interface for modules wasn't perfect due to missing return type deduction for functions in C++11. Therefore, I made a decision to reimplement the core using C++14 features which sped up compilation times dramatically and make the interface cleaner and easier to maintain. Nevertheless, effort was made to support the newest versions of popular C++ compilers including GCC/Clang and MSVC. If you are interested in C++03 version of the library, please, take a look into cpp03 branch. Please, also notice that this branch is not maintained anymore.","title":"Why C++14 is required for [Boost].DI?"},{"location":"FAQ.html#how-the-constructor-deduction-works-without-reflection-support-in-c","text":"Please check out injection design and http://boost-ext.github.io/di/cppnow-2016/#/7/11.","title":"How the constructor deduction works without reflection support in C++?"},{"location":"FAQ.html#can-i-inject-templatesconcepts","text":"Yes, concepts/templates can be injected. :w template class T = class Greater struct example { using type = T; }; struct hello {}; int main() { const auto injector = di::make_injector( di::bind class Greater ().to hello () ); auto object = injector.create example (); static_assert(std::is_same hello, decltype(object)::type {}); }","title":"Can I inject templates/concepts?"},{"location":"FAQ.html#can-i-use-xml-in-order-to-set-up-bindings-configuration","text":"Yes, however, XML injection is not part of the [Boost].DI release. Please, check out XML Extension .","title":"Can I use XML in order to set-up bindings configuration?"},{"location":"FAQ.html#since-boostdi-has-a-compile-time-approach-can-i-have-dynamic-bindings","text":"Yes, [Boost].DI supports dynamic bindings. auto use_gui_view = true/false; auto injector = di::make_injector( di::bind iview .to([ ](const auto injector) - iview { if (use_gui_view) return injector.template create gui_view (); else return injector.template create text_view (); }) , di::bind .to(42) // renderer device ); Check out full example of Dynamic Bindings .","title":"Since [Boost].DI has a compile time approach can I have dynamic bindings?"},{"location":"benchmarks.html","text":"Performance Run-time performance Environment x86_64 Intel(R) Core(TM) i7-4770 CPU @ 3.40GHz GenuineIntel GNU/Linux clang++3.4 -O2 -fno-exceptions / gdb -batch -ex 'file ./a.out' -ex 'disassemble main' Compile-time performance Environment x86_64 Intel(R) Core(TM) i7-4770 CPU @ 3.40GHz GenuineIntel GNU/Linux clang++3.4 -O2 -fno-exceptions [Boost].DI header Time [s] #include boost/di.hpp 0.050s Legend: ctor = raw constructor: T(int i, double d); inject = inject constructor: BOOST_DI_INJECT(T, int i, double d); all = all types exposed from module: auto configure(); exposed = one type exposed from module: di::injector T configure(); * 4248897537 instances created * 132 different types * 10 modules * 1862039751439806464 instances created * 200 different types * 10 modules * 5874638529236910091 instances created * 310 different types * 100 different interfaces * 10 modules C++ Libraries Library [Boost].DI ( See Performance ) dicpp Google.Fruit Version 1.0.1 HEAD 2.0.2 Language C++14 C++11 C++11 License Boost 1.0 Boost 1.0 Apache 2.0 Linkage header only header only library Dependencies - boost system/boost thread - Approach compile-time run-time compile/run-time Errors compile-time errors exceptions compile-time errors/exceptions To run benchmarks cd benchmark make C++ vs Java vs C# Libraries Library [Boost].DI Google.Guice Dagger2 Ninject Language C++14 Java Java C# Version 1.0.1 4.0 2.4 3.2 License Boost 1.0 Apache 2.0 Apache 2.0 Apache 2.0 Linkage header only jar jar dll Approach compile-time run-time compile-time (annotation processor) run-time Errors compile-time errors exceptions compile-time errors exceptions Environment x86_64 Intel(R) Core(TM) i7-4770 CPU @ 3.40GHz GenuineIntel GNU/Linux $CXX -O2/Java8/Mono4.2 Baseline Manual object creation Create a unique objects tree for each iteration TYPES: 64 BINDINGS: 0 ITERATIONS: 1024 Clang-3.7 -O2 / Java8 / Mono4.2 --aot Baseline [Boost].DI Google.Fruit Google.Guice Dagger2 Ninject Compilation time 0.063s 0.376s 2.329s / FRUIT_NO_LOOP_CHECK 0.570s 1.411s 0.144s + 0.079s Executable size 4.2K 8.5K 213K - - - Execution time 0.002s 0.002s 0.037s 0.528s 0.157s 1.131s TYPES: 128 BINDINGS: 0 ITERATIONS: 1024 Compilation time 0.082s 0.706s 4.375s / FRUIT_NO_LOOP_CHECK 0.642s 1.903s 0.149s + 0.093s Executable size 4.2K 8.5K 513K - - - Execution time 0.002s 0.002s 0.074s 0.544s 0.210s 2.230s TYPES: 256 BINDINGS: 0 ITERATIONS: 1024 Compilation time 0.131s 1.328s 9.641s / FRUIT_NO_LOOP_CHECK 0.783s 2.814s 0.151s + 0.114s Executable size 4.2K 8.7K 1.4M - - - Execution time 0.003s 0.003s 0.154s 0.723s 0.323s 4.838s TYPES: 512 BINDINGS: 0 ITERATIONS: 1024 Compilation time 0.215s 2.459s 23.924s / FRUIT_NO_LOOP_CHECK 1.054s 4.231s 0.157s + 0.161 Executable size 8.2K 13K 4.2M - - - Execution time 0.003s 0.003s 0.328s 0.943s 0.547s 11.123s TYPES: 1024 BINDINGS: 0 ITERATIONS: 1024 Compilation time 0.402s 4.911s 1m9.601s / FRUIT_NO_LOOP_CHECK 1.357s 5.943s 0.167s + 0.258 Executable size 12K 17K 15M - - - Execution time 0.004s 0.004s 0.765s 1.334s 0.998s 21.808s To run benchmarks cd benchmark make Usage of C++ vs Java vs C# Libraries Library Bind Interface Performance [Boost].DI ASM x86-64 dicpp ASM x86-64 Google.Fruit ASM x86-64 Google.Guice Dagger2 Ninject Library Bind Value Performance [Boost].DI ASM x86-64 dicpp ASM x86-64 Google.Fruit ASM x86-64 Google.Guice Dagger2 Ninject Library Missing Bindings Error [Boost].DI dicpp Google.Fruit Google.Guice Dagger2 Ninject","title":"Benchmarks"},{"location":"benchmarks.html#performance","text":"Run-time performance Environment x86_64 Intel(R) Core(TM) i7-4770 CPU @ 3.40GHz GenuineIntel GNU/Linux clang++3.4 -O2 -fno-exceptions / gdb -batch -ex 'file ./a.out' -ex 'disassemble main' Compile-time performance Environment x86_64 Intel(R) Core(TM) i7-4770 CPU @ 3.40GHz GenuineIntel GNU/Linux clang++3.4 -O2 -fno-exceptions [Boost].DI header Time [s] #include boost/di.hpp 0.050s Legend: ctor = raw constructor: T(int i, double d); inject = inject constructor: BOOST_DI_INJECT(T, int i, double d); all = all types exposed from module: auto configure(); exposed = one type exposed from module: di::injector T configure(); * 4248897537 instances created * 132 different types * 10 modules * 1862039751439806464 instances created * 200 different types * 10 modules * 5874638529236910091 instances created * 310 different types * 100 different interfaces * 10 modules","title":"Performance"},{"location":"benchmarks.html#c-libraries","text":"Library [Boost].DI ( See Performance ) dicpp Google.Fruit Version 1.0.1 HEAD 2.0.2 Language C++14 C++11 C++11 License Boost 1.0 Boost 1.0 Apache 2.0 Linkage header only header only library Dependencies - boost system/boost thread - Approach compile-time run-time compile/run-time Errors compile-time errors exceptions compile-time errors/exceptions To run benchmarks cd benchmark make","title":"C++ Libraries"},{"location":"benchmarks.html#c-vs-java-vs-c-libraries","text":"Library [Boost].DI Google.Guice Dagger2 Ninject Language C++14 Java Java C# Version 1.0.1 4.0 2.4 3.2 License Boost 1.0 Apache 2.0 Apache 2.0 Apache 2.0 Linkage header only jar jar dll Approach compile-time run-time compile-time (annotation processor) run-time Errors compile-time errors exceptions compile-time errors exceptions Environment x86_64 Intel(R) Core(TM) i7-4770 CPU @ 3.40GHz GenuineIntel GNU/Linux $CXX -O2/Java8/Mono4.2 Baseline Manual object creation Create a unique objects tree for each iteration TYPES: 64 BINDINGS: 0 ITERATIONS: 1024 Clang-3.7 -O2 / Java8 / Mono4.2 --aot Baseline [Boost].DI Google.Fruit Google.Guice Dagger2 Ninject Compilation time 0.063s 0.376s 2.329s / FRUIT_NO_LOOP_CHECK 0.570s 1.411s 0.144s + 0.079s Executable size 4.2K 8.5K 213K - - - Execution time 0.002s 0.002s 0.037s 0.528s 0.157s 1.131s TYPES: 128 BINDINGS: 0 ITERATIONS: 1024 Compilation time 0.082s 0.706s 4.375s / FRUIT_NO_LOOP_CHECK 0.642s 1.903s 0.149s + 0.093s Executable size 4.2K 8.5K 513K - - - Execution time 0.002s 0.002s 0.074s 0.544s 0.210s 2.230s TYPES: 256 BINDINGS: 0 ITERATIONS: 1024 Compilation time 0.131s 1.328s 9.641s / FRUIT_NO_LOOP_CHECK 0.783s 2.814s 0.151s + 0.114s Executable size 4.2K 8.7K 1.4M - - - Execution time 0.003s 0.003s 0.154s 0.723s 0.323s 4.838s TYPES: 512 BINDINGS: 0 ITERATIONS: 1024 Compilation time 0.215s 2.459s 23.924s / FRUIT_NO_LOOP_CHECK 1.054s 4.231s 0.157s + 0.161 Executable size 8.2K 13K 4.2M - - - Execution time 0.003s 0.003s 0.328s 0.943s 0.547s 11.123s TYPES: 1024 BINDINGS: 0 ITERATIONS: 1024 Compilation time 0.402s 4.911s 1m9.601s / FRUIT_NO_LOOP_CHECK 1.357s 5.943s 0.167s + 0.258 Executable size 12K 17K 15M - - - Execution time 0.004s 0.004s 0.765s 1.334s 0.998s 21.808s To run benchmarks cd benchmark make","title":"C++ vs Java vs C# Libraries"},{"location":"benchmarks.html#usage-of-c-vs-java-vs-c-libraries","text":"Library Bind Interface Performance [Boost].DI ASM x86-64 dicpp ASM x86-64 Google.Fruit ASM x86-64 Google.Guice Dagger2 Ninject Library Bind Value Performance [Boost].DI ASM x86-64 dicpp ASM x86-64 Google.Fruit ASM x86-64 Google.Guice Dagger2 Ninject Library Missing Bindings Error [Boost].DI dicpp Google.Fruit Google.Guice Dagger2 Ninject","title":"Usage of C++ vs Java vs C# Libraries"},{"location":"examples.html","text":"Hello World Bindings Dynamic Bindings Forward Bindings Is Creatable Multiple Bindings Binding Non-owning Pointer Binding Templates Binding To Constructor Automatic Injection Constructor Signature Constructor Injection Multiple Interface Annotations Deduce Scope Custom Scope Eager Singletons Modules Modules (hpp/cpp) Custom Policy Custom Provider Pool Provider Configuration Polymorphism Inheritance Type-Erasure Function Variant Templates Concepts Hello World Bindings Dynamic Bindings Forward Bindings Is Creatable Multiple Bindings Binding Non-owning Pointer Binding Templates Binding To Constructor Automatic Injection Constructor Signature Constructor Injection Multiple Interface Annotations Deduce Scope Custom Scope Eager Singletons Modules Modules (hpp/cpp) See https://github.com/boost-ext/di/tree/cpp14/example/modules Custom Policy Custom Provider Pool Provider Configuration Polymorphism See https://github.com/boost-ext/di/tree/cpp14/example/polymorphism Inheritance Type Erasure Function Variant Templates Concepts","title":"Examples"},{"location":"examples.html#hello-world","text":"","title":"Hello World"},{"location":"examples.html#bindings","text":"","title":"Bindings"},{"location":"examples.html#dynamic-bindings","text":"","title":"Dynamic Bindings"},{"location":"examples.html#forward-bindings","text":"","title":"Forward Bindings"},{"location":"examples.html#is-creatable","text":"","title":"Is Creatable"},{"location":"examples.html#multiple-bindings","text":"","title":"Multiple Bindings"},{"location":"examples.html#binding-non-owning-pointer","text":"","title":"Binding Non-owning Pointer"},{"location":"examples.html#binding-templates","text":"","title":"Binding Templates"},{"location":"examples.html#binding-to-constructor","text":"","title":"Binding To Constructor"},{"location":"examples.html#automatic-injection","text":"","title":"Automatic Injection"},{"location":"examples.html#constructor-signature","text":"","title":"Constructor Signature"},{"location":"examples.html#constructor-injection","text":"","title":"Constructor Injection"},{"location":"examples.html#multiple-interface","text":"","title":"Multiple Interface"},{"location":"examples.html#annotations","text":"","title":"Annotations"},{"location":"examples.html#deduce-scope","text":"","title":"Deduce Scope"},{"location":"examples.html#custom-scope","text":"","title":"Custom Scope"},{"location":"examples.html#eager-singletons","text":"","title":"Eager Singletons"},{"location":"examples.html#modules","text":"","title":"Modules"},{"location":"examples.html#modules-hppcpp","text":"See https://github.com/boost-ext/di/tree/cpp14/example/modules","title":"Modules (hpp/cpp)"},{"location":"examples.html#custom-policy","text":"","title":"Custom Policy"},{"location":"examples.html#custom-provider","text":"","title":"Custom Provider"},{"location":"examples.html#pool-provider","text":"","title":"Pool Provider"},{"location":"examples.html#configuration","text":"","title":"Configuration"},{"location":"examples.html#polymorphism","text":"See https://github.com/boost-ext/di/tree/cpp14/example/polymorphism","title":"Polymorphism"},{"location":"examples.html#inheritance","text":"","title":"Inheritance"},{"location":"examples.html#type-erasure","text":"","title":"Type Erasure"},{"location":"examples.html#function","text":"","title":"Function"},{"location":"examples.html#variant","text":"","title":"Variant"},{"location":"examples.html#templates","text":"","title":"Templates"},{"location":"examples.html#concepts","text":"","title":"Concepts"},{"location":"extensions.html","text":"Injector Constructor Bindings Contextual Bindings Assisted Injection Extensible Injector Concepts Factory Shared Factory Lazy Named Parameters XML Injection Serialize Types Dumper UML Dumper Heap Provider Mocks Provider Runtime Provider Scoped Scope Session Scope Shared Scope Injector Constructor Bindings Contextual Bindings Assisted Injection Extensible Injector Concepts Factory Shared Factory Lazy Named Parameters XML Injection Serialize Types Dumper UML Dumper Heap Provider Mocks Provider Runtime Provider Scoped Scope Session Scope Shared Scope","title":"Extensions"},{"location":"extensions.html#injector","text":"","title":"Injector"},{"location":"extensions.html#constructor-bindings","text":"","title":"Constructor Bindings"},{"location":"extensions.html#contextual-bindings","text":"","title":"Contextual Bindings"},{"location":"extensions.html#assisted-injection","text":"","title":"Assisted Injection"},{"location":"extensions.html#extensible-injector","text":"","title":"Extensible Injector"},{"location":"extensions.html#concepts","text":"","title":"Concepts"},{"location":"extensions.html#factory","text":"","title":"Factory"},{"location":"extensions.html#shared-factory","text":"","title":"Shared Factory"},{"location":"extensions.html#lazy","text":"","title":"Lazy"},{"location":"extensions.html#named-parameters","text":"","title":"Named Parameters"},{"location":"extensions.html#xml-injection","text":"","title":"XML Injection"},{"location":"extensions.html#serialize","text":"","title":"Serialize"},{"location":"extensions.html#types-dumper","text":"","title":"Types Dumper"},{"location":"extensions.html#uml-dumper","text":"","title":"UML Dumper"},{"location":"extensions.html#heap-provider","text":"","title":"Heap Provider"},{"location":"extensions.html#mocks-provider","text":"","title":"Mocks Provider"},{"location":"extensions.html#runtime-provider","text":"","title":"Runtime Provider"},{"location":"extensions.html#scoped-scope","text":"","title":"Scoped Scope"},{"location":"extensions.html#session-scope","text":"","title":"Session Scope"},{"location":"extensions.html#shared-scope","text":"","title":"Shared Scope"},{"location":"overview.html","text":"Quick Start Get boost/di.hpp header wget https://raw.githubusercontent.com/boost-ext/di/cpp14/include/boost/di.hpp Include the header and define di namespace alias #include boost/di.hpp namespace di = boost::di; Compile with C++14 support $CXX -std=c++14 ... Note [Boost].DI compiles with -fno-exceptions -fno-rtti -Wall -Wextra -Werror -pedantic -pedantic-errors To run tests git clone https://github.com/boost-ext/di cd di make Dependencies No external dependencies are required (neither STL nor Boost) Supported/Tested compilers Clang-3.4+ GCC-5.2+ MSVC-2015+ Configuration Macro Description BOOST_DI_VERSION Current version of [Boost::ext].DI (ex. 1'0'0) BOOST_DI_CFG Global configuration allows to customize provider and policies (See Config ) BOOST_DI_CFG_CTOR_LIMIT_SIZE Limits number of allowed constructor parameters [0-10, default=10] (See Injections ) BOOST_DI_CFG_DIAGNOSTICS_LEVEL Gives more information with error messages (See Error messages ) BOOST_DI_NAMESPACE_BEGIN namespace boost::inline ext::di::inline v_{version}_{revision}_{patch} { BOOST_DI_NAMESPACE_END } Exception Safety [Boost].DI is not using exceptions internally and therefore might be compiled with -fno-exceptions . Check User Guide to verify which API's are marked noexcept . Thread Safety [Boost].DI is thread safe. Error Messages [Boost].DI is designed to give great diagnostic errors. The examples below will show you the actual error messages for different scenarios. Check Concepts to check it out. Performance [Boost].DI has none run-time overhead and compiles faster than Java's DI frameworks. Check Benchmarks to see more.","title":"Overview"},{"location":"overview.html#quick-start","text":"Get boost/di.hpp header wget https://raw.githubusercontent.com/boost-ext/di/cpp14/include/boost/di.hpp Include the header and define di namespace alias #include boost/di.hpp namespace di = boost::di; Compile with C++14 support $CXX -std=c++14 ... Note [Boost].DI compiles with -fno-exceptions -fno-rtti -Wall -Wextra -Werror -pedantic -pedantic-errors To run tests git clone https://github.com/boost-ext/di cd di make","title":"Quick Start"},{"location":"overview.html#dependencies","text":"No external dependencies are required (neither STL nor Boost)","title":"Dependencies"},{"location":"overview.html#supportedtested-compilers","text":"Clang-3.4+ GCC-5.2+ MSVC-2015+","title":"Supported/Tested compilers"},{"location":"overview.html#configuration","text":"Macro Description BOOST_DI_VERSION Current version of [Boost::ext].DI (ex. 1'0'0) BOOST_DI_CFG Global configuration allows to customize provider and policies (See Config ) BOOST_DI_CFG_CTOR_LIMIT_SIZE Limits number of allowed constructor parameters [0-10, default=10] (See Injections ) BOOST_DI_CFG_DIAGNOSTICS_LEVEL Gives more information with error messages (See Error messages ) BOOST_DI_NAMESPACE_BEGIN namespace boost::inline ext::di::inline v_{version}_{revision}_{patch} { BOOST_DI_NAMESPACE_END }","title":"Configuration"},{"location":"overview.html#exception-safety","text":"[Boost].DI is not using exceptions internally and therefore might be compiled with -fno-exceptions . Check User Guide to verify which API's are marked noexcept .","title":"Exception Safety"},{"location":"overview.html#thread-safety","text":"[Boost].DI is thread safe.","title":"Thread Safety"},{"location":"overview.html#error-messages","text":"[Boost].DI is designed to give great diagnostic errors. The examples below will show you the actual error messages for different scenarios. Check Concepts to check it out.","title":"Error Messages"},{"location":"overview.html#performance","text":"[Boost].DI has none run-time overhead and compiles faster than Java's DI frameworks. Check Benchmarks to see more.","title":"Performance"},{"location":"try_it.html","text":"","title":"Try It Online!"},{"location":"tutorial.html","text":"0. [Pre] Refactor towards DI If you write a new application you can skip this step and go directly to step 1 . However, if you have a lot code which is not using DI and you wonder what can it be refactored, then you are in the right place. Basically, there is a only one (big) step to get all benefits of Dependency Injection. You have to separate creation logic from business logic, which means that your code should be free of object creation inside other objects... class controller { public: controller(config c) : model_(std::make_unique model (c)) { } void run(); private: std::unique_ptr model model_; }; int main() { controller controller_; controller_.run(); } Instead, DI approach would look like that... class controller { public: explicit controller(model m) : model_(m) {} void run(); private: model model_; }; int main() { model model_; controller controller_{model_}; controller_.run(); } So, what happened here? We just took the responsibility of creation model out from the controller . In other words, we have split the creation logic and the business logic. That's basically everything you have to remember in order to create applications using DI. Nevertheless, please, be careful and don't 'carry out' your dependencies. What is meant by that, is NOT to pass an object into constructor if it won't be stored ( Law of Demeter ). class app { public: explicit app(model m) : controller_(m) {} // BAD explicit app(controller c) : controller_(c) {} // GOOD private: controller controller_; }; class controller { public: explicit controller(model ); }; int main() { model model_; app app_{model_}; } Additionally, you can consider using strong typedefs which will make your constructor interface cleaner/stronger. class button { public: button(int, int); // weak constructor interface (cpp file has to checked in order to figure out the meaning of int's) }; button constructor is not clear because int's are ambiguous and both present just a number. It can be seen more clearly in the following example. button{10, 15}; // OK, but what's 10? what's 15? Can I swap them? button{15, 10}; // Hmm, potenial missue of the constructor A better approach would be to introduce a strong typedefs for both numbers in order to avoid potential misuse of the constructor, especially when used by other/external teams. struct width { int value; constexpr operator int() const { return value; } }; struct height { int value; constexpr operator int() const { return value; } }; class button { public: button(width, height); // strong constructor interface }; Right now, button constructor is much easier to follow (no need to check cpp file) because it expresses the intention. button{width{10}, height{15}}; // OK, declartive approach button{height{10}, with{15}}; // Compile Error button{10, 15}; // Compile Error Similar mechanism is used by [Boost].DI to achieve named parameters which and it will be presented in this tutorial later on. 1. [Basic] Create objects tree Before we will get into creating objects tree, let's first create a 'dummy' example. In order to do so, firstly, we have to include (one and only) boost/di.hpp header wget https://raw.githubusercontent.com/boost-ext/di/cpp14/include/boost/di.hpp and declare a convenient di namespace alias. #include boost/di.hpp namespace di = boost::di; That is enough to try out [Boost].DI ! To have a first complete and working example we just have to add main function as usual. int main() {} and compile our code using compiler supporting C++14 standard (Clang-3.4/GCC-5/MSVC-2015). $CXX -std=c++14 example.cpp Congrats, you are now ready to check out [Boost].DI features! Let's move on to creating objects tree. Applications, usually, consists of a number of objects which have to be instantiated. For example, let's consider a simplified Model View Controller code... The usual approach to create app would be following... renderer renderer_; view view_{ , renderer_}; model model_; controller controller_{model_, view_}; user user_; app app_{controller_, user_}; Which is alright for a really small applications. However, it's really tedious to maintain. Just imagine, that we have to change something here. For instance, view may need a new object window or, even worse, we refactored the code and dependencies order has changed - yea ORDER of above is important! ANY change in these classes constructors require developer input to maintain above boilerplate code! Not fun, not fun at all :( Right now imagine that your maintain effort will be minimized almost to none. How does it sound? Well, that might be simply achieved with [Boost].DI ! The same result might be achieved with [Boost].DI. All, non-ambiguous, dependencies will be automatically resolved and injected properly. It doesn't matter how big the hierarchy will be and/or if the order of constructor parameters will be changed in the future. We just have to create injector using make_injector , create the app and DI will take care of injecting proper types for us. auto app_ = make_injector().create app (); // It will create an `app` on stack and call its copy constructor How is that possible? [Boost].DI is able to figure out what parameters are required for the constructor of type T. Also, [Boost].DI is able to do it recursively for all required types by the constructor T. Hence, NO information about constructors parameters is required to be registered. Moreover, changes in the constructor of created objects will be handled automatically, so in our case when we add a window to view or change view to std::shared_ptr view required effort will be exactly '0'. [Boost].DI will take care of everything for us! Type T Is allowed? Note T \u2714 - T* \u2714 Ownership transfer! const T* \u2714 Ownership transfer! T \u2714 - const T \u2714 Reference with singleton / Temporary with unique T \u2714 - std::unique_ptr T \u2714 - std::shared_ptr T \u2714 - std::weak_ptr T \u2714 - boost_shared_ptr T \u2714 - Furthermore, there is no performance penalty for using [Boost].DI (see Performance )! Note [Boost].DI can inject dependencies using direct initialization T(...) or uniform initialization T{...} for aggregate types. And full example! Check out also other examples. Please, notice that the diagram was also generated using [Boost].DI but we will get into that a bit later. 2. [Basic] First steps with bindings But objects tree is not everything. A lot of classes uses interfaces or required a value to be passed. [Boost].DI solution for this are bindings . For purpose of this tutorial, let's change view class into interface iview in order to support text_view and gui_view . class iview { public: virtual ~iview() noexcept = default; virtual void update() =0; }; class gui_view: public iview { public: gui_view(std::string title, const renderer ) {} void update() override {} }; class text_view: public iview { public: void update() override {} }; Please, notice that text_view doesn't require any constructor parameters, whilst gui_view does. So, what will happen right now, when we try to create an app ? auto app = make_injector().create app (); COMPILE error! (See also: Error Messages ) warning: 'create app ' is deprecated: creatable constraint not satisfied injector.create app (); ^ boost/di.hpp:870:2: error: 'boost::di::v1_0_0::concepts::abstract_type iview ::is_not_bound::error' error(_ = type is not bound, did you forget to add: 'di::bind interface .to implementation ()'? ); Note You can get more info about error by increasing BOOST_DI_CFG_DIAGNOSTICS_LEVEL [0-2] value (default=1). Ah, okay, we haven't bound iview which means that BOOST.DI can't figure out whether we want text_view or gui_view ? Well, it's really simple to fix it, we just follow suggestion provided. const auto injector = di::make_injector( di::bind iview .to gui_view () ); Let's try again. Yay! It's compiling. But what about render.device value? So far, it was value initialized by default(=0). What, if you we want to initialize it with a user defined value instead? We've already seen how to bind interface to implementation. The same approach might be used in order to bind a type to a value. di::bind T .to(value) // bind type T to given value Moving back to our render.device ... struct renderer { int device; }; Note If you want change the default behaviour and be sure that all required dependencies are bound and not value initialized take a look at constructible policy. const auto injector = di::make_injector( di::bind iview .to gui_view () , di::bind int .to(42) // renderer.device | [Boost].DI can also deduce 'int' type for you - 'di::bind .to(42)' ); Note [Boost].DI is a compile time beast which means that it guarantees that if your code compiles, all dependencies will be resolved correctly. No runtime exceptions or runtime asserts, EVER! And full example! That's nice but I don't want to be using a dynamic (virtual) dispatch. What about concepts/templates? Good news, [Boost].DI can inject concepts/templates too! template class T = class Greater struct example { using type = T; }; struct hello {}; int main() { const auto injector = di::make_injector( di::bind class Greater .to hello () ); auto object = injector.create example (); static_assert(std::is_same hello, decltype(object)::type {}); } And full example! Great, but my code is more dynamic than that! I mean that I want to choose gui_view or text_view at runtime. [Boost].DI can handle that too! auto use_gui_view = true/false; const auto injector = di::make_injector( di::bind iview .to([ ](const auto injector) - iview { if (use_gui_view) return injector.template create gui_view (); else return injector.template create text_view (); }) , di::bind .to(42) // renderer device ); Note It is safe to throw exceptions from lambda. It will be passed through. Notice, that injector was passed to lambda expression in order to create gui_view / text_view . This way [Boost].DI can inject appropriate dependencies into chosen types. See bindings for more details. And full example! Okay, so what about the input. We have user , however, in the real life, we will have more clients. [Boost].DI allows multiple bindings to the same type for array/vector/set . Let's do it then! class iclient { public: virtual ~iclient() noexcept = default; virtual void process() = 0; }; class user : public iclient { public: void process() override {}; }; class timer : public iclient { public: void process() override {}; }; class app { public: app(controller , std::vector std::unique_ptr iclient ); }; And our bindings... di::bind iclient*[] .to user, client () And full example! The last but not least, sometimes, it's really useful to override some bindings. For example, for testing purposes. With [Boost].DI you can easily do that with override specifier (Implemented using operator[](override) ). const auto injector = di::make_injector( di::bind int .to(42) // renderer device , di::bind int .to(123) [di::override] // override renderer device ); Without the di::override following compilation error will occur... boost/di.hpp:281:3: error: static_assert failed constraint not satisfied boost/di.hpp:2683:80: type int ::is_bound_more_than_once inline auto make_injector(TDeps... args) noexcept And full example! Check out also. 3. [Basic] Decide the life times So far so good but where are these objects stored? Well, [Boost].DI supports scopes which are response for maintaining the life time of created objects. By default there are 4 scopes deduce scope (default) instance scope (bind .to(value) where value is maintained by the user) unique scope (one instance per request) singleton scope (shared instance) By default deduce scope is used which means that scope is deduced based on a constructor parameter. For instance, reference, shared_ptr will be deduced as singleton scope and pointer, unique_ptr will be deduced as unique scope. Type Scope T unique T singleton const T unique (temporary) / singleton T* unique (ownership transfer) const T* unique (ownership transfer) T unique std::unique_ptr unique std::shared_ptr singleton boost::shared_ptr singleton std::weak_ptr singleton Example class scopes_deduction { scopes_deduction(const int /*singleton scope*/, std::shared_ptr int /*singleton scope*/, std::unique_ptr int /*unique scope*/, int /*unique scope*/) { } }; di::make_injector().create example (); // scopes will be deduced based on constructor parameter types Coming back to our example, we got quite a few singletons there as we just needed one instance per application life time. Although scope deduction is very useful, it's not always what we need and therefore [Boost].DI allows changing the scope for a given type. const auto injector = di::make_injector( di::bind iview .to gui_view ().in(di::singleton) // explicitly specify singleton scope ); What if I want to change gui_view to be a different instance per each request. Let's change the scope to unique then. const auto injector = di::make_injector( di::bind iview .to gui_view ().in(di::unique) ); We will get a COMPILATION TIME ERROR because a unique scope can't be converted to a reference. In other words, having a reference to a copy is forbidden and it won't compile! warning: 'create app ' is deprecated: creatable constraint not satisfied injector.create app (); ^ boost/di.hpp:897:2: error: 'scoped scopes::unique, gui_view ::is_not_convertible_to iview ::error' error(_ = scoped object is not convertible to the requested type, did you mistake the scope: 'di::bind T .in(scope)'? ); Ah, reference doesn't make much sense with unique scope because it would mean that it has to be stored somewhere. It would be better to use std::unique_ptr iview instead. Type/Scope unique singleton instance T \u2714 - \u2714 T - \u2714 \u2714 const T \u2714 (temporary) \u2714 \u2714 T* (transfer ownership) \u2714 - - const T* \u2714 - - T \u2714 - \u2714 std::unique_ptr \u2714 - - std::shared_ptr \u2714 \u2714 \u2714 boost::shared_ptr \u2714 \u2714 - / \u2714 converted to std::weak_ptr - \u2714 - / \u2714 converted to Hmm, let's try something else then. We have list of unique clients, we can share objects just by changing the list to use std::shared_ptr instead. class app { public: app(controller , std::vector std::shared_ptr iclient ); }; But, it would be better if timer was always created per request, although it's a shared_ptr . To do so, we just need add scope when binding it, like this... const auto injector = di::make_injector( di::bind timer .in(di::unique) // different per request ); Check out the full example here. See also. 4. [Basic] Annotations to the rescue Above example are fine and dandy, nonetheless, they don't cover one important thing. How [Boost].DI knows which constructor to choose and what if they are ambiguous? Well, the algorithm is very simple. The longest (most parameters), unique constructor will be chosen. Otherwise, [Boost].DI will give up with a compile time error. However, which constructor should be chosen is configurable by BOOST_DI_INJECT . To illustrate this, let's modify model constructor. class model { public: model(int size, double precision) { } model(int rows, int cols) { } }; Right now, as expected, we get a compile time error! warning: 'create app ' is deprecated: creatable constraint not satisfied injector.create app (); ^ boost/di.hpp:942:4: error: 'type model ::has_ambiguous_number_of_constructor_parameters::error' error(_ = verify BOOST_DI_INJECT_TRAITS or di::ctor_traits ); Let's fix it using BOOST_DI_INJECT then! class model { public: model(int size, double precision) { } BOOST_DI_INJECT(model, int rows, int cols) { } // this constructor will be injected }; Note We can also write model(int rows, int cols, ...) to get the same result. By adding ... as the last parameter of the constructor it's guaranteed by [Boost].DI that it will be used for injection as it will have the highest number of constructor parameters (infinite number). Okay, right now it compiles but, wait a minute, 123 (renderer device) was injected for both rows and cols ! Well, it wasn't even close to what we wanted, but we can fix it easily using named annotations. Firstly, we have to create names. That's easy as names are just unique objects. auto Rows = []{}; auto Cols = []{}; Secondly, we have to tell model constructor about it. class model { public: model(int size, double precision) { } BOOST_DI_INJECT(model, (named = Rows) int rows, (named = Cols) int cols); // this constructor will be injected }; model::model(int rows, int cols) {} Please, notice that we have separated model constructor definition and declaration to show that definition doesn't require named annotations. Note If you happen to use clang/gcc compiler you can use string literals instead of creating objects, for example (named = \"Rows\"_s) . Finally, we have to bind our values. const auto injector = di::make_injector( di::bind int .named(Rows).to(6) , di::bind int .named(Cols).to(8) ); That's all. Note The same result might be accomplished with having different types for rows and cols. Full example here. Check out also... 5. [Basic] Split your configuration But my project has hundreds of interfaces and I would like to split my bindings into separate components. This is simple to do with [Boost.DI] as an injector can be extended by other injectors. Let's split our configuration then and keep our model bindings separately from app bindings. auto model_module = [] { return di::make_injector( di::bind int .named(Rows).to(6) , di::bind int .named(Cols).to(8) ); }; auto app_module = [](const bool use_gui_view) { return di::make_injector( di::bind iview .to([ ](const auto injector) - iview { if (use_gui_view) return injector.template create gui_view (); else return injector.template create text_view (); }) , di::bind timer .in(di::unique) // different per request , di::bind iclient*[] ().to user, timer () // bind many clients ); }; And glue them into one injector the same way... const auto injector = di::make_injector( model_module() , app_module(use_gui_view) ); Note Gluing many injector s into one is order independent. And full example! But I would like to have a module in cpp file, how can I do that? Such design might be achieved with [Boost].DI using injector and exposing given types. Expose all types (default) const const auto injector = // auto exposes all types di::make_injector( di::bind int .to(42) , di::bind double .to(87.0) ); injector.create int (); OK injector.create double (); // OK Expose only specific types const di::injector int injector = // only int is exposed di::make_injector( di::bind int .to(42) , di::bind double .to(87.0) ); injector.create int (); OK injector.create double (); // COMPILE TIME ERROR, double is not exposed by the injector When exposing all types using auto modules have to be implemented in a header file. With di::injector T... a definition might be put in a cpp file as it\u2019s just a regular type. Such approach has a few benefits: * It\u2019s useful for encapsulation (ex. Another team provides a module but they don't want to expose an ability to create implementation details) * May also speed compilation times in case of extend usage of cpp files Note There is no performance (compile-time, run-time) overhead between exposing all types or just a specific ones. Moving back to our example. Let's refactor it then. di::injector model model_module() { return di::make_injector( di::bind int .named(Rows).to(6) , di::bind int .named(Cols).to(8) ); } di::injector app app_module(const bool use_gui_view) { return di::make_injector( di::bind iview .to([ ](const auto injector) - iview { if (use_gui_view) return injector.template create gui_view (); else return injector.template create text_view (); }) , di::bind timer .in(di::unique) // different per request , di::bind iclient*[] .to user, timer () // bind many clients , model_module() ); } Right now you can easily separate definition and declaration between hpp and cpp files. Check the full example here! Note You can also expose named parameters using di::injector BOOST_DI_EXPOSE((named = Rows) int) . Different variations of the same type have to be exposed explicitly using di::injector model , std::unique_ptr model . Type erasure is used under the hood when types are exposed explicitly ( di::injector T\u2026 ). Check out more examples here! Congrats! You have finished the basic part of the tutorial. Hopefully, you have noticed potential of DI and [Boost].DI but if are still not convinced check out the Advanced part. 6. [Advanced] Dump/Limit your types It's often a case that we would like to generate object diagram of our application in order to see code dependencies more clear. Usually, it's a really hard task as creation of objects may happen anywhere in the code. However, if the responsibility for creation objects will be given to [Boost].DI we get such functionality for free. The only thing we have to do is to implement how to dump our objects. Let's dump our dependencies using Plant UML format. See also. On the other hand, it would be great to be able to limit types which might be constructed. For example, we just want to allow smart pointers and disallow raw pointers too. We may want to have a view only with const parameters being passed, etc. [Boost].DI allows you to do so by using constructible policy or writing a custom policy . See also. 7. [Advanced] Customize it [Boost].DI was design having extensibility in mind. You can easily customize scopes - to have custom life time of an object providers - to have custom way of creating objects, for example by using preallocated memory policies - to have custom way of dumping types at run-time or limiting them at compile-time 8. [Advanced] Extend it As mentioned before, [Boost].DI is quite easy to extend and therefore a lot of extensions exists already. Please check them out and write your own! Constructor Bindings Assisted Injection Concepts Lazy Named Parameters XML Injection Types Dumper UML Dumper Mocks Provider Scoped Scope Session Scope Shared Scope","title":"Tutorial"},{"location":"tutorial.html#0-pre-refactor-towards-di","text":"If you write a new application you can skip this step and go directly to step 1 . However, if you have a lot code which is not using DI and you wonder what can it be refactored, then you are in the right place. Basically, there is a only one (big) step to get all benefits of Dependency Injection. You have to separate creation logic from business logic, which means that your code should be free of object creation inside other objects... class controller { public: controller(config c) : model_(std::make_unique model (c)) { } void run(); private: std::unique_ptr model model_; }; int main() { controller controller_; controller_.run(); } Instead, DI approach would look like that... class controller { public: explicit controller(model m) : model_(m) {} void run(); private: model model_; }; int main() { model model_; controller controller_{model_}; controller_.run(); } So, what happened here? We just took the responsibility of creation model out from the controller . In other words, we have split the creation logic and the business logic. That's basically everything you have to remember in order to create applications using DI. Nevertheless, please, be careful and don't 'carry out' your dependencies. What is meant by that, is NOT to pass an object into constructor if it won't be stored ( Law of Demeter ). class app { public: explicit app(model m) : controller_(m) {} // BAD explicit app(controller c) : controller_(c) {} // GOOD private: controller controller_; }; class controller { public: explicit controller(model ); }; int main() { model model_; app app_{model_}; } Additionally, you can consider using strong typedefs which will make your constructor interface cleaner/stronger. class button { public: button(int, int); // weak constructor interface (cpp file has to checked in order to figure out the meaning of int's) }; button constructor is not clear because int's are ambiguous and both present just a number. It can be seen more clearly in the following example. button{10, 15}; // OK, but what's 10? what's 15? Can I swap them? button{15, 10}; // Hmm, potenial missue of the constructor A better approach would be to introduce a strong typedefs for both numbers in order to avoid potential misuse of the constructor, especially when used by other/external teams. struct width { int value; constexpr operator int() const { return value; } }; struct height { int value; constexpr operator int() const { return value; } }; class button { public: button(width, height); // strong constructor interface }; Right now, button constructor is much easier to follow (no need to check cpp file) because it expresses the intention. button{width{10}, height{15}}; // OK, declartive approach button{height{10}, with{15}}; // Compile Error button{10, 15}; // Compile Error Similar mechanism is used by [Boost].DI to achieve named parameters which and it will be presented in this tutorial later on.","title":"0. [Pre] Refactor towards DI"},{"location":"tutorial.html#1-basic-create-objects-tree","text":"Before we will get into creating objects tree, let's first create a 'dummy' example. In order to do so, firstly, we have to include (one and only) boost/di.hpp header wget https://raw.githubusercontent.com/boost-ext/di/cpp14/include/boost/di.hpp and declare a convenient di namespace alias. #include boost/di.hpp namespace di = boost::di; That is enough to try out [Boost].DI ! To have a first complete and working example we just have to add main function as usual. int main() {} and compile our code using compiler supporting C++14 standard (Clang-3.4/GCC-5/MSVC-2015). $CXX -std=c++14 example.cpp Congrats, you are now ready to check out [Boost].DI features! Let's move on to creating objects tree. Applications, usually, consists of a number of objects which have to be instantiated. For example, let's consider a simplified Model View Controller code... The usual approach to create app would be following... renderer renderer_; view view_{ , renderer_}; model model_; controller controller_{model_, view_}; user user_; app app_{controller_, user_}; Which is alright for a really small applications. However, it's really tedious to maintain. Just imagine, that we have to change something here. For instance, view may need a new object window or, even worse, we refactored the code and dependencies order has changed - yea ORDER of above is important! ANY change in these classes constructors require developer input to maintain above boilerplate code! Not fun, not fun at all :( Right now imagine that your maintain effort will be minimized almost to none. How does it sound? Well, that might be simply achieved with [Boost].DI ! The same result might be achieved with [Boost].DI. All, non-ambiguous, dependencies will be automatically resolved and injected properly. It doesn't matter how big the hierarchy will be and/or if the order of constructor parameters will be changed in the future. We just have to create injector using make_injector , create the app and DI will take care of injecting proper types for us. auto app_ = make_injector().create app (); // It will create an `app` on stack and call its copy constructor How is that possible? [Boost].DI is able to figure out what parameters are required for the constructor of type T. Also, [Boost].DI is able to do it recursively for all required types by the constructor T. Hence, NO information about constructors parameters is required to be registered. Moreover, changes in the constructor of created objects will be handled automatically, so in our case when we add a window to view or change view to std::shared_ptr view required effort will be exactly '0'. [Boost].DI will take care of everything for us! Type T Is allowed? Note T \u2714 - T* \u2714 Ownership transfer! const T* \u2714 Ownership transfer! T \u2714 - const T \u2714 Reference with singleton / Temporary with unique T \u2714 - std::unique_ptr T \u2714 - std::shared_ptr T \u2714 - std::weak_ptr T \u2714 - boost_shared_ptr T \u2714 - Furthermore, there is no performance penalty for using [Boost].DI (see Performance )! Note [Boost].DI can inject dependencies using direct initialization T(...) or uniform initialization T{...} for aggregate types. And full example! Check out also other examples. Please, notice that the diagram was also generated using [Boost].DI but we will get into that a bit later.","title":"1. [Basic] Create objects tree"},{"location":"tutorial.html#2-basic-first-steps-with-bindings","text":"But objects tree is not everything. A lot of classes uses interfaces or required a value to be passed. [Boost].DI solution for this are bindings . For purpose of this tutorial, let's change view class into interface iview in order to support text_view and gui_view . class iview { public: virtual ~iview() noexcept = default; virtual void update() =0; }; class gui_view: public iview { public: gui_view(std::string title, const renderer ) {} void update() override {} }; class text_view: public iview { public: void update() override {} }; Please, notice that text_view doesn't require any constructor parameters, whilst gui_view does. So, what will happen right now, when we try to create an app ? auto app = make_injector().create app (); COMPILE error! (See also: Error Messages ) warning: 'create app ' is deprecated: creatable constraint not satisfied injector.create app (); ^ boost/di.hpp:870:2: error: 'boost::di::v1_0_0::concepts::abstract_type iview ::is_not_bound::error' error(_ = type is not bound, did you forget to add: 'di::bind interface .to implementation ()'? ); Note You can get more info about error by increasing BOOST_DI_CFG_DIAGNOSTICS_LEVEL [0-2] value (default=1). Ah, okay, we haven't bound iview which means that BOOST.DI can't figure out whether we want text_view or gui_view ? Well, it's really simple to fix it, we just follow suggestion provided. const auto injector = di::make_injector( di::bind iview .to gui_view () ); Let's try again. Yay! It's compiling. But what about render.device value? So far, it was value initialized by default(=0). What, if you we want to initialize it with a user defined value instead? We've already seen how to bind interface to implementation. The same approach might be used in order to bind a type to a value. di::bind T .to(value) // bind type T to given value Moving back to our render.device ... struct renderer { int device; }; Note If you want change the default behaviour and be sure that all required dependencies are bound and not value initialized take a look at constructible policy. const auto injector = di::make_injector( di::bind iview .to gui_view () , di::bind int .to(42) // renderer.device | [Boost].DI can also deduce 'int' type for you - 'di::bind .to(42)' ); Note [Boost].DI is a compile time beast which means that it guarantees that if your code compiles, all dependencies will be resolved correctly. No runtime exceptions or runtime asserts, EVER! And full example! That's nice but I don't want to be using a dynamic (virtual) dispatch. What about concepts/templates? Good news, [Boost].DI can inject concepts/templates too! template class T = class Greater struct example { using type = T; }; struct hello {}; int main() { const auto injector = di::make_injector( di::bind class Greater .to hello () ); auto object = injector.create example (); static_assert(std::is_same hello, decltype(object)::type {}); } And full example! Great, but my code is more dynamic than that! I mean that I want to choose gui_view or text_view at runtime. [Boost].DI can handle that too! auto use_gui_view = true/false; const auto injector = di::make_injector( di::bind iview .to([ ](const auto injector) - iview { if (use_gui_view) return injector.template create gui_view (); else return injector.template create text_view (); }) , di::bind .to(42) // renderer device ); Note It is safe to throw exceptions from lambda. It will be passed through. Notice, that injector was passed to lambda expression in order to create gui_view / text_view . This way [Boost].DI can inject appropriate dependencies into chosen types. See bindings for more details. And full example! Okay, so what about the input. We have user , however, in the real life, we will have more clients. [Boost].DI allows multiple bindings to the same type for array/vector/set . Let's do it then! class iclient { public: virtual ~iclient() noexcept = default; virtual void process() = 0; }; class user : public iclient { public: void process() override {}; }; class timer : public iclient { public: void process() override {}; }; class app { public: app(controller , std::vector std::unique_ptr iclient ); }; And our bindings... di::bind iclient*[] .to user, client () And full example! The last but not least, sometimes, it's really useful to override some bindings. For example, for testing purposes. With [Boost].DI you can easily do that with override specifier (Implemented using operator[](override) ). const auto injector = di::make_injector( di::bind int .to(42) // renderer device , di::bind int .to(123) [di::override] // override renderer device ); Without the di::override following compilation error will occur... boost/di.hpp:281:3: error: static_assert failed constraint not satisfied boost/di.hpp:2683:80: type int ::is_bound_more_than_once inline auto make_injector(TDeps... args) noexcept And full example! Check out also.","title":"2. [Basic] First steps with bindings"},{"location":"tutorial.html#3-basic-decide-the-life-times","text":"So far so good but where are these objects stored? Well, [Boost].DI supports scopes which are response for maintaining the life time of created objects. By default there are 4 scopes deduce scope (default) instance scope (bind .to(value) where value is maintained by the user) unique scope (one instance per request) singleton scope (shared instance) By default deduce scope is used which means that scope is deduced based on a constructor parameter. For instance, reference, shared_ptr will be deduced as singleton scope and pointer, unique_ptr will be deduced as unique scope. Type Scope T unique T singleton const T unique (temporary) / singleton T* unique (ownership transfer) const T* unique (ownership transfer) T unique std::unique_ptr unique std::shared_ptr singleton boost::shared_ptr singleton std::weak_ptr singleton Example class scopes_deduction { scopes_deduction(const int /*singleton scope*/, std::shared_ptr int /*singleton scope*/, std::unique_ptr int /*unique scope*/, int /*unique scope*/) { } }; di::make_injector().create example (); // scopes will be deduced based on constructor parameter types Coming back to our example, we got quite a few singletons there as we just needed one instance per application life time. Although scope deduction is very useful, it's not always what we need and therefore [Boost].DI allows changing the scope for a given type. const auto injector = di::make_injector( di::bind iview .to gui_view ().in(di::singleton) // explicitly specify singleton scope ); What if I want to change gui_view to be a different instance per each request. Let's change the scope to unique then. const auto injector = di::make_injector( di::bind iview .to gui_view ().in(di::unique) ); We will get a COMPILATION TIME ERROR because a unique scope can't be converted to a reference. In other words, having a reference to a copy is forbidden and it won't compile! warning: 'create app ' is deprecated: creatable constraint not satisfied injector.create app (); ^ boost/di.hpp:897:2: error: 'scoped scopes::unique, gui_view ::is_not_convertible_to iview ::error' error(_ = scoped object is not convertible to the requested type, did you mistake the scope: 'di::bind T .in(scope)'? ); Ah, reference doesn't make much sense with unique scope because it would mean that it has to be stored somewhere. It would be better to use std::unique_ptr iview instead. Type/Scope unique singleton instance T \u2714 - \u2714 T - \u2714 \u2714 const T \u2714 (temporary) \u2714 \u2714 T* (transfer ownership) \u2714 - - const T* \u2714 - - T \u2714 - \u2714 std::unique_ptr \u2714 - - std::shared_ptr \u2714 \u2714 \u2714 boost::shared_ptr \u2714 \u2714 - / \u2714 converted to std::weak_ptr - \u2714 - / \u2714 converted to Hmm, let's try something else then. We have list of unique clients, we can share objects just by changing the list to use std::shared_ptr instead. class app { public: app(controller , std::vector std::shared_ptr iclient ); }; But, it would be better if timer was always created per request, although it's a shared_ptr . To do so, we just need add scope when binding it, like this... const auto injector = di::make_injector( di::bind timer .in(di::unique) // different per request ); Check out the full example here. See also.","title":"3. [Basic] Decide the life times"},{"location":"tutorial.html#4-basic-annotations-to-the-rescue","text":"Above example are fine and dandy, nonetheless, they don't cover one important thing. How [Boost].DI knows which constructor to choose and what if they are ambiguous? Well, the algorithm is very simple. The longest (most parameters), unique constructor will be chosen. Otherwise, [Boost].DI will give up with a compile time error. However, which constructor should be chosen is configurable by BOOST_DI_INJECT . To illustrate this, let's modify model constructor. class model { public: model(int size, double precision) { } model(int rows, int cols) { } }; Right now, as expected, we get a compile time error! warning: 'create app ' is deprecated: creatable constraint not satisfied injector.create app (); ^ boost/di.hpp:942:4: error: 'type model ::has_ambiguous_number_of_constructor_parameters::error' error(_ = verify BOOST_DI_INJECT_TRAITS or di::ctor_traits ); Let's fix it using BOOST_DI_INJECT then! class model { public: model(int size, double precision) { } BOOST_DI_INJECT(model, int rows, int cols) { } // this constructor will be injected }; Note We can also write model(int rows, int cols, ...) to get the same result. By adding ... as the last parameter of the constructor it's guaranteed by [Boost].DI that it will be used for injection as it will have the highest number of constructor parameters (infinite number). Okay, right now it compiles but, wait a minute, 123 (renderer device) was injected for both rows and cols ! Well, it wasn't even close to what we wanted, but we can fix it easily using named annotations. Firstly, we have to create names. That's easy as names are just unique objects. auto Rows = []{}; auto Cols = []{}; Secondly, we have to tell model constructor about it. class model { public: model(int size, double precision) { } BOOST_DI_INJECT(model, (named = Rows) int rows, (named = Cols) int cols); // this constructor will be injected }; model::model(int rows, int cols) {} Please, notice that we have separated model constructor definition and declaration to show that definition doesn't require named annotations. Note If you happen to use clang/gcc compiler you can use string literals instead of creating objects, for example (named = \"Rows\"_s) . Finally, we have to bind our values. const auto injector = di::make_injector( di::bind int .named(Rows).to(6) , di::bind int .named(Cols).to(8) ); That's all. Note The same result might be accomplished with having different types for rows and cols. Full example here. Check out also...","title":"4. [Basic] Annotations to the rescue"},{"location":"tutorial.html#5-basic-split-your-configuration","text":"But my project has hundreds of interfaces and I would like to split my bindings into separate components. This is simple to do with [Boost.DI] as an injector can be extended by other injectors. Let's split our configuration then and keep our model bindings separately from app bindings. auto model_module = [] { return di::make_injector( di::bind int .named(Rows).to(6) , di::bind int .named(Cols).to(8) ); }; auto app_module = [](const bool use_gui_view) { return di::make_injector( di::bind iview .to([ ](const auto injector) - iview { if (use_gui_view) return injector.template create gui_view (); else return injector.template create text_view (); }) , di::bind timer .in(di::unique) // different per request , di::bind iclient*[] ().to user, timer () // bind many clients ); }; And glue them into one injector the same way... const auto injector = di::make_injector( model_module() , app_module(use_gui_view) ); Note Gluing many injector s into one is order independent. And full example! But I would like to have a module in cpp file, how can I do that? Such design might be achieved with [Boost].DI using injector and exposing given types. Expose all types (default) const const auto injector = // auto exposes all types di::make_injector( di::bind int .to(42) , di::bind double .to(87.0) ); injector.create int (); OK injector.create double (); // OK Expose only specific types const di::injector int injector = // only int is exposed di::make_injector( di::bind int .to(42) , di::bind double .to(87.0) ); injector.create int (); OK injector.create double (); // COMPILE TIME ERROR, double is not exposed by the injector When exposing all types using auto modules have to be implemented in a header file. With di::injector T... a definition might be put in a cpp file as it\u2019s just a regular type. Such approach has a few benefits: * It\u2019s useful for encapsulation (ex. Another team provides a module but they don't want to expose an ability to create implementation details) * May also speed compilation times in case of extend usage of cpp files Note There is no performance (compile-time, run-time) overhead between exposing all types or just a specific ones. Moving back to our example. Let's refactor it then. di::injector model model_module() { return di::make_injector( di::bind int .named(Rows).to(6) , di::bind int .named(Cols).to(8) ); } di::injector app app_module(const bool use_gui_view) { return di::make_injector( di::bind iview .to([ ](const auto injector) - iview { if (use_gui_view) return injector.template create gui_view (); else return injector.template create text_view (); }) , di::bind timer .in(di::unique) // different per request , di::bind iclient*[] .to user, timer () // bind many clients , model_module() ); } Right now you can easily separate definition and declaration between hpp and cpp files. Check the full example here! Note You can also expose named parameters using di::injector BOOST_DI_EXPOSE((named = Rows) int) . Different variations of the same type have to be exposed explicitly using di::injector model , std::unique_ptr model . Type erasure is used under the hood when types are exposed explicitly ( di::injector T\u2026 ). Check out more examples here! Congrats! You have finished the basic part of the tutorial. Hopefully, you have noticed potential of DI and [Boost].DI but if are still not convinced check out the Advanced part.","title":"5. [Basic] Split your configuration"},{"location":"tutorial.html#6-advanced-dumplimit-your-types","text":"It's often a case that we would like to generate object diagram of our application in order to see code dependencies more clear. Usually, it's a really hard task as creation of objects may happen anywhere in the code. However, if the responsibility for creation objects will be given to [Boost].DI we get such functionality for free. The only thing we have to do is to implement how to dump our objects. Let's dump our dependencies using Plant UML format. See also. On the other hand, it would be great to be able to limit types which might be constructed. For example, we just want to allow smart pointers and disallow raw pointers too. We may want to have a view only with const parameters being passed, etc. [Boost].DI allows you to do so by using constructible policy or writing a custom policy . See also.","title":"6. [Advanced] Dump/Limit your types"},{"location":"tutorial.html#7-advanced-customize-it","text":"[Boost].DI was design having extensibility in mind. You can easily customize scopes - to have custom life time of an object providers - to have custom way of creating objects, for example by using preallocated memory policies - to have custom way of dumping types at run-time or limiting them at compile-time","title":"7. [Advanced] Customize it"},{"location":"tutorial.html#8-advanced-extend-it","text":"As mentioned before, [Boost].DI is quite easy to extend and therefore a lot of extensions exists already. Please check them out and write your own! Constructor Bindings Assisted Injection Concepts Lazy Named Parameters XML Injection Types Dumper UML Dumper Mocks Provider Scoped Scope Session Scope Shared Scope","title":"8. [Advanced] Extend it"},{"location":"user_guide.html","text":"Injector di::make_injector Bindings di::bind Injections automatic (default) BOOST_DI_INJECT BOOST_DI_INJECT_TRAITS di::inject di::ctor_traits Annotations (named = name) Scopes di::deduce (default) di::instance (di::bind .to(value)) di::singleton di::unique Modules BOOST_DI_EXPOSE Providers di::providers::stack_over_heap (default) di::providers::heap Policies di::policies::constructible Concepts di::concepts::boundable di::concepts::callable di::concepts::configurable di::concepts::creatable di::concepts::providable di::concepts::scopable Configuration di::config Implementation details Component Description Bindings DSL to create dependencies representation which will be used by core to resolve types Scopes Responsible for maintain objects life time Providers Responsible for providing object instance Policies Compile-time limitations for types / Run-time types vistor Config Configuration for [Policies] and [Providers] Core Responsible for resolving requested types (implementation detail) Wrappers Responsible for conversion to required type (implementation detail) Let's assume all examples below include boost/di.hpp header and define a convenient di namespace alias as well as some basic interfaces and types. #include boost/di.hpp namespace di = boost::di; struct i1 { virtual ~i1() = default; virtual void dummy1() = 0; }; struct i2 { virtual ~i2() = default; virtual void dummy2() = 0; }; struct impl1 : i1 { void dummy1() override { } }; struct impl2 : i2 { void dummy2() override { } }; struct impl : i1, i2 { void dummy1() override { } void dummy2() override { } }; Injector Injector is a core component providing types creation functionality using bindings . --- di::make_injector --- Header #include boost/di.hpp Description Creates injector type. Semantics template class... TDeps requires boundable TDeps... class injector { public: using deps; // list of dependencies using config; // configuration injector(injector ) = default; template class... Ts // no requirements injector(core::injector Ts... ) noexcept; explicit injector(const TDeps ...) noexcept; template class T injector operator=(T other) noexcept; template class T requires creatable T T create() const; }; Expression Requirement Description Returns TDeps... boundable TDeps...> Bindings to be used as configuration - create T () creatable T> Creates type T T Type T Is allowed? Note T \u2714 - T* \u2714 Ownership transfer! const T* \u2714 Ownership transfer! T \u2714 - const T \u2714 Reference with singleton / Temporary with unique T \u2714 - std::unique_ptr T \u2714 - std::shared_ptr T \u2714 - std::weak_ptr T \u2714 - boost_shared_ptr T \u2714 - template class TConfig = di::config , class... TBindings requires configurable TConfig boundable TBindings... auto make_injector(TBindings...) noexcept; Expression Requirement Description Returns TConfig configurable TConfig> Configuration per injector - make_injector(TBindings...) boundable TBindings...> Creates injector with given Bindings injector Test Example Injection in a nutshell (implementation detail) The main interface of the injector is a create method. When create method is called for type T the magic happens. Firstly, policies are verified (for example, whether the type T is allowed to be created). Then, the constructor traits are deduced ( ctor_traits ) for type T and dependencies of the constructor parameters are resolved ( binder ). wrapper is used to convert internal representation of the dependency into a required type (ex. shared_ptr T ). Whole process is repeated recursively for all required parameters of T constructor. struct direct; // T(...) struct uniform; // T{...} template class T, class... TArgs is_braces_constructible; // type T is constructible using T{...} template class T, class... TArgs is_constructible; // Type T is constructible using T(...) template class T is_injectable; // Type T uses BOOST_DI_INJECT or BOOST_DI_INJECT_TRAITS template class TConfig, class... TBindings // For Example, TBindings = { di::bind Interface .to Implementation } struct core::injector : TBindings... { using config = TConfig; using deps = TBindings...; template class T // For example, T = Interface auto create() const noexcept { TConfig::policies T ()...; // verify policies using Type = core::binder TBindings... ().resolve T (*this); // Type = Implementation return core::wrapper T {dependency.create(provider TInjector {*this}.get Type ())}; } }; template class TInjector, class TConfig struct provider { template class T auto get() const noexcept { using pair TInitialization, TCtor... = decltype(ctor_traits TInjector, T ()); return TConfig::provider().get(TInitialization{}, TCtor...); } const TInjector injector; }; template class TInjector struct any_type { template class T operator T() const { return injector.templte create T (); } const TInjector injector; }; template class TInjector, class T auto ctor_traits() { if (is_injectable T () { return pair direct, typename T::boost_di_inject__ {}; // BOOST_DI_INJECT(T, args...) - T(args...) } for (auto i = BOOST_DI_CFG_CTOR_LIMIT_SIZE; i = 0; --i) { if (is_constructible T, any_type TInjector ... ()) { // ... - i times return pair direct, any_type TInjector ... {}; // T(any_type...) } } for (auto i = BOOST_DI_CFG_CTOR_LIMIT_SIZE; i = 0; --i) { if (is_braces_constructible T, any_type TInjector ... ()) { // ... - i times return pair uniform, any_type TInjector ... {}; // T{any_type...} } } return error(...); }; Note Automatic injection depends on template implicit conversion operator and therefore conversion constructors template class I T(I) are not supported and have to be injected using BOOST_DI_INJECT , BOOST_DI_INJECT_TRAITS , di::inject or di::ctor_traits . Bindings Bindings define dependencies configuration describing what types will be created and what values will be passed into them. --- di::bind --- Header #include boost/di.hpp Description Allows to bind interface to implementation and associate value with it. Semantics struct override; // overrides given configuration namespace detail { template class I, class... Is/*any_of*/ requires boundable I, Is... struct bind { bind(bind ) noexcept = default; template class T requires !is_array I boundable I, T auto to() noexcept; template class... Ts requires is_array I boundable Ts... auto to() noexcept; template class T requires boundable I, T auto to(T ) noexcept; template class TScope requires scopable TScope auto in(const TScope = di::deduce) noexcept; template class TName // no requirements auto named(const TName = {}) noexcept; auto operator[](const override ) noexcept; }; } // detail template class... Ts requires boundable Ts... detail::bind Ts... bind{}; Expression Requirement Description Returns I , Is... boundable I, Is...> 'Interface' types - to T boundable T> Binds I, Is... to T type boundable to Ts... boundable Ts...> Binds I, Is... to Ts... type boundable to(T ) boundable T> Binds I, Is... to T object boundable in(const TScope ) scopable TScope> Binds I, Is... in TScope` boundable named(const TName ) - Binds I, Is... using named annotation boundable operator[](const override ) - Overrides given binding boundable Note Check out also instance scope to read more about binding to values: di::bind .to(value) . Expression Description Multiple Interfaces di::bind Interface1, Interface2, ... .to Implementation () Binds Interface1, Interface2, ... to Implementation using one object Multiple Bindings (std::array, std::vector, std::set) di::bind int[] .to({1, 2, ...}) Binds int to values 1, 2, ... di::bind Interface*[] .to Implementation1, Implementation2, ... () Binds Interface to Implementation1, Implementation2, ... Dynamic Bindings di::bind Interface .to([](const auto injector) { return injector.template create Implementation ()}) Allows to bind Interface depending on a run-time condition Test Example Injections Constructor Injection is the most powerful of available injections. It guarantees initialized state of data members. [Boost].DI constructor injection is achieved without any additional work from the user. --- automatic (default) --- Header #include boost/di.hpp Description [Boost].DI will deduce the best available constructor to be used for injection - unique constructor with the longest parameter list. If the default behavior should be changed constructor has to be explicitly marked with BOOST_DI_INJECT or BOOST_DI_INJECT_TRAITS or di::ctor_traits] or di::inject . Note Automatic constructor parameters deduction is limited to BOOST_DI_CFG_CTOR_LIMIT_SIZE , which by default is set to 10. Semantics class T { public: T(auto parameter1, auto parameter2, ..., auto parameterN); }; Expression Requirement Description Returns parameter1-parameterN - N constructor parameter - Note [Boost].DI is not able to automatically distinguish between ambiguous constructors with the same (longest) number of parameters. Use BOOST_DI_INJECT or BOOST_DI_INJECT_TRAITS or di::ctor_traits or di::inject to explicitly mark constructor to be injected. Test Example --- BOOST_DI_INJECT --- Header #include boost/di.hpp Description BOOST_DI_INJECT is a macro definition used to explicitly say [Boost].DI which constructor should be used as well as to annotate types - see annotations for further reding. When class has more than one constructor [Boost].DI will by default choose the one with the longest parameter list. In case of constructors ambiguity, [Boost].DI is not able to choose the best one. Then BOOST_DI_INJECT becomes handy to point which constructor should be used. Semantics struct T { BOOST_DI_INJECT(T, ...) { } }; Expression Requirement Description Returns T - Class/Struct name - ... - T constructor parameters - Note BOOST_DI_INJECT constructor parameters is limited to BOOST_DI_CFG_CTOR_LIMIT_SIZE , which by default is set to 10. Test Example --- BOOST_DI_INJECT_TRAITS --- Header #include boost/di.hpp Description BOOST_DI_INJECT_TRAITS is a macro definition used to define constructor traits. Semantics struct T { BOOST_DI_INJECT_TRAITS(...) { } T(...) { } }; Expression Requirement Description Returns ... - T constructor parameters - Note BOOST_DI_INJECT_TRAITS constructor parameters is limited to BOOST_DI_CFG_CTOR_LIMIT_SIZE , which by default is set to 10. Test Example --- di::inject --- Header #include boost/di.hpp Description di::inject informs [Boost].DI about constructor parameters. It's useful for generated/generic classes as it doesn't have constructor parameters size limitations. Semantics struct T { using boost_di_inject__ = di::inject ... ; T(...) {} }; Expression Requirement Description Returns ... - T constructor parameters - Note di::inject has no limitations if it comes to constructor parameters, however, named parameters are not allowed. Moreover, you can replace di::inject with any variadic type list type to remove dependency to [Boost].DI. For example, template class... struct type_list{}; using boost_di_inject__ = type_list ... ; Test Example --- di::ctor_traits --- Header #include boost/di.hpp Description di::ctor_traits is a trait in which constructor parameters for type T might be specified. It's useful for third party classes you don't have access to and which can't be created using automatic injection. Semantics namespace boost { namespace di { template struct ctor_traits T { BOOST_DI_INJECT_TRAITS(...); // or using type = di::inject ... ; }; }} Test Example Annotations Annotations are type properties specified in order to refer to a type by the name instead of the type it self. They are useful when constructor has more than one parameter of the same type. For example, T(int, int) . --- (named = name) --- Header #include boost/di.hpp Description Named parameters are handy to distinguish different constructor parameters of the same type. T(int value1, int value2); In order to inject proper values into value1 and value2 they have to be differentiate somehow. [Boost].DI solution for this problem are annotations. Note Annotations might be set only when constructor is marked using BOOST_DI_INJECT or BOOST_DI_INJECT_TRAITS . Semantics auto Name = []{}; // just an object struct T { BOOST_DI_INJECT(T, (named = Name) type type_name [= default_value], ...); }; Expression Requirement Description Returns Name - Object representing named type - Example BOOST_DI_INJECT(T, (named = value_1) int value1, (named = value_2) int value2); Note Implementation of constructor doesn't require annotations, only constructor definition requires them. Test Example Scopes Header #include boost/di.hpp Description Scopes are responsible for creating and maintaining life time of dependencies. If no scope will be given, deduce scope will be assumed. Semantics template class TExpected, class TGiven struct scope { template class T using is_referable; template class T, class TName, class TProvider static auto try_create(const TProvider ); template class T, class TName, class TProvider auto create(const TProvider ); }; Expression Requirement Description Returns TExpected - 'Interface' type - TGiven - 'Implementation' type - is_referable T - Verifies whether scope value might be converted to a reference true_type/false_type try_create T, TName, TProvider providable TProvider> Verifies whether type T might be created true_type/false_type create T, TName, TProvider providable TProvider> Creates type T T Type/Scope unique singleton instance T \u2714 - \u2714 T - \u2714 \u2714 const T \u2714 (temporary) \u2714 \u2714 T* (transfer ownership) \u2714 - - const T* \u2714 - - T \u2714 - \u2714 std::unique_ptr \u2714 - - std::shared_ptr \u2714 \u2714 \u2714 boost::shared_ptr \u2714 \u2714 - / \u2714 converted to std::weak_ptr - \u2714 - / \u2714 converted to Test Example --- di::deduce (default) --- Header #include boost/di.hpp Description Default scope which will be converted to one of the scopes depending on the type. Type Scope T unique T singleton const T unique (temporary) / singleton T* unique (ownership transfer) const T* unique (ownership transfer) T unique std::unique_ptr unique std::shared_ptr singleton boost::shared_ptr singleton std::weak_ptr singleton Semantics namespace scopes { struct deduce { template class TExpected, class TGiven struct scope { template class T using is_referable; template class T, class TName, class TProvider static auto try_create(const TProvider ); template class T, class TName, class TProvider auto create(const TProvider ); }; }; } scopes::deduce deduce; Expression Requirement Description Returns TExpected - 'Interface' type - TGiven - 'Implementation' type - is_referable T - Verifies whether scope value might be converted to a reference true_type/false_type try_create T, TName, TProvider providable TProvider> Verifies whether type T might be created true_type/false_type create T, TName, TProvider providable TProvider> Creates type T T Test Example --- di::instance (di::bind .to(value)) --- Header #include boost/di.hpp Description Scope representing values - passed externally. The life time of the object depends on the user. [Boost].DI is not maintaining the life time of these objects, however, values and strings will be copied and managed by the library. Type instance[in] ( bind .to(in) ) instance[out] ( injector.create out () ) T \u2714 \u2714 T \u2714 \u2714 const T \u2714 \u2714 T* - - const T* - - T \u2714 \u2714 std::unique_ptr - - std::shared_ptr \u2714 \u2714 boost::shared_ptr - \u2714 std::weak_ptr - \u2714 Semantics namespace scopes { struct instance { template class TExpected, class TGiven struct scope { template class T using is_referable; template class T, class TName, class TProvider static auto try_create(const TProvider ); template class T, class TName, class TProvider auto create(const TProvider ); }; }; } Expression Requirement Description Returns TExpected - 'Interface' type - TGiven - 'Implementation' type - is_referable T - Verifies whether scope value might be converted to a reference true_type/false_type try_create T, TName, TProvider providable TProvider> Verifies whether type T might be created true_type/false_type create T, TName, TProvider providable TProvider> Creates type T T Test Example --- di::singleton --- Header #include boost/di.hpp Description Scope representing shared value between all instances as well as threads. Singleton scope will be deduced in case of reference, std::shared_ptr , boost::shared_ptr or std::weak_ptr . Note Singleton scope will convert automatically between std::shared_ptr and boost::shared_ptr if required. Type singleton T - T \u2714 const T \u2714 T* - const T* - T - std::unique_ptr - std::shared_ptr \u2714 boost::shared_ptr \u2714 std::weak_ptr \u2714 Semantics namespace scopes { struct singleton { template class TExpected, class TGiven struct scope { template class T using is_referable; template class T, class TName, class TProvider static auto try_create(const TProvider ); template class T, class TName, class TProvider auto create(const TProvider ); }; }; } scopes::singleton singleton; Expression Requirement Description Returns TExpected - 'Interface' type - TGiven - 'Implementation' type - is_referable T - Verifies whether scope value might be converted to a reference true_type/false_type try_create T, TName, TProvider providable TProvider> Verifies whether type T might be created true_type/false_type create T, TName, TProvider providable TProvider> Creates type T T Test Example --- di::unique --- Header #include boost/di.hpp Description Scope representing unique/per request value. A new instance will be provided each time type will be requested. Type unique T \u2714 T - const T \u2714 (temporary) T* \u2714 (ownership transfer) const T* \u2714 (ownership transfer) T \u2714 std::unique_ptr \u2714 std::shared_ptr \u2714 boost::shared_ptr \u2714 std::weak_ptr - Semantics namespace scopes { struct unique { template class TExpected, class TGiven struct scope { template class T using is_referable; template class T, class TName, class TProvider static auto try_create(const TProvider ); template class T, class TName, class TProvider auto create(const TProvider ); }; }; } scopes::unique unique; Expression Requirement Description Returns TExpected - 'Interface' type - TGiven - 'Implementation' type - is_referable T - Verifies whether scope value might be converted to a reference true_type/false_type try_create T, TName, TProvider providable TProvider> Verifies whether type T might be created true_type/false_type create T, TName, TProvider providable TProvider> Creates type T T Test Example Modules Header #include boost/di.hpp Description Modules allow to split bindings configuration into smaller injectors . Module might be installed by passing it into make_injector . Semantics auto module = di::make_injector(...); di::injector Ts... module = di::make_injector(...); Expression Description Note auto module = di::make_injector(...) All types are exposed from module module.create T () is allowed for any T di::injector Ts... module = di::make_injector(...) Only Ts... types are exposed from module module.create T () is allowed only for T = Ts... Test Example --- BOOST_DI_EXPOSE --- Header #include boost/di.hpp Description BOOST_DI_EXPOSE is a macro definition allowing to expose named parameters via module/ injector . Semantics di::injector BOOST_DI_EXPOSE((named = Name) T), ... ; Expression Requirement Description Returns Name - Named object - ... - More types to be exposed - Test Example Providers Header #include boost/di.hpp Description Providers are responsible for creating objects using given Configuration . Semantics namespace type_traits { struct direct; // T(...) struct uniform; // T{...} struct heap; // new T struct stack; // T } namespace providers { class provider { public: template class T, class... TArgs struct is_creatable; template class T , class TInit // type_traits::direct/type_traits::uniform , class TMemory // type_traits::heap/type_traits::stack , class... TArgs auto get(const TInit , const TMemory , TArgs ... args) const; }; } struct config : di::config { template class TInjector static auto provider(const TInjector ) noexcept { return providers::stack_over_heap{}; } }; Expression Requirement Description Returns TInjector - injector - is_creatable T, TArgs... creatable TArgs...> Verify whether T is creatable with TArgs... true_type/false_type get(const TInit , const TMemory , TArgs ...) TInit - direct/uniform, TMemory - heap/stack Creates type T with TArgs... T Note Provider used by injector might changed locally via make_injector or globally via BOOST_DI_CFG . Test Example --- di::providers::stack_over_heap (default) --- Header #include boost/di.hpp Description Creates objects on the stack whenever possible, otherwise on the heap. Semantics namespace providers { class stack_over_heap { public: template class T, class... TArgs struct is_creatable; template class T , class TInit // type_traits::direct/type_traits::uniform , class TMemory // type_traits::heap/type_traits::stack , class... TArgs auto get(const TInit , const TMemory , TArgs ... args) const; }; } Expression Requirement Description Returns is_creatable T, TArgs... creatable TArgs...> Verify whether T is creatable with TArgs... true_type/false_type get(const TInit , const TMemory , TArgs ...) TInit - direct/uniform, TMemory - heap/stack Creates type T with TArgs... T Type TMemory T stack T stack const T stack T stack T* heap const T* heap std::unique_ptr heap std::shared_ptr heap std::weak_ptr heap boost::shared_ptr heap is_polymorphic T heap Test Example --- di::providers::heap --- Header #include boost/di.hpp Description Basic provider creates objects on the heap (always). Semantics namespace providers { class heap { public: template class T, class... TArgs struct is_creatable; template class T , class TInit // type_traits::direct/type_traits::uniform , class TMemory // type_traits::heap/type_traits::stack , class... TArgs auto get(const TInit , const TMemory , TArgs ... args) const; }; } Expression Requirement Description Returns is_creatable T, TArgs... creatable TArgs...> Verify whether T is creatable with TArgs... true_type/false_type get(const TInit , const TMemory , TArgs ...) TInit - direct/uniform, TMemory - heap/stack Creates type T with TArgs... T Test Example Policies Header #include boost/di.hpp Description Policies operates on dependencies in order to limit allowed behaviour or visit created types during run-time. Policies are set up via Configuration . Note By default [Boost].DI has NO policies enabled. Semantics template class... TPolicies requires callable TPolicies... auto make_policies(TPolicies...) noexcept; struct config : di::config { template class TInjector static auto policies(const TInjector ) noexcept { return make_policies(...); } }; | | // policy / template class T ----------------------------------------------------- void operator()(const T ); Expression Requirement Description Returns TInjector - injector - make_policies TPolicies... callable TPolicies...> Creates policies callable list T Description Example T::type Type to be created std::shared_ptr int T::expected Decayed 'Interface' type interface T::given Decayed 'Given' type implementatoin T::name Annotation name my_name T::arity Number of constructor arguments integral_constant int, 3 T::scope scope singleton T::is_root Is the root object (a type create was called with) true_type / false_type Note In order for injector to verify policies they have to be created using config and passed via TConfig in make_injector or set it globally via BOOST_DI_CFG . Test Example --- di::policies::constructible --- Header #include boost/di.hpp Description Constructible policy limits constructor parameters to explicitly allowed. Note By default constructible policy disables creation of any constructor parameters. Semantics namespace policies { struct _ { }; // placeholder constexpr auto include_root = true; template class T struct is_root; // true when is the root type (`create RooType ()`) template class T struct is_bound; // true when type is bound with 'di::bind T ' template class T struct is_injected; // true when type is injected using 'BOOST_DI_INJECT' or is 'fundamental' template bool IncludeRoot = false, class T auto constructible(const T ) noexcept; } namespace operators { template class X inline auto operator!(const X ) template class X, class Y inline auto operator (const X , const Y ); template class X, class Y inline auto operator||(const X , const Y ); } Expression Requirement Description Returns is_root T - Verify whether type T is a root type true_type/false_type is_bound T - Verify whether type T is bound true_type/false_type is_injected T - Verify whether type T is injected via BOOST_DI_INJECT true_type/false_type Note In order to allow logic operators using namespace boost::di::policies::operators has to be used. Test Note STL type traits are supported and might be combined with [Boost].DI traits in order to limit constructor types For example, std::is_same _, int {} || std::is_constructible _, int, int {} || std::is_base_of int, _ {} , etc... Example Concepts Concepts are types constraints which ensure that only given types which are satisfied by the constraint will be allowed. If type doesn't satisfy the concept short and descriptive error message is provided. --- di::concepts::boundable --- Header #include boost/di.hpp Description Bindings type requirement. Synopsis template class TExpected, class TGiven concept bool boundable() { return is_complete TExpected () is_complete TGiven () (is_base_of TExpected, TGiven () || is_convertible TGiven, TExpected ()); } template class... Ts concept bool boundable() { return is_supported Ts ()... is_movable Ts ()... (is_base_of injector, Ts ()... || is_base_of dependency, Ts ()...); } Semantics boundable T boundable Ts... Expression Description Returns Ts... Bindings to be verified true_type if constraint is satisfied, Error otherwise Example Error type T ::has_disallowed_qualifiers Description type T has disallowed qualifiers Expression Error type T ::is_abstract Description type T is abstract BOOST_DI_CFG_DIAGNOSTICS_LEVEL 0, 1 - no additional info, 2 - info about why type T is abstract Expression Error type T ::is_not_related_to Description type T is not related to type U Expression Error type T ::is_bound_more_than_once Description type T is bound more than once Expression Error type T ::is_neither_a_dependency_nor_an_injector Description type T is neither a dependency nor an injector Expression --- di::concepts::callable --- Header #include boost/di.hpp Description Policy type requirement. Synopsis template class T concept bool callable() { return requires(T object) { { object(...) }; } } Semantics callable T Example Error policy TPolicy ::requires_ call_operator Description policy TPolicy requires a call operator Expression --- di::concepts::configurable --- Header #include boost/di.hpp Description Configuration type requirement. Synopsis template class T concept bool configurable() { return requires(T object) { return providable decltype(T::provider(...)) callable decltype(T::policies(...)) (); } } Semantics configurable T Example Error config TConfig ::requires_ provider providable_type (...) Description config T requires only providable and callable types Expression --- di::concepts::creatable --- Header #include boost/di.hpp Description Requirement for type T which is going to be created via injector .create T () Synopsis namespace type_traits { template class T using ctor_traits; // returns list of constructor parameters } template class T, class... TArgs concept bool creatable() { return is_constructible T, TArgs... () is_constructible TArgs, type_traits::ctor_traits TArgs ... (); } Semantics creatable T, TArgs... Example Error abstract_type T ::is_not_bound Description abstract type T is not bound BOOST_DI_CFG_DIAGNOSTICS_LEVEL 0 - 'constraint not satisfied', 1 - (0) + abstract type is not bound, 2 - (1) + creation tree Suggestion 'type is not bound, did you forget to add: 'di::bind .to ()'?' Expression Expression Error type T ::has_ambiguous_number_of_constructor_parameters::given Given ::expected Expected Description type T has ambiguous number of constructor parameters where Given were provided but Expected were expected BOOST_DI_CFG_DIAGNOSTICS_LEVEL 0 - 'constraint not satisfied', 1 - (0) + abstract type is not bound, 2 - (1) + creation tree Suggestion 'verify BOOST_DI_INJECT_TRAITS or di::ctor_traits' Expression Error type T ::has_to_many_constructor_parameters::max Max Description type T has to many constructor parameter where maximum number is Max BOOST_DI_CFG_DIAGNOSTICS_LEVEL 0 - 'constraint not satisfied', 1 - (0) + abstract type is not bound, 2 - (1) + creation tree Suggestion 'increase BOOST_DI_CFG_CTOR_LIMIT_SIZE value or reduce number of constructor parameters' Expression Error scoped TScope ::is_not_convertible_to T Description scope TScope is not convertible to type T BOOST_DI_CFG_DIAGNOSTICS_LEVEL 0 - 'constraint not satisfied', 1 - (0) + abstract type is not bound, 2 - (1) + creation tree Suggestion 'scoped object is not convertible to the requested type, did you mistake the scope: 'di::bind .in(scope)'?' Expression Error scoped instance ::is_not_convertible_to T Description instance is not convertible to type T BOOST_DI_CFG_DIAGNOSTICS_LEVEL 0 - 'constraint not satisfied', 1 - (0) + abstract type is not bound, 2 - (1) + creation tree Suggestion 'instance is not convertible to the requested type, verify binding: 'di::bind .to(value)'?' Expression Note Suggestions are not supported/displayed by MSVC-2015. --- di::concepts::providable --- Header #include boost/di.hpp Description Provider type requirement. Synopsis namespace type_traits { struct direct; struct uniform; struct stack; struct heap; } template class T concept bool providable() { return requires(T object) { { object.template get _ (type_traits::direct/type_traits::uniform{}, type_traits::stack/type_traits::heap{}, ...) }; { object.template is_creatable _ (type_traits::direct/type_traits::uniform{}, type_traits::stack/type_traits::heap{}, ...) }; } } Semantics providable T Example Error provider TProvider ::requires_ get Description provider TProvider requires get method Expression --- di::concepts::scopable --- Header #include boost/di.hpp Description Scope type requirement. Synopsis struct _ {}; // any type template class T concept bool scopable() { return requires(T) { typename scope _, _ ::is_referable; { T::scope _, _ {}.try_create() }; { T::scope _, _ {}.create() }; } } Semantics scopable T Example Error scope TScope ::requires_ create Description scope TScope requires create method Expression Configuration --- di::config --- Header #include boost/di.hpp Description Injector configuration. Synopsis struct config { static auto provider(...) noexcept; static auto policies(...) noexcept; }; Expression Requirement Description Returns provider() providable Creates provider providable policies() callable Creates policies callable Expression Description BOOST_DI_CFG Global configuration allows to customize provider and policies Semantics di::make_injector config (...) // or #define BOOST_DI_CFG config // change default di::make_injector(...) Test Example","title":"User Guide"},{"location":"user_guide.html#injector","text":"Injector is a core component providing types creation functionality using bindings . --- di::make_injector --- Header #include boost/di.hpp Description Creates injector type. Semantics template class... TDeps requires boundable TDeps... class injector { public: using deps; // list of dependencies using config; // configuration injector(injector ) = default; template class... Ts // no requirements injector(core::injector Ts... ) noexcept; explicit injector(const TDeps ...) noexcept; template class T injector operator=(T other) noexcept; template class T requires creatable T T create() const; }; Expression Requirement Description Returns TDeps... boundable TDeps...> Bindings to be used as configuration - create T () creatable T> Creates type T T Type T Is allowed? Note T \u2714 - T* \u2714 Ownership transfer! const T* \u2714 Ownership transfer! T \u2714 - const T \u2714 Reference with singleton / Temporary with unique T \u2714 - std::unique_ptr T \u2714 - std::shared_ptr T \u2714 - std::weak_ptr T \u2714 - boost_shared_ptr T \u2714 - template class TConfig = di::config , class... TBindings requires configurable TConfig boundable TBindings... auto make_injector(TBindings...) noexcept; Expression Requirement Description Returns TConfig configurable TConfig> Configuration per injector - make_injector(TBindings...) boundable TBindings...> Creates injector with given Bindings injector Test Example Injection in a nutshell (implementation detail) The main interface of the injector is a create method. When create method is called for type T the magic happens. Firstly, policies are verified (for example, whether the type T is allowed to be created). Then, the constructor traits are deduced ( ctor_traits ) for type T and dependencies of the constructor parameters are resolved ( binder ). wrapper is used to convert internal representation of the dependency into a required type (ex. shared_ptr T ). Whole process is repeated recursively for all required parameters of T constructor. struct direct; // T(...) struct uniform; // T{...} template class T, class... TArgs is_braces_constructible; // type T is constructible using T{...} template class T, class... TArgs is_constructible; // Type T is constructible using T(...) template class T is_injectable; // Type T uses BOOST_DI_INJECT or BOOST_DI_INJECT_TRAITS template class TConfig, class... TBindings // For Example, TBindings = { di::bind Interface .to Implementation } struct core::injector : TBindings... { using config = TConfig; using deps = TBindings...; template class T // For example, T = Interface auto create() const noexcept { TConfig::policies T ()...; // verify policies using Type = core::binder TBindings... ().resolve T (*this); // Type = Implementation return core::wrapper T {dependency.create(provider TInjector {*this}.get Type ())}; } }; template class TInjector, class TConfig struct provider { template class T auto get() const noexcept { using pair TInitialization, TCtor... = decltype(ctor_traits TInjector, T ()); return TConfig::provider().get(TInitialization{}, TCtor...); } const TInjector injector; }; template class TInjector struct any_type { template class T operator T() const { return injector.templte create T (); } const TInjector injector; }; template class TInjector, class T auto ctor_traits() { if (is_injectable T () { return pair direct, typename T::boost_di_inject__ {}; // BOOST_DI_INJECT(T, args...) - T(args...) } for (auto i = BOOST_DI_CFG_CTOR_LIMIT_SIZE; i = 0; --i) { if (is_constructible T, any_type TInjector ... ()) { // ... - i times return pair direct, any_type TInjector ... {}; // T(any_type...) } } for (auto i = BOOST_DI_CFG_CTOR_LIMIT_SIZE; i = 0; --i) { if (is_braces_constructible T, any_type TInjector ... ()) { // ... - i times return pair uniform, any_type TInjector ... {}; // T{any_type...} } } return error(...); }; Note Automatic injection depends on template implicit conversion operator and therefore conversion constructors template class I T(I) are not supported and have to be injected using BOOST_DI_INJECT , BOOST_DI_INJECT_TRAITS , di::inject or di::ctor_traits .","title":"Injector"},{"location":"user_guide.html#bindings","text":"Bindings define dependencies configuration describing what types will be created and what values will be passed into them. --- di::bind --- Header #include boost/di.hpp Description Allows to bind interface to implementation and associate value with it. Semantics struct override; // overrides given configuration namespace detail { template class I, class... Is/*any_of*/ requires boundable I, Is... struct bind { bind(bind ) noexcept = default; template class T requires !is_array I boundable I, T auto to() noexcept; template class... Ts requires is_array I boundable Ts... auto to() noexcept; template class T requires boundable I, T auto to(T ) noexcept; template class TScope requires scopable TScope auto in(const TScope = di::deduce) noexcept; template class TName // no requirements auto named(const TName = {}) noexcept; auto operator[](const override ) noexcept; }; } // detail template class... Ts requires boundable Ts... detail::bind Ts... bind{}; Expression Requirement Description Returns I , Is... boundable I, Is...> 'Interface' types - to T boundable T> Binds I, Is... to T type boundable to Ts... boundable Ts...> Binds I, Is... to Ts... type boundable to(T ) boundable T> Binds I, Is... to T object boundable in(const TScope ) scopable TScope> Binds I, Is... in TScope` boundable named(const TName ) - Binds I, Is... using named annotation boundable operator[](const override ) - Overrides given binding boundable Note Check out also instance scope to read more about binding to values: di::bind .to(value) . Expression Description Multiple Interfaces di::bind Interface1, Interface2, ... .to Implementation () Binds Interface1, Interface2, ... to Implementation using one object Multiple Bindings (std::array, std::vector, std::set) di::bind int[] .to({1, 2, ...}) Binds int to values 1, 2, ... di::bind Interface*[] .to Implementation1, Implementation2, ... () Binds Interface to Implementation1, Implementation2, ... Dynamic Bindings di::bind Interface .to([](const auto injector) { return injector.template create Implementation ()}) Allows to bind Interface depending on a run-time condition Test Example","title":"Bindings"},{"location":"user_guide.html#injections","text":"Constructor Injection is the most powerful of available injections. It guarantees initialized state of data members. [Boost].DI constructor injection is achieved without any additional work from the user. --- automatic (default) --- Header #include boost/di.hpp Description [Boost].DI will deduce the best available constructor to be used for injection - unique constructor with the longest parameter list. If the default behavior should be changed constructor has to be explicitly marked with BOOST_DI_INJECT or BOOST_DI_INJECT_TRAITS or di::ctor_traits] or di::inject . Note Automatic constructor parameters deduction is limited to BOOST_DI_CFG_CTOR_LIMIT_SIZE , which by default is set to 10. Semantics class T { public: T(auto parameter1, auto parameter2, ..., auto parameterN); }; Expression Requirement Description Returns parameter1-parameterN - N constructor parameter - Note [Boost].DI is not able to automatically distinguish between ambiguous constructors with the same (longest) number of parameters. Use BOOST_DI_INJECT or BOOST_DI_INJECT_TRAITS or di::ctor_traits or di::inject to explicitly mark constructor to be injected. Test Example --- BOOST_DI_INJECT --- Header #include boost/di.hpp Description BOOST_DI_INJECT is a macro definition used to explicitly say [Boost].DI which constructor should be used as well as to annotate types - see annotations for further reding. When class has more than one constructor [Boost].DI will by default choose the one with the longest parameter list. In case of constructors ambiguity, [Boost].DI is not able to choose the best one. Then BOOST_DI_INJECT becomes handy to point which constructor should be used. Semantics struct T { BOOST_DI_INJECT(T, ...) { } }; Expression Requirement Description Returns T - Class/Struct name - ... - T constructor parameters - Note BOOST_DI_INJECT constructor parameters is limited to BOOST_DI_CFG_CTOR_LIMIT_SIZE , which by default is set to 10. Test Example --- BOOST_DI_INJECT_TRAITS --- Header #include boost/di.hpp Description BOOST_DI_INJECT_TRAITS is a macro definition used to define constructor traits. Semantics struct T { BOOST_DI_INJECT_TRAITS(...) { } T(...) { } }; Expression Requirement Description Returns ... - T constructor parameters - Note BOOST_DI_INJECT_TRAITS constructor parameters is limited to BOOST_DI_CFG_CTOR_LIMIT_SIZE , which by default is set to 10. Test Example --- di::inject --- Header #include boost/di.hpp Description di::inject informs [Boost].DI about constructor parameters. It's useful for generated/generic classes as it doesn't have constructor parameters size limitations. Semantics struct T { using boost_di_inject__ = di::inject ... ; T(...) {} }; Expression Requirement Description Returns ... - T constructor parameters - Note di::inject has no limitations if it comes to constructor parameters, however, named parameters are not allowed. Moreover, you can replace di::inject with any variadic type list type to remove dependency to [Boost].DI. For example, template class... struct type_list{}; using boost_di_inject__ = type_list ... ; Test Example --- di::ctor_traits --- Header #include boost/di.hpp Description di::ctor_traits is a trait in which constructor parameters for type T might be specified. It's useful for third party classes you don't have access to and which can't be created using automatic injection. Semantics namespace boost { namespace di { template struct ctor_traits T { BOOST_DI_INJECT_TRAITS(...); // or using type = di::inject ... ; }; }} Test Example","title":"Injections"},{"location":"user_guide.html#annotations","text":"Annotations are type properties specified in order to refer to a type by the name instead of the type it self. They are useful when constructor has more than one parameter of the same type. For example, T(int, int) . --- (named = name) --- Header #include boost/di.hpp Description Named parameters are handy to distinguish different constructor parameters of the same type. T(int value1, int value2); In order to inject proper values into value1 and value2 they have to be differentiate somehow. [Boost].DI solution for this problem are annotations. Note Annotations might be set only when constructor is marked using BOOST_DI_INJECT or BOOST_DI_INJECT_TRAITS . Semantics auto Name = []{}; // just an object struct T { BOOST_DI_INJECT(T, (named = Name) type type_name [= default_value], ...); }; Expression Requirement Description Returns Name - Object representing named type - Example BOOST_DI_INJECT(T, (named = value_1) int value1, (named = value_2) int value2); Note Implementation of constructor doesn't require annotations, only constructor definition requires them. Test Example","title":"Annotations"},{"location":"user_guide.html#scopes","text":"Header #include boost/di.hpp Description Scopes are responsible for creating and maintaining life time of dependencies. If no scope will be given, deduce scope will be assumed. Semantics template class TExpected, class TGiven struct scope { template class T using is_referable; template class T, class TName, class TProvider static auto try_create(const TProvider ); template class T, class TName, class TProvider auto create(const TProvider ); }; Expression Requirement Description Returns TExpected - 'Interface' type - TGiven - 'Implementation' type - is_referable T - Verifies whether scope value might be converted to a reference true_type/false_type try_create T, TName, TProvider providable TProvider> Verifies whether type T might be created true_type/false_type create T, TName, TProvider providable TProvider> Creates type T T Type/Scope unique singleton instance T \u2714 - \u2714 T - \u2714 \u2714 const T \u2714 (temporary) \u2714 \u2714 T* (transfer ownership) \u2714 - - const T* \u2714 - - T \u2714 - \u2714 std::unique_ptr \u2714 - - std::shared_ptr \u2714 \u2714 \u2714 boost::shared_ptr \u2714 \u2714 - / \u2714 converted to std::weak_ptr - \u2714 - / \u2714 converted to Test Example --- di::deduce (default) --- Header #include boost/di.hpp Description Default scope which will be converted to one of the scopes depending on the type. Type Scope T unique T singleton const T unique (temporary) / singleton T* unique (ownership transfer) const T* unique (ownership transfer) T unique std::unique_ptr unique std::shared_ptr singleton boost::shared_ptr singleton std::weak_ptr singleton Semantics namespace scopes { struct deduce { template class TExpected, class TGiven struct scope { template class T using is_referable; template class T, class TName, class TProvider static auto try_create(const TProvider ); template class T, class TName, class TProvider auto create(const TProvider ); }; }; } scopes::deduce deduce; Expression Requirement Description Returns TExpected - 'Interface' type - TGiven - 'Implementation' type - is_referable T - Verifies whether scope value might be converted to a reference true_type/false_type try_create T, TName, TProvider providable TProvider> Verifies whether type T might be created true_type/false_type create T, TName, TProvider providable TProvider> Creates type T T Test Example --- di::instance (di::bind .to(value)) --- Header #include boost/di.hpp Description Scope representing values - passed externally. The life time of the object depends on the user. [Boost].DI is not maintaining the life time of these objects, however, values and strings will be copied and managed by the library. Type instance[in] ( bind .to(in) ) instance[out] ( injector.create out () ) T \u2714 \u2714 T \u2714 \u2714 const T \u2714 \u2714 T* - - const T* - - T \u2714 \u2714 std::unique_ptr - - std::shared_ptr \u2714 \u2714 boost::shared_ptr - \u2714 std::weak_ptr - \u2714 Semantics namespace scopes { struct instance { template class TExpected, class TGiven struct scope { template class T using is_referable; template class T, class TName, class TProvider static auto try_create(const TProvider ); template class T, class TName, class TProvider auto create(const TProvider ); }; }; } Expression Requirement Description Returns TExpected - 'Interface' type - TGiven - 'Implementation' type - is_referable T - Verifies whether scope value might be converted to a reference true_type/false_type try_create T, TName, TProvider providable TProvider> Verifies whether type T might be created true_type/false_type create T, TName, TProvider providable TProvider> Creates type T T Test Example --- di::singleton --- Header #include boost/di.hpp Description Scope representing shared value between all instances as well as threads. Singleton scope will be deduced in case of reference, std::shared_ptr , boost::shared_ptr or std::weak_ptr . Note Singleton scope will convert automatically between std::shared_ptr and boost::shared_ptr if required. Type singleton T - T \u2714 const T \u2714 T* - const T* - T - std::unique_ptr - std::shared_ptr \u2714 boost::shared_ptr \u2714 std::weak_ptr \u2714 Semantics namespace scopes { struct singleton { template class TExpected, class TGiven struct scope { template class T using is_referable; template class T, class TName, class TProvider static auto try_create(const TProvider ); template class T, class TName, class TProvider auto create(const TProvider ); }; }; } scopes::singleton singleton; Expression Requirement Description Returns TExpected - 'Interface' type - TGiven - 'Implementation' type - is_referable T - Verifies whether scope value might be converted to a reference true_type/false_type try_create T, TName, TProvider providable TProvider> Verifies whether type T might be created true_type/false_type create T, TName, TProvider providable TProvider> Creates type T T Test Example --- di::unique --- Header #include boost/di.hpp Description Scope representing unique/per request value. A new instance will be provided each time type will be requested. Type unique T \u2714 T - const T \u2714 (temporary) T* \u2714 (ownership transfer) const T* \u2714 (ownership transfer) T \u2714 std::unique_ptr \u2714 std::shared_ptr \u2714 boost::shared_ptr \u2714 std::weak_ptr - Semantics namespace scopes { struct unique { template class TExpected, class TGiven struct scope { template class T using is_referable; template class T, class TName, class TProvider static auto try_create(const TProvider ); template class T, class TName, class TProvider auto create(const TProvider ); }; }; } scopes::unique unique; Expression Requirement Description Returns TExpected - 'Interface' type - TGiven - 'Implementation' type - is_referable T - Verifies whether scope value might be converted to a reference true_type/false_type try_create T, TName, TProvider providable TProvider> Verifies whether type T might be created true_type/false_type create T, TName, TProvider providable TProvider> Creates type T T Test Example","title":"Scopes"},{"location":"user_guide.html#modules","text":"Header #include boost/di.hpp Description Modules allow to split bindings configuration into smaller injectors . Module might be installed by passing it into make_injector . Semantics auto module = di::make_injector(...); di::injector Ts... module = di::make_injector(...); Expression Description Note auto module = di::make_injector(...) All types are exposed from module module.create T () is allowed for any T di::injector Ts... module = di::make_injector(...) Only Ts... types are exposed from module module.create T () is allowed only for T = Ts... Test Example --- BOOST_DI_EXPOSE --- Header #include boost/di.hpp Description BOOST_DI_EXPOSE is a macro definition allowing to expose named parameters via module/ injector . Semantics di::injector BOOST_DI_EXPOSE((named = Name) T), ... ; Expression Requirement Description Returns Name - Named object - ... - More types to be exposed - Test Example","title":"Modules"},{"location":"user_guide.html#providers","text":"Header #include boost/di.hpp Description Providers are responsible for creating objects using given Configuration . Semantics namespace type_traits { struct direct; // T(...) struct uniform; // T{...} struct heap; // new T struct stack; // T } namespace providers { class provider { public: template class T, class... TArgs struct is_creatable; template class T , class TInit // type_traits::direct/type_traits::uniform , class TMemory // type_traits::heap/type_traits::stack , class... TArgs auto get(const TInit , const TMemory , TArgs ... args) const; }; } struct config : di::config { template class TInjector static auto provider(const TInjector ) noexcept { return providers::stack_over_heap{}; } }; Expression Requirement Description Returns TInjector - injector - is_creatable T, TArgs... creatable TArgs...> Verify whether T is creatable with TArgs... true_type/false_type get(const TInit , const TMemory , TArgs ...) TInit - direct/uniform, TMemory - heap/stack Creates type T with TArgs... T Note Provider used by injector might changed locally via make_injector or globally via BOOST_DI_CFG . Test Example --- di::providers::stack_over_heap (default) --- Header #include boost/di.hpp Description Creates objects on the stack whenever possible, otherwise on the heap. Semantics namespace providers { class stack_over_heap { public: template class T, class... TArgs struct is_creatable; template class T , class TInit // type_traits::direct/type_traits::uniform , class TMemory // type_traits::heap/type_traits::stack , class... TArgs auto get(const TInit , const TMemory , TArgs ... args) const; }; } Expression Requirement Description Returns is_creatable T, TArgs... creatable TArgs...> Verify whether T is creatable with TArgs... true_type/false_type get(const TInit , const TMemory , TArgs ...) TInit - direct/uniform, TMemory - heap/stack Creates type T with TArgs... T Type TMemory T stack T stack const T stack T stack T* heap const T* heap std::unique_ptr heap std::shared_ptr heap std::weak_ptr heap boost::shared_ptr heap is_polymorphic T heap Test Example --- di::providers::heap --- Header #include boost/di.hpp Description Basic provider creates objects on the heap (always). Semantics namespace providers { class heap { public: template class T, class... TArgs struct is_creatable; template class T , class TInit // type_traits::direct/type_traits::uniform , class TMemory // type_traits::heap/type_traits::stack , class... TArgs auto get(const TInit , const TMemory , TArgs ... args) const; }; } Expression Requirement Description Returns is_creatable T, TArgs... creatable TArgs...> Verify whether T is creatable with TArgs... true_type/false_type get(const TInit , const TMemory , TArgs ...) TInit - direct/uniform, TMemory - heap/stack Creates type T with TArgs... T Test Example","title":"Providers"},{"location":"user_guide.html#policies","text":"Header #include boost/di.hpp Description Policies operates on dependencies in order to limit allowed behaviour or visit created types during run-time. Policies are set up via Configuration . Note By default [Boost].DI has NO policies enabled. Semantics template class... TPolicies requires callable TPolicies... auto make_policies(TPolicies...) noexcept; struct config : di::config { template class TInjector static auto policies(const TInjector ) noexcept { return make_policies(...); } }; | | // policy / template class T ----------------------------------------------------- void operator()(const T ); Expression Requirement Description Returns TInjector - injector - make_policies TPolicies... callable TPolicies...> Creates policies callable list T Description Example T::type Type to be created std::shared_ptr int T::expected Decayed 'Interface' type interface T::given Decayed 'Given' type implementatoin T::name Annotation name my_name T::arity Number of constructor arguments integral_constant int, 3 T::scope scope singleton T::is_root Is the root object (a type create was called with) true_type / false_type Note In order for injector to verify policies they have to be created using config and passed via TConfig in make_injector or set it globally via BOOST_DI_CFG . Test Example --- di::policies::constructible --- Header #include boost/di.hpp Description Constructible policy limits constructor parameters to explicitly allowed. Note By default constructible policy disables creation of any constructor parameters. Semantics namespace policies { struct _ { }; // placeholder constexpr auto include_root = true; template class T struct is_root; // true when is the root type (`create RooType ()`) template class T struct is_bound; // true when type is bound with 'di::bind T ' template class T struct is_injected; // true when type is injected using 'BOOST_DI_INJECT' or is 'fundamental' template bool IncludeRoot = false, class T auto constructible(const T ) noexcept; } namespace operators { template class X inline auto operator!(const X ) template class X, class Y inline auto operator (const X , const Y ); template class X, class Y inline auto operator||(const X , const Y ); } Expression Requirement Description Returns is_root T - Verify whether type T is a root type true_type/false_type is_bound T - Verify whether type T is bound true_type/false_type is_injected T - Verify whether type T is injected via BOOST_DI_INJECT true_type/false_type Note In order to allow logic operators using namespace boost::di::policies::operators has to be used. Test Note STL type traits are supported and might be combined with [Boost].DI traits in order to limit constructor types For example, std::is_same _, int {} || std::is_constructible _, int, int {} || std::is_base_of int, _ {} , etc... Example","title":"Policies"},{"location":"user_guide.html#concepts","text":"Concepts are types constraints which ensure that only given types which are satisfied by the constraint will be allowed. If type doesn't satisfy the concept short and descriptive error message is provided. --- di::concepts::boundable --- Header #include boost/di.hpp Description Bindings type requirement. Synopsis template class TExpected, class TGiven concept bool boundable() { return is_complete TExpected () is_complete TGiven () (is_base_of TExpected, TGiven () || is_convertible TGiven, TExpected ()); } template class... Ts concept bool boundable() { return is_supported Ts ()... is_movable Ts ()... (is_base_of injector, Ts ()... || is_base_of dependency, Ts ()...); } Semantics boundable T boundable Ts... Expression Description Returns Ts... Bindings to be verified true_type if constraint is satisfied, Error otherwise Example Error type T ::has_disallowed_qualifiers Description type T has disallowed qualifiers Expression Error type T ::is_abstract Description type T is abstract BOOST_DI_CFG_DIAGNOSTICS_LEVEL 0, 1 - no additional info, 2 - info about why type T is abstract Expression Error type T ::is_not_related_to Description type T is not related to type U Expression Error type T ::is_bound_more_than_once Description type T is bound more than once Expression Error type T ::is_neither_a_dependency_nor_an_injector Description type T is neither a dependency nor an injector Expression --- di::concepts::callable --- Header #include boost/di.hpp Description Policy type requirement. Synopsis template class T concept bool callable() { return requires(T object) { { object(...) }; } } Semantics callable T Example Error policy TPolicy ::requires_ call_operator Description policy TPolicy requires a call operator Expression --- di::concepts::configurable --- Header #include boost/di.hpp Description Configuration type requirement. Synopsis template class T concept bool configurable() { return requires(T object) { return providable decltype(T::provider(...)) callable decltype(T::policies(...)) (); } } Semantics configurable T Example Error config TConfig ::requires_ provider providable_type (...) Description config T requires only providable and callable types Expression --- di::concepts::creatable --- Header #include boost/di.hpp Description Requirement for type T which is going to be created via injector .create T () Synopsis namespace type_traits { template class T using ctor_traits; // returns list of constructor parameters } template class T, class... TArgs concept bool creatable() { return is_constructible T, TArgs... () is_constructible TArgs, type_traits::ctor_traits TArgs ... (); } Semantics creatable T, TArgs... Example Error abstract_type T ::is_not_bound Description abstract type T is not bound BOOST_DI_CFG_DIAGNOSTICS_LEVEL 0 - 'constraint not satisfied', 1 - (0) + abstract type is not bound, 2 - (1) + creation tree Suggestion 'type is not bound, did you forget to add: 'di::bind .to ()'?' Expression Expression Error type T ::has_ambiguous_number_of_constructor_parameters::given Given ::expected Expected Description type T has ambiguous number of constructor parameters where Given were provided but Expected were expected BOOST_DI_CFG_DIAGNOSTICS_LEVEL 0 - 'constraint not satisfied', 1 - (0) + abstract type is not bound, 2 - (1) + creation tree Suggestion 'verify BOOST_DI_INJECT_TRAITS or di::ctor_traits' Expression Error type T ::has_to_many_constructor_parameters::max Max Description type T has to many constructor parameter where maximum number is Max BOOST_DI_CFG_DIAGNOSTICS_LEVEL 0 - 'constraint not satisfied', 1 - (0) + abstract type is not bound, 2 - (1) + creation tree Suggestion 'increase BOOST_DI_CFG_CTOR_LIMIT_SIZE value or reduce number of constructor parameters' Expression Error scoped TScope ::is_not_convertible_to T Description scope TScope is not convertible to type T BOOST_DI_CFG_DIAGNOSTICS_LEVEL 0 - 'constraint not satisfied', 1 - (0) + abstract type is not bound, 2 - (1) + creation tree Suggestion 'scoped object is not convertible to the requested type, did you mistake the scope: 'di::bind .in(scope)'?' Expression Error scoped instance ::is_not_convertible_to T Description instance is not convertible to type T BOOST_DI_CFG_DIAGNOSTICS_LEVEL 0 - 'constraint not satisfied', 1 - (0) + abstract type is not bound, 2 - (1) + creation tree Suggestion 'instance is not convertible to the requested type, verify binding: 'di::bind .to(value)'?' Expression Note Suggestions are not supported/displayed by MSVC-2015. --- di::concepts::providable --- Header #include boost/di.hpp Description Provider type requirement. Synopsis namespace type_traits { struct direct; struct uniform; struct stack; struct heap; } template class T concept bool providable() { return requires(T object) { { object.template get _ (type_traits::direct/type_traits::uniform{}, type_traits::stack/type_traits::heap{}, ...) }; { object.template is_creatable _ (type_traits::direct/type_traits::uniform{}, type_traits::stack/type_traits::heap{}, ...) }; } } Semantics providable T Example Error provider TProvider ::requires_ get Description provider TProvider requires get method Expression --- di::concepts::scopable --- Header #include boost/di.hpp Description Scope type requirement. Synopsis struct _ {}; // any type template class T concept bool scopable() { return requires(T) { typename scope _, _ ::is_referable; { T::scope _, _ {}.try_create() }; { T::scope _, _ {}.create() }; } } Semantics scopable T Example Error scope TScope ::requires_ create Description scope TScope requires create method Expression","title":"Concepts"},{"location":"user_guide.html#configuration","text":"--- di::config --- Header #include boost/di.hpp Description Injector configuration. Synopsis struct config { static auto provider(...) noexcept; static auto policies(...) noexcept; }; Expression Requirement Description Returns provider() providable Creates provider providable policies() callable Creates policies callable Expression Description BOOST_DI_CFG Global configuration allows to customize provider and policies Semantics di::make_injector config (...) // or #define BOOST_DI_CFG config // change default di::make_injector(...) Test Example","title":"Configuration"},{"location":"bloomberg-2018/README.html","text":"reveal.js A framework for easily creating beautiful presentations using HTML. Check out the live demo . reveal.js comes with a broad range of features including nested slides , Markdown contents , PDF export , speaker notes and a JavaScript API . There's also a fully featured visual editor and platform for sharing reveal.js presentations at slides.com . Table of contents Online Editor Instructions Markup Markdown Element Attributes Slide Attributes Configuration Presentation Size Dependencies Ready Event Auto-sliding Keyboard Bindings Touch Navigation Lazy Loading API Slide Changed Event Presentation State Slide States Slide Backgrounds Parallax Background Slide Transitions Internal links Fragments Fragment events Code syntax highlighting Slide number Overview mode Fullscreen mode Embedded media Stretching elements postMessage API PDF Export Theming Speaker Notes Share and Print Speaker Notes Server Side Speaker Notes Multiplexing Master presentation Client presentation Socket.io server MathJax Installation Basic setup Full setup Folder Structure License More reading Changelog : Up-to-date version history. Examples : Presentations created with reveal.js, add your own! Browser Support : Explanation of browser support and fallbacks. Plugins : A list of plugins that can be used to extend reveal.js. Online Editor Presentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at https://slides.com . Instructions Markup Here's a barebones example of a fully working reveal.js presentation: html head link rel= stylesheet href= css/reveal.css link rel= stylesheet href= css/theme/white.css /head body div class= reveal div class= slides section Slide 1 /section section Slide 2 /section /div /div script src= js/reveal.js /script script Reveal.initialize(); /script /body /html The presentation markup hierarchy needs to be .reveal .slides section where the section represents one slide and can be repeated indefinitely. If you place multiple section elements inside of another section they will be shown as vertical slides. The first of the vertical slides is the \"root\" of the others (at the top), and will be included in the horizontal sequence. For example: div class= reveal div class= slides section Single Horizontal Slide /section section section Vertical Slide 1 /section section Vertical Slide 2 /section /section /div /div Markdown It's possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your section elements and wrap the contents in a textarea data-template like the example below. You'll also need to add the plugin/markdown/marked.js and plugin/markdown/markdown.js scripts (in that order) to your HTML file. This is based on data-markdown from Paul Irish modified to use marked to support GitHub Flavored Markdown . Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks). section data-markdown textarea data-template ## Page title A paragraph with some text and a [link](http://hakim.se). /textarea /section External Markdown You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file: the data-separator attribute defines a regular expression for horizontal slides (defaults to ^\\r?\\n---\\r?\\n$ , a newline-bounded horizontal rule) and data-separator-vertical defines vertical slides (disabled by default). The data-separator-notes attribute is a regular expression for specifying the beginning of the current slide's speaker notes (defaults to note: ). The data-charset attribute is optional and specifies which charset to use when loading the external file. When used locally, this feature requires that reveal.js runs from a local web server . The following example customises all available options: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: data-charset= iso-8859-15 !-- Note that Windows uses `\\r\\n` instead of `\\n` as its linefeed character. For a regex that supports all operating systems, use `\\r?\\n` instead of `\\n`. -- /section Element Attributes Special syntax (in html comment) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things. section data-markdown script type= text/template - Item 1 !-- .element: class= fragment data-fragment-index= 2 -- - Item 2 !-- .element: class= fragment data-fragment-index= 1 -- /script /section Slide Attributes Special syntax (in html comment) is available for adding attributes to the slide section elements generated by your Markdown. section data-markdown script type= text/template !-- .slide: data-background= #ff0000 -- Markdown content /script /section Configuring marked We use marked to parse Markdown. To customise marked's rendering, you can pass in options when configuring Reveal : Reveal.initialize({ // Options which are passed into marked // See https://github.com/chjj/marked#options-1 markdown: { smartypants: true } }); Configuration At the end of your page you need to initialize reveal by running the following code. Note that all config values are optional and will default as specified below. Reveal.initialize({ // Display presentation control arrows controls: true, // Help the user learn the controls by providing hints, for example by // bouncing the down arrow when they first encounter a vertical slide controlsTutorial: true, // Determines where controls appear, edges or bottom-right controlsLayout: 'bottom-right', // Visibility rule for backwards navigation arrows; faded , hidden // or visible controlsBackArrows: 'faded', // Display a presentation progress bar progress: true, // Set default timing of 2 minutes per slide defaultTiming: 120, // Display the page number of the current slide slideNumber: false, // Push each slide change to the browser history history: false, // Enable keyboard shortcuts for navigation keyboard: true, // Enable the slide overview mode overview: true, // Vertical centering of slides center: true, // Enables touch navigation on devices with touch input touch: true, // Loop the presentation loop: false, // Change the presentation direction to be RTL rtl: false, // Randomizes the order of slides each time the presentation loads shuffle: false, // Turns fragments on and off globally fragments: true, // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded: false, // Flags if we should show a help overlay when the questionmark // key is pressed help: true, // Flags if speaker notes should be visible to all viewers showNotes: false, // Global override for autoplaying embedded media (video/audio/iframe) // - null: Media will only autoplay if data-autoplay is present // - true: All media will autoplay, regardless of individual setting // - false: No media will autoplay, regardless of individual setting autoPlayMedia: null, // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide: 0, // Stop auto-sliding after user input autoSlideStoppable: true, // Use this method for navigation when auto-sliding autoSlideMethod: Reveal.navigateNext, // Enable slide navigation via mouse wheel mouseWheel: false, // Hides the address bar on mobile devices hideAddressBar: true, // Opens links in an iframe preview overlay // Add `data-preview-link` and `data-preview-link= false ` to customise each link // individually previewLinks: false, // Transition style transition: 'slide', // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed: 'default', // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition: 'fade', // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance: 3, // Parallax background image parallaxBackgroundImage: '', // e.g. 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg' // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: null, parallaxBackgroundVertical: null, // The display mode that will be used to show slides display: 'block' }); The configuration can be updated after initialization using the configure method: // Turn autoSlide off Reveal.configure({ autoSlide: 0 }); // Start auto-sliding every 5s Reveal.configure({ autoSlide: 5000 }); Presentation Size All presentations have a normal size, that is the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport. See below for a list of configuration options related to sizing, including default values: Reveal.initialize({ ... // The normal size of the presentation, aspect ratio will be preserved // when the presentation is scaled to fit different resolutions. Can be // specified using percentage units. width: 960, height: 700, // Factor of the display size that should remain empty around the content margin: 0.1, // Bounds for smallest/largest possible scale to apply to content minScale: 0.2, maxScale: 1.5 }); If you wish to disable this behavior and do your own scaling (e.g. using media queries), try these settings: Reveal.initialize({ ... width: 100% , height: 100% , margin: 0, minScale: 1, maxScale: 1 }); Dependencies Reveal.js doesn't rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example: Reveal.initialize({ dependencies: [ // Cross-browser shim that fully implements classList - https://github.com/eligrey/classList.js/ { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } }, // Interpret Markdown in section elements { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, // Syntax highlight for code elements { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, // Zoom in and out with Alt+click { src: 'plugin/zoom-js/zoom.js', async: true }, // Speaker notes { src: 'plugin/notes/notes.js', async: true }, // MathJax { src: 'plugin/math/math.js', async: true } ] }); You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src : Path to the script to load - async : [optional] Flags if the script should load after reveal.js has started, defaults to false - callback : [optional] Function to execute when the script has loaded - condition : [optional] Function which must return true for the script to be loaded To load these dependencies, reveal.js requires head.js (a script loading library) to be loaded before reveal.js. Ready Event A 'ready' event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call Reveal.isReady() . Reveal.addEventListener( 'ready', function( event ) { // event.currentSlide, event.indexh, event.indexv } ); Note that we also add a .ready class to the .reveal element so that you can hook into this with CSS. Auto-sliding Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides: // Slide every five seconds Reveal.configure({ autoSlide: 5000 }); When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing \u00bba\u00ab on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config. You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute: section data-autoslide= 2000 p After 2 seconds the first fragment will be shown. /p p class= fragment data-autoslide= 10000 After 10 seconds the next fragment will be shown. /p p class= fragment Now, the fragment is displayed for 2 seconds before the next slide is shown. /p /section To override the method used for navigation when auto-sliding, you can specify the autoSlideMethod setting. To only navigate along the top layer and ignore vertical slides, set this to Reveal.navigateRight . Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired. Keyboard Bindings If you're unhappy with any of the default keyboard bindings you can override them using the keyboard config option: Reveal.configure({ keyboard: { 13: 'next', // go to the next slide when the ENTER key is pressed 27: function() {}, // do something custom when ESC is pressed 32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding) } }); Touch Navigation You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js. If there's some part of your content that needs to remain accessible to touch events you'll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled. Lazy Loading When working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option. To enable lazy loading all you need to do is change your \"src\" attributes to \"data-src\" as shown below. This is supported for image, video, audio and iframe elements. Lazy loaded iframes will also unload when the containing slide is no longer visible. section img data-src= image.png iframe data-src= http://hakim.se /iframe video source data-src= video.webm type= video/webm / source data-src= video.mp4 type= video/mp4 / /video /section API The Reveal object exposes a JavaScript API for controlling navigation and reading state: // Navigation Reveal.slide( indexh, indexv, indexf ); Reveal.left(); Reveal.right(); Reveal.up(); Reveal.down(); Reveal.prev(); Reveal.next(); Reveal.prevFragment(); Reveal.nextFragment(); // Randomize the order of slides Reveal.shuffle(); // Toggle presentation states, optionally pass true/false to force on/off Reveal.toggleOverview(); Reveal.togglePause(); Reveal.toggleAutoSlide(); // Shows a help overlay with keyboard shortcuts, optionally pass true/false // to force on/off Reveal.toggleHelp(); // Change a config value at runtime Reveal.configure({ controls: true }); // Returns the present configuration options Reveal.getConfig(); // Fetch the current scale of the presentation Reveal.getScale(); // Retrieves the previous and current slide elements Reveal.getPreviousSlide(); Reveal.getCurrentSlide(); Reveal.getIndices(); // { h: 0, v: 0 } } Reveal.getPastSlideCount(); Reveal.getProgress(); // (0 == first slide, 1 == last slide) Reveal.getSlides(); // Array of all slides Reveal.getTotalSlides(); // total number of slides // Returns the speaker notes for the current slide Reveal.getSlideNotes(); // State checks Reveal.isFirstSlide(); Reveal.isLastSlide(); Reveal.isOverview(); Reveal.isPaused(); Reveal.isAutoSliding(); Slide Changed Event A 'slidechanged' event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes. Some libraries, like MathJax (see #226 ), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'slidechanged', function( event ) { // event.previousSlide, event.currentSlide, event.indexh, event.indexv } ); Presentation State The presentation's current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire. Reveal.slide( 1 ); // we're on slide 1 var state = Reveal.getState(); Reveal.slide( 3 ); // we're on slide 3 Reveal.setState( state ); // we're back on slide 1 Slide States If you set data-state=\"somestate\" on a slide section , \"somestate\" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide. Furthermore you can also listen to these changes in state via JavaScript: Reveal.addEventListener( 'somestate', function() { // TODO: Sprinkle magic }, false ); Slide Backgrounds Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your section elements. Four different types of backgrounds are supported: color, image, video and iframe. Color Backgrounds All CSS color formats are supported, like rgba() or hsl(). section data-background-color= #ff0000 h2 Color /h2 /section Image Backgrounds By default, background images are resized to cover the full page. Available options: Attribute Default Description data-background-image URL of the image to show. GIFs restart when the slide opens. data-background-size cover See background-size on MDN. data-background-position center See background-position on MDN. data-background-repeat no-repeat See background-repeat on MDN. section data-background-image= http://example.com/image.png h2 Image /h2 /section section data-background-image= http://example.com/image.png data-background-size= 100px data-background-repeat= repeat h2 This background image will be sized to 100px and repeated /h2 /section Video Backgrounds Automatically plays a full size video behind the slide. Attribute Default Description data-background-video A single video source, or a comma separated list of video sources. data-background-video-loop false Flags if the video should play repeatedly. data-background-video-muted false Flags if the audio should be muted. data-background-size cover Use cover for full screen and some cropping or contain for letterboxing. section data-background-video= https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm data-background-video-loop data-background-video-muted h2 Video /h2 /section Iframe Backgrounds Embeds a web page as a slide background that covers 100% of the reveal.js width and height. The iframe is in the background layer, behind your slides, and as such it's not possible to interact with it by default. To make your background interactive, you can add the data-background-interactive attribute. section data-background-iframe= https://slides.com data-background-interactive h2 Iframe /h2 /section Background Transitions Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition. Parallax Background If you want to use a parallax scrolling background, set the first two config properties below when initializing reveal.js (the other two are optional). Reveal.initialize({ // Parallax background image parallaxBackgroundImage: '', // e.g. https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px - currently only pixels are supported (don't use % or auto) // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: 200, parallaxBackgroundVertical: 50 }); Make sure that the background size is much bigger than screen size to allow for some scrolling. View example . Slide Transitions The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute: section data-transition= zoom h2 This slide will override the presentation transition and zoom! /h2 /section section data-transition-speed= fast h2 Choose from three transition speeds: default, fast or slow! /h2 /section You can also use different in and out transitions for the same slide: section data-transition= slide The train goes on \u2026 /section section data-transition= slide and on \u2026 /section section data-transition= slide-in fade-out and stops. /section section data-transition= fade-in slide-out (Passengers entering and leaving) /section section data-transition= slide And it starts again. /section Internal links It's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute ( section id=\"some-slide\" ): a href= #/2/2 Link /a a href= #/some-slide Link /a You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it's a valid navigation route based on the current slide. a href= # class= navigate-left a href= # class= navigate-right a href= # class= navigate-up a href= # class= navigate-down a href= # class= navigate-prev !-- Previous vertical or horizontal slide -- a href= # class= navigate-next !-- Next vertical or horizontal slide -- Fragments Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here's an example: http://revealjs.com/#/fragments The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment: section p class= fragment grow grow /p p class= fragment shrink shrink /p p class= fragment fade-out fade-out /p p class= fragment fade-up fade-up (also down, left and right!) /p p class= fragment current-visible visible only once /p p class= fragment highlight-current-blue blue only once /p p class= fragment highlight-red highlight-red /p p class= fragment highlight-green highlight-green /p p class= fragment highlight-blue highlight-blue /p /section Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second. section span class= fragment fade-in span class= fragment fade-out I'll fade in, then out /span /span /section The display order of fragments can be controlled using the data-fragment-index attribute. section p class= fragment data-fragment-index= 3 Appears last /p p class= fragment data-fragment-index= 1 Appears first /p p class= fragment data-fragment-index= 2 Appears second /p /section Fragment events When a slide fragment is either shown or hidden reveal.js will dispatch an event. Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'fragmentshown', function( event ) { // event.fragment = the fragment DOM element } ); Reveal.addEventListener( 'fragmenthidden', function( event ) { // event.fragment = the fragment DOM element } ); Code syntax highlighting By default, Reveal is configured with highlight.js for code syntax highlighting. To enable syntax highlighting, you'll have to load the highlight plugin ( plugin/highlight/highlight.js ) and a highlight.js CSS theme (Reveal comes packaged with the zenburn theme: lib/css/zenburn.css ). Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present, surrounding whitespace is automatically removed. HTML will be escaped by default. To avoid this, for example if you are using mark to call out a line of code, add the data-noescape attribute to the code element. section pre code data-trim data-noescape (def lazy-fib (concat [0 1] mark ((fn rfib [a b] /mark (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) /code /pre /section Slide number If you would like to display the page number of the current slide you can do so using the slideNumber and showSlideNumber configuration values. // Shows the slide number using default formatting Reveal.configure({ slideNumber: true }); // Slide number formatting can be configured using these variables: // h.v : horizontal . vertical slide number (default) // h/v : horizontal / vertical slide number // c : flattened slide number // c/t : flattened slide number / total slides Reveal.configure({ slideNumber: 'c/t' }); // Control which views the slide number displays on using the showSlideNumber value: // all : show on all views (default) // speaker : only show slide numbers on speaker notes view // print : only show slide numbers when printing to PDF Reveal.configure({ showSlideNumber: 'speaker' }); Overview mode Press \"Esc\" or \"o\" keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks: Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } ); Reveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal.toggleOverview(); Fullscreen mode Just press \u00bbF\u00ab on your keyboard to show your presentation in fullscreen mode. Press the \u00bbESC\u00ab key to exit fullscreen mode. Embedded media Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown: video data-autoplay src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video If you want to enable or disable autoplay globally, for all embedded media, you can use the autoPlayMedia configuration option. If you set this to true ALL media will autoplay regardless of individual data-autoplay attributes. If you initialize with autoPlayMedia: false NO media will autoplay. Note that embedded HTML5 video / audio and YouTube/Vimeo iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute. Embedded iframes reveal.js automatically pushes two post messages to embedded iframes. slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden. Stretching elements Sometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below: section h2 This video will use up the remaining space on the slide /h2 video class= stretch src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video /section Limitations: - Only direct descendants of a slide section can be stretched - Only one descendant per slide section can be stretched postMessage API The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2: window .postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' ); When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window: window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); if( data.namespace === 'reveal' data.eventName ==='slidechanged' ) { // Slide changed, see data.state for slide number } } ); This cross-window messaging can be toggled on or off using configuration flags. Reveal.initialize({ ..., // Exposes the reveal.js API through window.postMessage postMessage: true, // Dispatches all reveal.js events to the parent window through postMessage postMessageEvents: false }); PDF Export Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium and to be serving the presentation from a webserver. Here's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300. Page size Export dimensions are inferred from the configured presentation size . Slides that are too tall to fit within a single page will expand onto multiple pages. You can limit how many pages a slide may expand onto using the pdfMaxPagesPerSlide config option, for example Reveal.configure({ pdfMaxPagesPerSlide: 1 }) ensures that no slide ever grows to more than one printed page. Print stylesheet To enable the PDF print capability in your presentation, the special print stylesheet at /css/print/pdf.css must be loaded. The default index.html file handles this for you when print-pdf is included in the query string. If you're using a different HTML template, you can add this to your HEAD: script var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); /script Instructions Open your presentation with print-pdf included in the query string i.e. http://localhost:8000/?print-pdf. You can test this with revealjs.com?print-pdf . If you want to include speaker notes in your export, you can append showNotes=true to the query string: http://localhost:8000/?print-pdf showNotes=true Open the in-browser print dialog (CTRL/CMD+P). Change the Destination setting to Save as PDF . Change the Layout to Landscape . Change the Margins to None . Enable the Background graphics option. Click Save . Alternatively you can use the decktape project. Theming The framework comes with a few different themes included: black: Black background, white text, blue links (default theme) white: White background, black text, blue links league: Gray background, white text, blue links (default theme for reveal.js 3.0.0) beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html: link rel= stylesheet href= css/theme/black.css id= theme If you want to add a theme of your own see the instructions here: /css/theme/README.md . Speaker Notes reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the 's' key on your keyboard to open the notes window. A speaker timer starts as soon as the speaker view is opened. You can reset it to 00:00:00 at any time by simply clicking/tapping on it. Notes are defined by appending an aside element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown. Alternatively you can add your notes in a data-notes attribute on the slide. Like section data-notes=\"Something important\" /section . When used locally, this feature requires that reveal.js runs from a local web server . section h2 Some Slide /h2 aside class= notes Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit 's' on your keyboard). /aside /section If you're using the external Markdown plugin, you can add notes with the help of a special delimiter: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: /section # Title ## Sub-title Here is some content... Note: This will only display in the notes window. Share and Print Speaker Notes Notes are only visible to the speaker inside of the speaker view. If you wish to share your notes with others you can initialize reveal.js with the showNotes config value set to true . Notes will appear along the bottom of the presentations. When showNotes is enabled notes are also included when you export to PDF . By default, notes are printed in a semi-transparent box on top of the slide. If you'd rather print them on a separate page after the slide, set showNotes: \"separate-page\" . Speaker notes clock and timers The speaker notes window will also show: Time elapsed since the beginning of the presentation. If you hover the mouse above this section, a timer reset button will appear. Current wall-clock time (Optionally) a pacing timer which indicates whether the current pace of the presentation is on track for the right timing (shown in green), and if not, whether the presenter should speed up (shown in red) or has the luxury of slowing down (blue). The pacing timer can be enabled by configuring by the defaultTiming parameter in the Reveal configuration block, which specifies the number of seconds per slide. 120 can be a reasonable rule of thumb. Timings can also be given per slide section by setting the data-timing attribute. Both values are in numbers of seconds. Server Side Speaker Notes In some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies: Reveal.initialize({ ... dependencies: [ { src: 'socket.io/socket.io.js', async: true }, { src: 'plugin/notes-server/client.js', async: true } ] }); Then: Install Node.js (4.0.0 or later) Run npm install Run node plugin/notes-server Multiplexing The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . The multiplex plugin needs the following 3 things to operate: Master presentation that has control Client presentations that follow the master Socket.io server to broadcast events from the master to the clients More details: Master presentation Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation: npm install node-static static If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server. You can then access your master presentation at http://localhost:1947 Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, // and if you want speaker notes { src: 'plugin/notes-server/client.js', async: true } // other dependencies... ] }); Client presentation Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via http://example.com/path/to/presentation/client/index.html , with the configuration below causing them to connect to the socket.io server as clients. Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] }); Socket.io server Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands: npm install node plugin/multiplex Or you can use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . You'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit http://example.com/token , where http://example.com is the location of your socket.io server. Or if you're going to use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , visit https://reveal-js-multiplex-ccjbegmaii.now.sh/token . You are very welcome to point your presentations at the Socket.io server running at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. The easiest way to do this is by installing now . With that installed, deploying your own Multiplex server is as easy running the following command from the reveal.js folder: now plugin/multiplex . socket.io server as file static server The socket.io server can play the role of static file server for your client presentation, as in the example at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match.) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] }); MathJax If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you'll need to include it as a reveal.js dependency, find our more about dependencies here . The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the mathjax configuration value. Below is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the math config object at all. Reveal.initialize({ // other options ... math: { mathjax: 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js', config: 'TeX-AMS_HTML-full' // See http://docs.mathjax.org/en/latest/config-files.html }, dependencies: [ { src: 'plugin/math/math.js', async: true } ] }); Read MathJax's documentation if you need HTTPS delivery or serving of specific versions for stability. Installation The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source. Basic setup The core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser. Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases Unzip and replace the example contents in index.html with your own Open index.html in a browser to view it Full setup Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code. Install Node.js (4.0.0 or later) Clone the reveal.js repository sh $ git clone https://github.com/hakimel/reveal.js.git Navigate to the reveal.js folder sh $ cd reveal.js Install dependencies sh $ npm install Serve the presentation and monitor source files for changes sh $ npm start Open http://localhost:8000 to view your presentation You can change the port by using npm start -- --port=8001 . Folder Structure css/ Core styles without which the project does not function js/ Like above but for JavaScript plugin/ Components that have been developed as extensions to reveal.js lib/ All other third party assets (JavaScript, CSS, fonts) License MIT licensed Copyright (C) 2017 Hakim El Hattab, http://hakim.se","title":"reveal.js [![Build Status](https://travis-ci.org/hakimel/reveal.js.svg?branch=master)](https://travis-ci.org/hakimel/reveal.js) <a href=\"https://slides.com?ref=github\"><img src=\"https://s3.amazonaws.com/static.slid.es/images/slides-github-banner-320x40.png?1\" alt=\"Slides\" width=\"160\" height=\"20\"></a>"},{"location":"bloomberg-2018/README.html#revealjs","text":"A framework for easily creating beautiful presentations using HTML. Check out the live demo . reveal.js comes with a broad range of features including nested slides , Markdown contents , PDF export , speaker notes and a JavaScript API . There's also a fully featured visual editor and platform for sharing reveal.js presentations at slides.com .","title":"reveal.js  "},{"location":"bloomberg-2018/README.html#table-of-contents","text":"Online Editor Instructions Markup Markdown Element Attributes Slide Attributes Configuration Presentation Size Dependencies Ready Event Auto-sliding Keyboard Bindings Touch Navigation Lazy Loading API Slide Changed Event Presentation State Slide States Slide Backgrounds Parallax Background Slide Transitions Internal links Fragments Fragment events Code syntax highlighting Slide number Overview mode Fullscreen mode Embedded media Stretching elements postMessage API PDF Export Theming Speaker Notes Share and Print Speaker Notes Server Side Speaker Notes Multiplexing Master presentation Client presentation Socket.io server MathJax Installation Basic setup Full setup Folder Structure License","title":"Table of contents"},{"location":"bloomberg-2018/README.html#more-reading","text":"Changelog : Up-to-date version history. Examples : Presentations created with reveal.js, add your own! Browser Support : Explanation of browser support and fallbacks. Plugins : A list of plugins that can be used to extend reveal.js.","title":"More reading"},{"location":"bloomberg-2018/README.html#online-editor","text":"Presentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at https://slides.com .","title":"Online Editor"},{"location":"bloomberg-2018/README.html#instructions","text":"","title":"Instructions"},{"location":"bloomberg-2018/README.html#markup","text":"Here's a barebones example of a fully working reveal.js presentation: html head link rel= stylesheet href= css/reveal.css link rel= stylesheet href= css/theme/white.css /head body div class= reveal div class= slides section Slide 1 /section section Slide 2 /section /div /div script src= js/reveal.js /script script Reveal.initialize(); /script /body /html The presentation markup hierarchy needs to be .reveal .slides section where the section represents one slide and can be repeated indefinitely. If you place multiple section elements inside of another section they will be shown as vertical slides. The first of the vertical slides is the \"root\" of the others (at the top), and will be included in the horizontal sequence. For example: div class= reveal div class= slides section Single Horizontal Slide /section section section Vertical Slide 1 /section section Vertical Slide 2 /section /section /div /div","title":"Markup"},{"location":"bloomberg-2018/README.html#markdown","text":"It's possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your section elements and wrap the contents in a textarea data-template like the example below. You'll also need to add the plugin/markdown/marked.js and plugin/markdown/markdown.js scripts (in that order) to your HTML file. This is based on data-markdown from Paul Irish modified to use marked to support GitHub Flavored Markdown . Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks). section data-markdown textarea data-template ## Page title A paragraph with some text and a [link](http://hakim.se). /textarea /section","title":"Markdown"},{"location":"bloomberg-2018/README.html#external-markdown","text":"You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file: the data-separator attribute defines a regular expression for horizontal slides (defaults to ^\\r?\\n---\\r?\\n$ , a newline-bounded horizontal rule) and data-separator-vertical defines vertical slides (disabled by default). The data-separator-notes attribute is a regular expression for specifying the beginning of the current slide's speaker notes (defaults to note: ). The data-charset attribute is optional and specifies which charset to use when loading the external file. When used locally, this feature requires that reveal.js runs from a local web server . The following example customises all available options: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: data-charset= iso-8859-15 !-- Note that Windows uses `\\r\\n` instead of `\\n` as its linefeed character. For a regex that supports all operating systems, use `\\r?\\n` instead of `\\n`. -- /section","title":"External Markdown"},{"location":"bloomberg-2018/README.html#element-attributes","text":"Special syntax (in html comment) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things. section data-markdown script type= text/template - Item 1 !-- .element: class= fragment data-fragment-index= 2 -- - Item 2 !-- .element: class= fragment data-fragment-index= 1 -- /script /section","title":"Element Attributes"},{"location":"bloomberg-2018/README.html#slide-attributes","text":"Special syntax (in html comment) is available for adding attributes to the slide section elements generated by your Markdown. section data-markdown script type= text/template !-- .slide: data-background= #ff0000 -- Markdown content /script /section","title":"Slide Attributes"},{"location":"bloomberg-2018/README.html#configuring-marked","text":"We use marked to parse Markdown. To customise marked's rendering, you can pass in options when configuring Reveal : Reveal.initialize({ // Options which are passed into marked // See https://github.com/chjj/marked#options-1 markdown: { smartypants: true } });","title":"Configuring marked"},{"location":"bloomberg-2018/README.html#configuration","text":"At the end of your page you need to initialize reveal by running the following code. Note that all config values are optional and will default as specified below. Reveal.initialize({ // Display presentation control arrows controls: true, // Help the user learn the controls by providing hints, for example by // bouncing the down arrow when they first encounter a vertical slide controlsTutorial: true, // Determines where controls appear, edges or bottom-right controlsLayout: 'bottom-right', // Visibility rule for backwards navigation arrows; faded , hidden // or visible controlsBackArrows: 'faded', // Display a presentation progress bar progress: true, // Set default timing of 2 minutes per slide defaultTiming: 120, // Display the page number of the current slide slideNumber: false, // Push each slide change to the browser history history: false, // Enable keyboard shortcuts for navigation keyboard: true, // Enable the slide overview mode overview: true, // Vertical centering of slides center: true, // Enables touch navigation on devices with touch input touch: true, // Loop the presentation loop: false, // Change the presentation direction to be RTL rtl: false, // Randomizes the order of slides each time the presentation loads shuffle: false, // Turns fragments on and off globally fragments: true, // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded: false, // Flags if we should show a help overlay when the questionmark // key is pressed help: true, // Flags if speaker notes should be visible to all viewers showNotes: false, // Global override for autoplaying embedded media (video/audio/iframe) // - null: Media will only autoplay if data-autoplay is present // - true: All media will autoplay, regardless of individual setting // - false: No media will autoplay, regardless of individual setting autoPlayMedia: null, // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide: 0, // Stop auto-sliding after user input autoSlideStoppable: true, // Use this method for navigation when auto-sliding autoSlideMethod: Reveal.navigateNext, // Enable slide navigation via mouse wheel mouseWheel: false, // Hides the address bar on mobile devices hideAddressBar: true, // Opens links in an iframe preview overlay // Add `data-preview-link` and `data-preview-link= false ` to customise each link // individually previewLinks: false, // Transition style transition: 'slide', // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed: 'default', // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition: 'fade', // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance: 3, // Parallax background image parallaxBackgroundImage: '', // e.g. 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg' // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: null, parallaxBackgroundVertical: null, // The display mode that will be used to show slides display: 'block' }); The configuration can be updated after initialization using the configure method: // Turn autoSlide off Reveal.configure({ autoSlide: 0 }); // Start auto-sliding every 5s Reveal.configure({ autoSlide: 5000 });","title":"Configuration"},{"location":"bloomberg-2018/README.html#presentation-size","text":"All presentations have a normal size, that is the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport. See below for a list of configuration options related to sizing, including default values: Reveal.initialize({ ... // The normal size of the presentation, aspect ratio will be preserved // when the presentation is scaled to fit different resolutions. Can be // specified using percentage units. width: 960, height: 700, // Factor of the display size that should remain empty around the content margin: 0.1, // Bounds for smallest/largest possible scale to apply to content minScale: 0.2, maxScale: 1.5 }); If you wish to disable this behavior and do your own scaling (e.g. using media queries), try these settings: Reveal.initialize({ ... width: 100% , height: 100% , margin: 0, minScale: 1, maxScale: 1 });","title":"Presentation Size"},{"location":"bloomberg-2018/README.html#dependencies","text":"Reveal.js doesn't rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example: Reveal.initialize({ dependencies: [ // Cross-browser shim that fully implements classList - https://github.com/eligrey/classList.js/ { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } }, // Interpret Markdown in section elements { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, // Syntax highlight for code elements { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, // Zoom in and out with Alt+click { src: 'plugin/zoom-js/zoom.js', async: true }, // Speaker notes { src: 'plugin/notes/notes.js', async: true }, // MathJax { src: 'plugin/math/math.js', async: true } ] }); You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src : Path to the script to load - async : [optional] Flags if the script should load after reveal.js has started, defaults to false - callback : [optional] Function to execute when the script has loaded - condition : [optional] Function which must return true for the script to be loaded To load these dependencies, reveal.js requires head.js (a script loading library) to be loaded before reveal.js.","title":"Dependencies"},{"location":"bloomberg-2018/README.html#ready-event","text":"A 'ready' event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call Reveal.isReady() . Reveal.addEventListener( 'ready', function( event ) { // event.currentSlide, event.indexh, event.indexv } ); Note that we also add a .ready class to the .reveal element so that you can hook into this with CSS.","title":"Ready Event"},{"location":"bloomberg-2018/README.html#auto-sliding","text":"Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides: // Slide every five seconds Reveal.configure({ autoSlide: 5000 }); When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing \u00bba\u00ab on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config. You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute: section data-autoslide= 2000 p After 2 seconds the first fragment will be shown. /p p class= fragment data-autoslide= 10000 After 10 seconds the next fragment will be shown. /p p class= fragment Now, the fragment is displayed for 2 seconds before the next slide is shown. /p /section To override the method used for navigation when auto-sliding, you can specify the autoSlideMethod setting. To only navigate along the top layer and ignore vertical slides, set this to Reveal.navigateRight . Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired.","title":"Auto-sliding"},{"location":"bloomberg-2018/README.html#keyboard-bindings","text":"If you're unhappy with any of the default keyboard bindings you can override them using the keyboard config option: Reveal.configure({ keyboard: { 13: 'next', // go to the next slide when the ENTER key is pressed 27: function() {}, // do something custom when ESC is pressed 32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding) } });","title":"Keyboard Bindings"},{"location":"bloomberg-2018/README.html#touch-navigation","text":"You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js. If there's some part of your content that needs to remain accessible to touch events you'll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled.","title":"Touch Navigation"},{"location":"bloomberg-2018/README.html#lazy-loading","text":"When working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option. To enable lazy loading all you need to do is change your \"src\" attributes to \"data-src\" as shown below. This is supported for image, video, audio and iframe elements. Lazy loaded iframes will also unload when the containing slide is no longer visible. section img data-src= image.png iframe data-src= http://hakim.se /iframe video source data-src= video.webm type= video/webm / source data-src= video.mp4 type= video/mp4 / /video /section","title":"Lazy Loading"},{"location":"bloomberg-2018/README.html#api","text":"The Reveal object exposes a JavaScript API for controlling navigation and reading state: // Navigation Reveal.slide( indexh, indexv, indexf ); Reveal.left(); Reveal.right(); Reveal.up(); Reveal.down(); Reveal.prev(); Reveal.next(); Reveal.prevFragment(); Reveal.nextFragment(); // Randomize the order of slides Reveal.shuffle(); // Toggle presentation states, optionally pass true/false to force on/off Reveal.toggleOverview(); Reveal.togglePause(); Reveal.toggleAutoSlide(); // Shows a help overlay with keyboard shortcuts, optionally pass true/false // to force on/off Reveal.toggleHelp(); // Change a config value at runtime Reveal.configure({ controls: true }); // Returns the present configuration options Reveal.getConfig(); // Fetch the current scale of the presentation Reveal.getScale(); // Retrieves the previous and current slide elements Reveal.getPreviousSlide(); Reveal.getCurrentSlide(); Reveal.getIndices(); // { h: 0, v: 0 } } Reveal.getPastSlideCount(); Reveal.getProgress(); // (0 == first slide, 1 == last slide) Reveal.getSlides(); // Array of all slides Reveal.getTotalSlides(); // total number of slides // Returns the speaker notes for the current slide Reveal.getSlideNotes(); // State checks Reveal.isFirstSlide(); Reveal.isLastSlide(); Reveal.isOverview(); Reveal.isPaused(); Reveal.isAutoSliding();","title":"API"},{"location":"bloomberg-2018/README.html#slide-changed-event","text":"A 'slidechanged' event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes. Some libraries, like MathJax (see #226 ), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'slidechanged', function( event ) { // event.previousSlide, event.currentSlide, event.indexh, event.indexv } );","title":"Slide Changed Event"},{"location":"bloomberg-2018/README.html#presentation-state","text":"The presentation's current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire. Reveal.slide( 1 ); // we're on slide 1 var state = Reveal.getState(); Reveal.slide( 3 ); // we're on slide 3 Reveal.setState( state ); // we're back on slide 1","title":"Presentation State"},{"location":"bloomberg-2018/README.html#slide-states","text":"If you set data-state=\"somestate\" on a slide section , \"somestate\" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide. Furthermore you can also listen to these changes in state via JavaScript: Reveal.addEventListener( 'somestate', function() { // TODO: Sprinkle magic }, false );","title":"Slide States"},{"location":"bloomberg-2018/README.html#slide-backgrounds","text":"Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your section elements. Four different types of backgrounds are supported: color, image, video and iframe.","title":"Slide Backgrounds"},{"location":"bloomberg-2018/README.html#color-backgrounds","text":"All CSS color formats are supported, like rgba() or hsl(). section data-background-color= #ff0000 h2 Color /h2 /section","title":"Color Backgrounds"},{"location":"bloomberg-2018/README.html#image-backgrounds","text":"By default, background images are resized to cover the full page. Available options: Attribute Default Description data-background-image URL of the image to show. GIFs restart when the slide opens. data-background-size cover See background-size on MDN. data-background-position center See background-position on MDN. data-background-repeat no-repeat See background-repeat on MDN. section data-background-image= http://example.com/image.png h2 Image /h2 /section section data-background-image= http://example.com/image.png data-background-size= 100px data-background-repeat= repeat h2 This background image will be sized to 100px and repeated /h2 /section","title":"Image Backgrounds"},{"location":"bloomberg-2018/README.html#video-backgrounds","text":"Automatically plays a full size video behind the slide. Attribute Default Description data-background-video A single video source, or a comma separated list of video sources. data-background-video-loop false Flags if the video should play repeatedly. data-background-video-muted false Flags if the audio should be muted. data-background-size cover Use cover for full screen and some cropping or contain for letterboxing. section data-background-video= https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm data-background-video-loop data-background-video-muted h2 Video /h2 /section","title":"Video Backgrounds"},{"location":"bloomberg-2018/README.html#iframe-backgrounds","text":"Embeds a web page as a slide background that covers 100% of the reveal.js width and height. The iframe is in the background layer, behind your slides, and as such it's not possible to interact with it by default. To make your background interactive, you can add the data-background-interactive attribute. section data-background-iframe= https://slides.com data-background-interactive h2 Iframe /h2 /section","title":"Iframe Backgrounds"},{"location":"bloomberg-2018/README.html#background-transitions","text":"Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition.","title":"Background Transitions"},{"location":"bloomberg-2018/README.html#parallax-background","text":"If you want to use a parallax scrolling background, set the first two config properties below when initializing reveal.js (the other two are optional). Reveal.initialize({ // Parallax background image parallaxBackgroundImage: '', // e.g. https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px - currently only pixels are supported (don't use % or auto) // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: 200, parallaxBackgroundVertical: 50 }); Make sure that the background size is much bigger than screen size to allow for some scrolling. View example .","title":"Parallax Background"},{"location":"bloomberg-2018/README.html#slide-transitions","text":"The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute: section data-transition= zoom h2 This slide will override the presentation transition and zoom! /h2 /section section data-transition-speed= fast h2 Choose from three transition speeds: default, fast or slow! /h2 /section You can also use different in and out transitions for the same slide: section data-transition= slide The train goes on \u2026 /section section data-transition= slide and on \u2026 /section section data-transition= slide-in fade-out and stops. /section section data-transition= fade-in slide-out (Passengers entering and leaving) /section section data-transition= slide And it starts again. /section","title":"Slide Transitions"},{"location":"bloomberg-2018/README.html#internal-links","text":"It's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute ( section id=\"some-slide\" ): a href= #/2/2 Link /a a href= #/some-slide Link /a You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it's a valid navigation route based on the current slide. a href= # class= navigate-left a href= # class= navigate-right a href= # class= navigate-up a href= # class= navigate-down a href= # class= navigate-prev !-- Previous vertical or horizontal slide -- a href= # class= navigate-next !-- Next vertical or horizontal slide --","title":"Internal links"},{"location":"bloomberg-2018/README.html#fragments","text":"Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here's an example: http://revealjs.com/#/fragments The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment: section p class= fragment grow grow /p p class= fragment shrink shrink /p p class= fragment fade-out fade-out /p p class= fragment fade-up fade-up (also down, left and right!) /p p class= fragment current-visible visible only once /p p class= fragment highlight-current-blue blue only once /p p class= fragment highlight-red highlight-red /p p class= fragment highlight-green highlight-green /p p class= fragment highlight-blue highlight-blue /p /section Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second. section span class= fragment fade-in span class= fragment fade-out I'll fade in, then out /span /span /section The display order of fragments can be controlled using the data-fragment-index attribute. section p class= fragment data-fragment-index= 3 Appears last /p p class= fragment data-fragment-index= 1 Appears first /p p class= fragment data-fragment-index= 2 Appears second /p /section","title":"Fragments"},{"location":"bloomberg-2018/README.html#fragment-events","text":"When a slide fragment is either shown or hidden reveal.js will dispatch an event. Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'fragmentshown', function( event ) { // event.fragment = the fragment DOM element } ); Reveal.addEventListener( 'fragmenthidden', function( event ) { // event.fragment = the fragment DOM element } );","title":"Fragment events"},{"location":"bloomberg-2018/README.html#code-syntax-highlighting","text":"By default, Reveal is configured with highlight.js for code syntax highlighting. To enable syntax highlighting, you'll have to load the highlight plugin ( plugin/highlight/highlight.js ) and a highlight.js CSS theme (Reveal comes packaged with the zenburn theme: lib/css/zenburn.css ). Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present, surrounding whitespace is automatically removed. HTML will be escaped by default. To avoid this, for example if you are using mark to call out a line of code, add the data-noescape attribute to the code element. section pre code data-trim data-noescape (def lazy-fib (concat [0 1] mark ((fn rfib [a b] /mark (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) /code /pre /section","title":"Code syntax highlighting"},{"location":"bloomberg-2018/README.html#slide-number","text":"If you would like to display the page number of the current slide you can do so using the slideNumber and showSlideNumber configuration values. // Shows the slide number using default formatting Reveal.configure({ slideNumber: true }); // Slide number formatting can be configured using these variables: // h.v : horizontal . vertical slide number (default) // h/v : horizontal / vertical slide number // c : flattened slide number // c/t : flattened slide number / total slides Reveal.configure({ slideNumber: 'c/t' }); // Control which views the slide number displays on using the showSlideNumber value: // all : show on all views (default) // speaker : only show slide numbers on speaker notes view // print : only show slide numbers when printing to PDF Reveal.configure({ showSlideNumber: 'speaker' });","title":"Slide number"},{"location":"bloomberg-2018/README.html#overview-mode","text":"Press \"Esc\" or \"o\" keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks: Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } ); Reveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal.toggleOverview();","title":"Overview mode"},{"location":"bloomberg-2018/README.html#fullscreen-mode","text":"Just press \u00bbF\u00ab on your keyboard to show your presentation in fullscreen mode. Press the \u00bbESC\u00ab key to exit fullscreen mode.","title":"Fullscreen mode"},{"location":"bloomberg-2018/README.html#embedded-media","text":"Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown: video data-autoplay src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video If you want to enable or disable autoplay globally, for all embedded media, you can use the autoPlayMedia configuration option. If you set this to true ALL media will autoplay regardless of individual data-autoplay attributes. If you initialize with autoPlayMedia: false NO media will autoplay. Note that embedded HTML5 video / audio and YouTube/Vimeo iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute.","title":"Embedded media"},{"location":"bloomberg-2018/README.html#embedded-iframes","text":"reveal.js automatically pushes two post messages to embedded iframes. slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden.","title":"Embedded iframes"},{"location":"bloomberg-2018/README.html#stretching-elements","text":"Sometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below: section h2 This video will use up the remaining space on the slide /h2 video class= stretch src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video /section Limitations: - Only direct descendants of a slide section can be stretched - Only one descendant per slide section can be stretched","title":"Stretching elements"},{"location":"bloomberg-2018/README.html#postmessage-api","text":"The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2: window .postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' ); When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window: window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); if( data.namespace === 'reveal' data.eventName ==='slidechanged' ) { // Slide changed, see data.state for slide number } } ); This cross-window messaging can be toggled on or off using configuration flags. Reveal.initialize({ ..., // Exposes the reveal.js API through window.postMessage postMessage: true, // Dispatches all reveal.js events to the parent window through postMessage postMessageEvents: false });","title":"postMessage API"},{"location":"bloomberg-2018/README.html#pdf-export","text":"Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium and to be serving the presentation from a webserver. Here's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300.","title":"PDF Export"},{"location":"bloomberg-2018/README.html#page-size","text":"Export dimensions are inferred from the configured presentation size . Slides that are too tall to fit within a single page will expand onto multiple pages. You can limit how many pages a slide may expand onto using the pdfMaxPagesPerSlide config option, for example Reveal.configure({ pdfMaxPagesPerSlide: 1 }) ensures that no slide ever grows to more than one printed page.","title":"Page size"},{"location":"bloomberg-2018/README.html#print-stylesheet","text":"To enable the PDF print capability in your presentation, the special print stylesheet at /css/print/pdf.css must be loaded. The default index.html file handles this for you when print-pdf is included in the query string. If you're using a different HTML template, you can add this to your HEAD: script var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); /script","title":"Print stylesheet"},{"location":"bloomberg-2018/README.html#instructions_1","text":"Open your presentation with print-pdf included in the query string i.e. http://localhost:8000/?print-pdf. You can test this with revealjs.com?print-pdf . If you want to include speaker notes in your export, you can append showNotes=true to the query string: http://localhost:8000/?print-pdf showNotes=true Open the in-browser print dialog (CTRL/CMD+P). Change the Destination setting to Save as PDF . Change the Layout to Landscape . Change the Margins to None . Enable the Background graphics option. Click Save . Alternatively you can use the decktape project.","title":"Instructions"},{"location":"bloomberg-2018/README.html#theming","text":"The framework comes with a few different themes included: black: Black background, white text, blue links (default theme) white: White background, black text, blue links league: Gray background, white text, blue links (default theme for reveal.js 3.0.0) beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html: link rel= stylesheet href= css/theme/black.css id= theme If you want to add a theme of your own see the instructions here: /css/theme/README.md .","title":"Theming"},{"location":"bloomberg-2018/README.html#speaker-notes","text":"reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the 's' key on your keyboard to open the notes window. A speaker timer starts as soon as the speaker view is opened. You can reset it to 00:00:00 at any time by simply clicking/tapping on it. Notes are defined by appending an aside element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown. Alternatively you can add your notes in a data-notes attribute on the slide. Like section data-notes=\"Something important\" /section . When used locally, this feature requires that reveal.js runs from a local web server . section h2 Some Slide /h2 aside class= notes Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit 's' on your keyboard). /aside /section If you're using the external Markdown plugin, you can add notes with the help of a special delimiter: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: /section # Title ## Sub-title Here is some content... Note: This will only display in the notes window.","title":"Speaker Notes"},{"location":"bloomberg-2018/README.html#share-and-print-speaker-notes","text":"Notes are only visible to the speaker inside of the speaker view. If you wish to share your notes with others you can initialize reveal.js with the showNotes config value set to true . Notes will appear along the bottom of the presentations. When showNotes is enabled notes are also included when you export to PDF . By default, notes are printed in a semi-transparent box on top of the slide. If you'd rather print them on a separate page after the slide, set showNotes: \"separate-page\" .","title":"Share and Print Speaker Notes"},{"location":"bloomberg-2018/README.html#speaker-notes-clock-and-timers","text":"The speaker notes window will also show: Time elapsed since the beginning of the presentation. If you hover the mouse above this section, a timer reset button will appear. Current wall-clock time (Optionally) a pacing timer which indicates whether the current pace of the presentation is on track for the right timing (shown in green), and if not, whether the presenter should speed up (shown in red) or has the luxury of slowing down (blue). The pacing timer can be enabled by configuring by the defaultTiming parameter in the Reveal configuration block, which specifies the number of seconds per slide. 120 can be a reasonable rule of thumb. Timings can also be given per slide section by setting the data-timing attribute. Both values are in numbers of seconds.","title":"Speaker notes clock and timers"},{"location":"bloomberg-2018/README.html#server-side-speaker-notes","text":"In some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies: Reveal.initialize({ ... dependencies: [ { src: 'socket.io/socket.io.js', async: true }, { src: 'plugin/notes-server/client.js', async: true } ] }); Then: Install Node.js (4.0.0 or later) Run npm install Run node plugin/notes-server","title":"Server Side Speaker Notes"},{"location":"bloomberg-2018/README.html#multiplexing","text":"The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . The multiplex plugin needs the following 3 things to operate: Master presentation that has control Client presentations that follow the master Socket.io server to broadcast events from the master to the clients More details:","title":"Multiplexing"},{"location":"bloomberg-2018/README.html#master-presentation","text":"Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation: npm install node-static static If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server. You can then access your master presentation at http://localhost:1947 Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, // and if you want speaker notes { src: 'plugin/notes-server/client.js', async: true } // other dependencies... ] });","title":"Master presentation"},{"location":"bloomberg-2018/README.html#client-presentation","text":"Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via http://example.com/path/to/presentation/client/index.html , with the configuration below causing them to connect to the socket.io server as clients. Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] });","title":"Client presentation"},{"location":"bloomberg-2018/README.html#socketio-server","text":"Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands: npm install node plugin/multiplex Or you can use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . You'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit http://example.com/token , where http://example.com is the location of your socket.io server. Or if you're going to use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , visit https://reveal-js-multiplex-ccjbegmaii.now.sh/token . You are very welcome to point your presentations at the Socket.io server running at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. The easiest way to do this is by installing now . With that installed, deploying your own Multiplex server is as easy running the following command from the reveal.js folder: now plugin/multiplex .","title":"Socket.io server"},{"location":"bloomberg-2018/README.html#socketio-server-as-file-static-server","text":"The socket.io server can play the role of static file server for your client presentation, as in the example at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match.) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] });","title":"socket.io server as file static server"},{"location":"bloomberg-2018/README.html#mathjax","text":"If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you'll need to include it as a reveal.js dependency, find our more about dependencies here . The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the mathjax configuration value. Below is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the math config object at all. Reveal.initialize({ // other options ... math: { mathjax: 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js', config: 'TeX-AMS_HTML-full' // See http://docs.mathjax.org/en/latest/config-files.html }, dependencies: [ { src: 'plugin/math/math.js', async: true } ] }); Read MathJax's documentation if you need HTTPS delivery or serving of specific versions for stability.","title":"MathJax"},{"location":"bloomberg-2018/README.html#installation","text":"The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source.","title":"Installation"},{"location":"bloomberg-2018/README.html#basic-setup","text":"The core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser. Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases Unzip and replace the example contents in index.html with your own Open index.html in a browser to view it","title":"Basic setup"},{"location":"bloomberg-2018/README.html#full-setup","text":"Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code. Install Node.js (4.0.0 or later) Clone the reveal.js repository sh $ git clone https://github.com/hakimel/reveal.js.git Navigate to the reveal.js folder sh $ cd reveal.js Install dependencies sh $ npm install Serve the presentation and monitor source files for changes sh $ npm start Open http://localhost:8000 to view your presentation You can change the port by using npm start -- --port=8001 .","title":"Full setup"},{"location":"bloomberg-2018/README.html#folder-structure","text":"css/ Core styles without which the project does not function js/ Like above but for JavaScript plugin/ Components that have been developed as extensions to reveal.js lib/ All other third party assets (JavaScript, CSS, fonts)","title":"Folder Structure"},{"location":"bloomberg-2018/README.html#license","text":"MIT licensed Copyright (C) 2017 Hakim El Hattab, http://hakim.se","title":"License"},{"location":"bloomberg-2018/CONTRIBUTING.html","text":"Contributing Please keep the issue tracker limited to bug reports , feature requests and pull requests . Personal Support If you have personal support or setup questions the best place to ask those are StackOverflow . Bug Reports When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested. Pull Requests Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master) Plugins Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"CONTRIBUTING"},{"location":"bloomberg-2018/CONTRIBUTING.html#contributing","text":"Please keep the issue tracker limited to bug reports , feature requests and pull requests .","title":"Contributing"},{"location":"bloomberg-2018/CONTRIBUTING.html#personal-support","text":"If you have personal support or setup questions the best place to ask those are StackOverflow .","title":"Personal Support"},{"location":"bloomberg-2018/CONTRIBUTING.html#bug-reports","text":"When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested.","title":"Bug Reports"},{"location":"bloomberg-2018/CONTRIBUTING.html#pull-requests","text":"Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master)","title":"Pull Requests"},{"location":"bloomberg-2018/CONTRIBUTING.html#plugins","text":"Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"Plugins"},{"location":"bloomberg-2018/css/theme/README.html","text":"Dependencies Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceeding: https://github.com/hakimel/reveal.js#full-setup Creating a Theme To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run npm run build -- css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Home"},{"location":"bloomberg-2018/css/theme/README.html#dependencies","text":"Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceeding: https://github.com/hakimel/reveal.js#full-setup","title":"Dependencies"},{"location":"bloomberg-2018/css/theme/README.html#creating-a-theme","text":"To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run npm run build -- css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Creating a Theme"},{"location":"bloomberg-2018/plugin/markdown/example.html","text":"Markdown Demo External 1.1 Content 1.1 Note: This will only appear in the speaker notes window. External 1.2 Content 1.2 External 2 Content 2.1 External 3.1 Content 3.1 External 3.2 Content 3.2 External 3.3","title":"Markdown Demo"},{"location":"bloomberg-2018/plugin/markdown/example.html#markdown-demo","text":"","title":"Markdown Demo"},{"location":"bloomberg-2018/plugin/markdown/example.html#external-11","text":"Content 1.1 Note: This will only appear in the speaker notes window.","title":"External 1.1"},{"location":"bloomberg-2018/plugin/markdown/example.html#external-12","text":"Content 1.2","title":"External 1.2"},{"location":"bloomberg-2018/plugin/markdown/example.html#external-2","text":"Content 2.1","title":"External 2"},{"location":"bloomberg-2018/plugin/markdown/example.html#external-31","text":"Content 3.1","title":"External 3.1"},{"location":"bloomberg-2018/plugin/markdown/example.html#external-32","text":"Content 3.2","title":"External 3.2"},{"location":"bloomberg-2018/plugin/markdown/example.html#external-33","text":"","title":"External 3.3"},{"location":"bloomberg-2018/test/simple.html","text":"Slide 1.1 var a = 1; Slide 1.2 Slide 2","title":"Simple"},{"location":"bloomberg-2018/test/simple.html#slide-11","text":"var a = 1;","title":"Slide 1.1"},{"location":"bloomberg-2018/test/simple.html#slide-12","text":"","title":"Slide 1.2"},{"location":"bloomberg-2018/test/simple.html#slide-2","text":"","title":"Slide 2"},{"location":"concepts-driven-design-with-di/README.html","text":"reveal.js A framework for easily creating beautiful presentations using HTML. Check out the live demo . reveal.js comes with a broad range of features including nested slides , Markdown contents , PDF export , speaker notes and a JavaScript API . It's best viewed in a modern browser but fallbacks are available to make sure your presentation can still be viewed elsewhere. More reading: Installation : Step-by-step instructions for getting reveal.js running on your computer. Changelog : Up-to-date version history. Examples : Presentations created with reveal.js, add your own! Browser Support : Explanation of browser support and fallbacks. Plugins : A list of plugins that can be used to extend reveal.js. Online Editor Presentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at http://slides.com . Instructions Markup Markup hierarchy needs to be div class=\"reveal\" div class=\"slides\" section where the section represents one slide and can be repeated indefinitely. If you place multiple section 's inside of another section they will be shown as vertical slides. The first of the vertical slides is the \"root\" of the others (at the top), and it will be included in the horizontal sequence. For example: div class= reveal div class= slides section Single Horizontal Slide /section section section Vertical Slide 1 /section section Vertical Slide 2 /section /section /div /div Markdown It's possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your section elements and wrap the contents in a script type=\"text/template\" like the example below. This is based on data-markdown from Paul Irish modified to use marked to support Github Flavoured Markdown . Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks). section data-markdown script type= text/template ## Page title A paragraph with some text and a [link](http://hakim.se). /script /section External Markdown You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file. The data-charset attribute is optional and specifies which charset to use when loading the external file. When used locally, this feature requires that reveal.js runs from a local web server . section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: data-charset= iso-8859-15 /section Element Attributes Special syntax (in html comment) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things. section data-markdown script type= text/template - Item 1 !-- .element: class= fragment data-fragment-index= 2 -- - Item 2 !-- .element: class= fragment data-fragment-index= 1 -- /script /section Slide Attributes Special syntax (in html comment) is available for adding attributes to the slide section elements generated by your Markdown. section data-markdown script type= text/template !-- .slide: data-background= #ff0000 -- Markdown content /script /section Configuration At the end of your page you need to initialize reveal by running the following code. Note that all config values are optional and will default as specified below. Reveal.initialize({ // Display controls in the bottom right corner controls: true, // Display a presentation progress bar progress: true, // Display the page number of the current slide slideNumber: false, // Push each slide change to the browser history history: false, // Enable keyboard shortcuts for navigation keyboard: true, // Enable the slide overview mode overview: true, // Vertical centering of slides center: true, // Enables touch navigation on devices with touch input touch: true, // Loop the presentation loop: false, // Change the presentation direction to be RTL rtl: false, // Turns fragments on and off globally fragments: true, // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded: false, // Flags if we should show a help overlay when the questionmark // key is pressed help: true, // Flags if speaker notes should be visible to all viewers showNotes: false, // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide: 0, // Stop auto-sliding after user input autoSlideStoppable: true, // Enable slide navigation via mouse wheel mouseWheel: false, // Hides the address bar on mobile devices hideAddressBar: true, // Opens links in an iframe preview overlay previewLinks: false, // Transition style transition: 'default', // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed: 'default', // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition: 'default', // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance: 3, // Parallax background image parallaxBackgroundImage: '', // e.g. 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg' // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px // Amount to move parallax background (horizontal and vertical) on slide change // Number, e.g. 100 parallaxBackgroundHorizontal: '', parallaxBackgroundVertical: '' }); The configuration can be updated after initialization using the configure method: // Turn autoSlide off Reveal.configure({ autoSlide: 0 }); // Start auto-sliding every 5s Reveal.configure({ autoSlide: 5000 }); Presentation Size All presentations have a normal size, that is the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport. See below for a list of configuration options related to sizing, including default values: Reveal.initialize({ ... // The normal size of the presentation, aspect ratio will be preserved // when the presentation is scaled to fit different resolutions. Can be // specified using percentage units. width: 960, height: 700, // Factor of the display size that should remain empty around the content margin: 0.1, // Bounds for smallest/largest possible scale to apply to content minScale: 0.2, maxScale: 1.5 }); Dependencies Reveal.js doesn't rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example: Reveal.initialize({ dependencies: [ // Cross-browser shim that fully implements classList - https://github.com/eligrey/classList.js/ { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } }, // Interpret Markdown in section elements { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, // Syntax highlight for code elements { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, // Zoom in and out with Alt+click { src: 'plugin/zoom-js/zoom.js', async: true }, // Speaker notes { src: 'plugin/notes/notes.js', async: true }, // MathJax { src: 'plugin/math/math.js', async: true } ] }); You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src : Path to the script to load - async : [optional] Flags if the script should load after reveal.js has started, defaults to false - callback : [optional] Function to execute when the script has loaded - condition : [optional] Function which must return true for the script to be loaded Ready Event A 'ready' event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call Reveal.isReady() . Reveal.addEventListener( 'ready', function( event ) { // event.currentSlide, event.indexh, event.indexv } ); Auto-sliding Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides: // Slide every five seconds Reveal.configure({ autoSlide: 5000 }); When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing \u00bba\u00ab on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config. You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute: section data-autoslide= 2000 p After 2 seconds the first fragment will be shown. /p p class= fragment data-autoslide= 10000 After 10 seconds the next fragment will be shown. /p p class= fragment Now, the fragment is displayed for 2 seconds before the next slide is shown. /p /section Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired. Keyboard Bindings If you're unhappy with any of the default keyboard bindings you can override them using the keyboard config option: Reveal.configure({ keyboard: { 13: 'next', // go to the next slide when the ENTER key is pressed 27: function() {}, // do something custom when ESC is pressed 32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding) } }); Touch Navigation You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js. If there's some part of your content that needs to remain accessible to touch events you'll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled. Lazy Loading When working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option. To enable lazy loading all you need to do is change your \"src\" attributes to \"data-src\" as shown below. This is supported for image, video, audio and iframe elements. Lazy loaded iframes will also unload when the containing slide is no longer visible. section img data-src= image.png iframe data-src= http://hakim.se /iframe video source data-src= video.webm type= video/webm / source data-src= video.mp4 type= video/mp4 / /video /section API The Reveal object exposes a JavaScript API for controlling navigation and reading state: // Navigation Reveal.slide( indexh, indexv, indexf ); Reveal.left(); Reveal.right(); Reveal.up(); Reveal.down(); Reveal.prev(); Reveal.next(); Reveal.prevFragment(); Reveal.nextFragment(); // Toggle presentation states, optionally pass true/false to force on/off Reveal.toggleOverview(); Reveal.togglePause(); Reveal.toggleAutoSlide(); // Change a config value at runtime Reveal.configure({ controls: true }); // Returns the present configuration options Reveal.getConfig(); // Fetch the current scale of the presentation Reveal.getScale(); // Retrieves the previous and current slide elements Reveal.getPreviousSlide(); Reveal.getCurrentSlide(); Reveal.getIndices(); // { h: 0, v: 0 } } Reveal.getProgress(); // 0-1 Reveal.getTotalSlides(); // Returns the speaker notes for the current slide Reveal.getSlideNotes(); // State checks Reveal.isFirstSlide(); Reveal.isLastSlide(); Reveal.isOverview(); Reveal.isPaused(); Reveal.isAutoSliding(); Slide Changed Event A 'slidechanged' event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes. Some libraries, like MathJax (see #226 ), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'slidechanged', function( event ) { // event.previousSlide, event.currentSlide, event.indexh, event.indexv } ); Presentation State The presentation's current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire. Reveal.slide( 1 ); // we're on slide 1 var state = Reveal.getState(); Reveal.slide( 3 ); // we're on slide 3 Reveal.setState( state ); // we're back on slide 1 Slide States If you set data-state=\"somestate\" on a slide section , \"somestate\" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide. Furthermore you can also listen to these changes in state via JavaScript: Reveal.addEventListener( 'somestate', function() { // TODO: Sprinkle magic }, false ); Slide Backgrounds Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your section elements. Four different types of backgrounds are supported: color, image, video and iframe. Below are a few examples. section data-background= #ff0000 h2 All CSS color formats are supported, like rgba() or hsl(). /h2 /section section data-background= http://example.com/image.png h2 This slide will have a full-size background image. /h2 /section section data-background= http://example.com/image.png data-background-size= 100px data-background-repeat= repeat h2 This background image will be sized to 100px and repeated. /h2 /section section data-background-video= https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm data-background-video-loop h2 Video. Multiple sources can be defined using a comma separated list. Video will loop when the data-background-video-loop attribute is provided. /h2 /section section data-background-iframe= https://slides.com h2 Embeds a web page as a background. Note that the page won't be interactive. /h2 /section Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition. Parallax Background If you want to use a parallax scrolling background, set the first two config properties below when initializing reveal.js (the other two are optional). Reveal.initialize({ // Parallax background image parallaxBackgroundImage: '', // e.g. https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px - currently only pixels are supported (don't use % or auto) // Amount of pixels to move the parallax background per slide step, // a value of 0 disables movement along the given axis // These are optional, if they aren't specified they'll be calculated automatically parallaxBackgroundHorizontal: 200, parallaxBackgroundVertical: 50 }); Make sure that the background size is much bigger than screen size to allow for some scrolling. View example . Slide Transitions The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute: section data-transition= zoom h2 This slide will override the presentation transition and zoom! /h2 /section section data-transition-speed= fast h2 Choose from three transition speeds: default, fast or slow! /h2 /section You can also use different in and out transitions for the same slide: section data-transition= slide The train goes on \u2026 /section section data-transition= slide and on \u2026 /section section data-transition= slide-in fade-out and stops. /section section data-transition= fade-in slide-out (Passengers entering and leaving) /section section data-transition= slide And it starts again. /section Internal links It's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute ( section id=\"some-slide\" ): a href= #/2/2 Link /a a href= #/some-slide Link /a You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it's a valid navigation route based on the current slide. a href= # class= navigate-left a href= # class= navigate-right a href= # class= navigate-up a href= # class= navigate-down a href= # class= navigate-prev !-- Previous vertical or horizontal slide -- a href= # class= navigate-next !-- Next vertical or horizontal slide -- Fragments Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here's an example: http://lab.hakim.se/reveal-js/#/fragments The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment: section p class= fragment grow grow /p p class= fragment shrink shrink /p p class= fragment fade-out fade-out /p p class= fragment current-visible visible only once /p p class= fragment highlight-current-blue blue only once /p p class= fragment highlight-red highlight-red /p p class= fragment highlight-green highlight-green /p p class= fragment highlight-blue highlight-blue /p /section Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second. section span class= fragment fade-in span class= fragment fade-out I'll fade in, then out /span /span /section The display order of fragments can be controlled using the data-fragment-index attribute. section p class= fragment data-fragment-index= 3 Appears last /p p class= fragment data-fragment-index= 1 Appears first /p p class= fragment data-fragment-index= 2 Appears second /p /section Fragment events When a slide fragment is either shown or hidden reveal.js will dispatch an event. Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'fragmentshown', function( event ) { // event.fragment = the fragment DOM element } ); Reveal.addEventListener( 'fragmenthidden', function( event ) { // event.fragment = the fragment DOM element } ); Code syntax highlighting By default, Reveal is configured with highlight.js for code syntax highlighting. Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present surrounding whitespace is automatically removed. section pre code data-trim (def lazy-fib (concat [0 1] ((fn rfib [a b] (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) /code /pre /section Slide number If you would like to display the page number of the current slide you can do so using the slideNumber configuration value. // Shows the slide number using default formatting Reveal.configure({ slideNumber: true }); // Slide number formatting can be configured using these variables: // h.v : horizontal . vertical slide number (default) // h/v : horizontal / vertical slide number // c : flattened slide number // c/t : flattened slide number / total slides Reveal.configure({ slideNumber: 'c/t' }); Overview mode Press \"Esc\" or \"o\" keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks: Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } ); Reveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal.toggleOverview(); Fullscreen mode Just press \u00bbF\u00ab on your keyboard to show your presentation in fullscreen mode. Press the \u00bbESC\u00ab key to exit fullscreen mode. Embedded media Embedded HTML5 video / audio and YouTube iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute. Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown: video data-autoplay src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video Additionally the framework automatically pushes two post messages to all iframes, slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden. Stretching elements Sometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below: section h2 This video will use up the remaining space on the slide /h2 video class= stretch src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video /section Limitations: - Only direct descendants of a slide section can be stretched - Only one descendant per slide section can be stretched postMessage API The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2: window .postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' ); When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window: window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); if( data.namespace === 'reveal' data.eventName ==='slidechanged' ) { // Slide changed, see data.state for slide number } } ); This cross-window messaging can be toggled on or off using configuration flags. Reveal.initialize({ ..., // Exposes the reveal.js API through window.postMessage postMessage: true, // Dispatches all reveal.js events to the parent window through postMessage postMessageEvents: false }); PDF Export Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium . Here's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300. Open your presentation with print-pdf included anywhere in the query string. This triggers the default index HTML to load the PDF print stylesheet ( css/print/pdf.css ). You can test this with lab.hakim.se/reveal-js?print-pdf . Open the in-browser print dialog (CMD+P). Change the Destination setting to Save as PDF . Change the Layout to Landscape . Change the Margins to None . Click Save . Alternatively you can use the decktape project. Theming The framework comes with a few different themes included: black: Black background, white text, blue links (default theme) white: White background, black text, blue links league: Gray background, white text, blue links (default theme for reveal.js 3.0.0) beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html: link rel= stylesheet href= css/theme/black.css id= theme If you want to add a theme of your own see the instructions here: /css/theme/README.md . Speaker Notes reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the 's' key on your keyboard to open the notes window. Notes are defined by appending an aside element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown. Alternatively you can add your notes in a data-notes attribute on the slide. Like section data-notes=\"Something important\" /section . When used locally, this feature requires that reveal.js runs from a local web server . section h2 Some Slide /h2 aside class= notes Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit 's' on your keyboard). /aside /section Notes are only visible to you in the speaker view. If you wish to share your notes with the audience initialize reveal.js with the showNotes config value set to true . If you're using the external Markdown plugin, you can add notes with the help of a special delimiter: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: /section # Title ## Sub-title Here is some content... Note: This will only display in the notes window. Server Side Speaker Notes In some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies: Reveal.initialize({ ... dependencies: [ { src: 'socket.io/socket.io.js', async: true }, { src: 'plugin/notes-server/client.js', async: true } ] }); Then: Install Node.js Run npm install Run node plugin/notes-server Multiplexing The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at http://revealjs-51546.onmodulus.net/ . The multiplex plugin needs the following 3 things to operate: Master presentation that has control Client presentations that follow the master Socket.io server to broadcast events from the master to the clients More details: Master presentation Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation: npm install node-static static If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server. You can then access your master presentation at http://localhost:1947 Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'revealjs-51546.onmodulus.net:80' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, // and if you want speaker notes { src: 'plugin/notes-server/client.js', async: true } // other dependencies... ] }); Client presentation Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via http://example.com/path/to/presentation/client/index.html , with the configuration below causing them to connect to the socket.io server as clients. Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'revealjs-51546.onmodulus.net:80' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] }); Socket.io server Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands: npm install node plugin/multiplex Or you use the socket.io server at http://revealjs-51546.onmodulus.net/ . You'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit http://example.com/token , where http://example.com is the location of your socket.io server. Or if you're going to use the socket.io server at http://revealjs-51546.onmodulus.net/ , visit http://revealjs-51546.onmodulus.net/token . You are very welcome to point your presentations at the Socket.io server running at http://revealjs-51546.onmodulus.net/ , but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. It is simple to deploy to nodejitsu, heroku, your own environment, etc. socket.io server as file static server The socket.io server can play the role of static file server for your client presentation, as in the example at http://revealjs-51546.onmodulus.net/ . (Open http://revealjs-51546.onmodulus.net/ in two browsers. Navigate through the slides on one, and the other will update to match.) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open http://revealjs-51546.onmodulus.net/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] }); MathJax If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you'll need to include it as a reveal.js dependency, find our more about dependencies here . The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the mathjax configuration value. Below is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the math config object at all. Reveal.initialize({ // other options ... math: { mathjax: 'https://cdn.mathjax.org/mathjax/latest/MathJax.js', config: 'TeX-AMS_HTML-full' // See http://docs.mathjax.org/en/latest/config-files.html }, dependencies: [ { src: 'plugin/math/math.js', async: true } ] }); Read MathJax's documentation if you need HTTPS delivery or serving of specific versions for stability. Installation The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source. Basic setup The core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser. Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases Unzip and replace the example contents in index.html with your own Open index.html in a browser to view it Full setup Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code. Install Node.js Install Grunt Clone the reveal.js repository sh $ git clone https://github.com/hakimel/reveal.js.git Navigate to the reveal.js folder sh $ cd reveal.js Install dependencies sh $ npm install Serve the presentation and monitor source files for changes sh $ grunt serve Open http://localhost:8000 to view your presentation You can change the port by using grunt serve --port 8001 . Folder Structure css/ Core styles without which the project does not function js/ Like above but for JavaScript plugin/ Components that have been developed as extensions to reveal.js lib/ All other third party assets (JavaScript, CSS, fonts) License MIT licensed Copyright (C) 2015 Hakim El Hattab, http://hakim.se","title":"reveal.js [![Build Status](https://travis-ci.org/hakimel/reveal.js.svg?branch=master)](https://travis-ci.org/hakimel/reveal.js)"},{"location":"concepts-driven-design-with-di/README.html#revealjs","text":"A framework for easily creating beautiful presentations using HTML. Check out the live demo . reveal.js comes with a broad range of features including nested slides , Markdown contents , PDF export , speaker notes and a JavaScript API . It's best viewed in a modern browser but fallbacks are available to make sure your presentation can still be viewed elsewhere.","title":"reveal.js"},{"location":"concepts-driven-design-with-di/README.html#more-reading","text":"Installation : Step-by-step instructions for getting reveal.js running on your computer. Changelog : Up-to-date version history. Examples : Presentations created with reveal.js, add your own! Browser Support : Explanation of browser support and fallbacks. Plugins : A list of plugins that can be used to extend reveal.js.","title":"More reading:"},{"location":"concepts-driven-design-with-di/README.html#online-editor","text":"Presentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at http://slides.com .","title":"Online Editor"},{"location":"concepts-driven-design-with-di/README.html#instructions","text":"","title":"Instructions"},{"location":"concepts-driven-design-with-di/README.html#markup","text":"Markup hierarchy needs to be div class=\"reveal\" div class=\"slides\" section where the section represents one slide and can be repeated indefinitely. If you place multiple section 's inside of another section they will be shown as vertical slides. The first of the vertical slides is the \"root\" of the others (at the top), and it will be included in the horizontal sequence. For example: div class= reveal div class= slides section Single Horizontal Slide /section section section Vertical Slide 1 /section section Vertical Slide 2 /section /section /div /div","title":"Markup"},{"location":"concepts-driven-design-with-di/README.html#markdown","text":"It's possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your section elements and wrap the contents in a script type=\"text/template\" like the example below. This is based on data-markdown from Paul Irish modified to use marked to support Github Flavoured Markdown . Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks). section data-markdown script type= text/template ## Page title A paragraph with some text and a [link](http://hakim.se). /script /section","title":"Markdown"},{"location":"concepts-driven-design-with-di/README.html#external-markdown","text":"You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file. The data-charset attribute is optional and specifies which charset to use when loading the external file. When used locally, this feature requires that reveal.js runs from a local web server . section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: data-charset= iso-8859-15 /section","title":"External Markdown"},{"location":"concepts-driven-design-with-di/README.html#element-attributes","text":"Special syntax (in html comment) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things. section data-markdown script type= text/template - Item 1 !-- .element: class= fragment data-fragment-index= 2 -- - Item 2 !-- .element: class= fragment data-fragment-index= 1 -- /script /section","title":"Element Attributes"},{"location":"concepts-driven-design-with-di/README.html#slide-attributes","text":"Special syntax (in html comment) is available for adding attributes to the slide section elements generated by your Markdown. section data-markdown script type= text/template !-- .slide: data-background= #ff0000 -- Markdown content /script /section","title":"Slide Attributes"},{"location":"concepts-driven-design-with-di/README.html#configuration","text":"At the end of your page you need to initialize reveal by running the following code. Note that all config values are optional and will default as specified below. Reveal.initialize({ // Display controls in the bottom right corner controls: true, // Display a presentation progress bar progress: true, // Display the page number of the current slide slideNumber: false, // Push each slide change to the browser history history: false, // Enable keyboard shortcuts for navigation keyboard: true, // Enable the slide overview mode overview: true, // Vertical centering of slides center: true, // Enables touch navigation on devices with touch input touch: true, // Loop the presentation loop: false, // Change the presentation direction to be RTL rtl: false, // Turns fragments on and off globally fragments: true, // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded: false, // Flags if we should show a help overlay when the questionmark // key is pressed help: true, // Flags if speaker notes should be visible to all viewers showNotes: false, // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide: 0, // Stop auto-sliding after user input autoSlideStoppable: true, // Enable slide navigation via mouse wheel mouseWheel: false, // Hides the address bar on mobile devices hideAddressBar: true, // Opens links in an iframe preview overlay previewLinks: false, // Transition style transition: 'default', // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed: 'default', // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition: 'default', // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance: 3, // Parallax background image parallaxBackgroundImage: '', // e.g. 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg' // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px // Amount to move parallax background (horizontal and vertical) on slide change // Number, e.g. 100 parallaxBackgroundHorizontal: '', parallaxBackgroundVertical: '' }); The configuration can be updated after initialization using the configure method: // Turn autoSlide off Reveal.configure({ autoSlide: 0 }); // Start auto-sliding every 5s Reveal.configure({ autoSlide: 5000 });","title":"Configuration"},{"location":"concepts-driven-design-with-di/README.html#presentation-size","text":"All presentations have a normal size, that is the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport. See below for a list of configuration options related to sizing, including default values: Reveal.initialize({ ... // The normal size of the presentation, aspect ratio will be preserved // when the presentation is scaled to fit different resolutions. Can be // specified using percentage units. width: 960, height: 700, // Factor of the display size that should remain empty around the content margin: 0.1, // Bounds for smallest/largest possible scale to apply to content minScale: 0.2, maxScale: 1.5 });","title":"Presentation Size"},{"location":"concepts-driven-design-with-di/README.html#dependencies","text":"Reveal.js doesn't rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example: Reveal.initialize({ dependencies: [ // Cross-browser shim that fully implements classList - https://github.com/eligrey/classList.js/ { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } }, // Interpret Markdown in section elements { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, // Syntax highlight for code elements { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, // Zoom in and out with Alt+click { src: 'plugin/zoom-js/zoom.js', async: true }, // Speaker notes { src: 'plugin/notes/notes.js', async: true }, // MathJax { src: 'plugin/math/math.js', async: true } ] }); You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src : Path to the script to load - async : [optional] Flags if the script should load after reveal.js has started, defaults to false - callback : [optional] Function to execute when the script has loaded - condition : [optional] Function which must return true for the script to be loaded","title":"Dependencies"},{"location":"concepts-driven-design-with-di/README.html#ready-event","text":"A 'ready' event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call Reveal.isReady() . Reveal.addEventListener( 'ready', function( event ) { // event.currentSlide, event.indexh, event.indexv } );","title":"Ready Event"},{"location":"concepts-driven-design-with-di/README.html#auto-sliding","text":"Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides: // Slide every five seconds Reveal.configure({ autoSlide: 5000 }); When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing \u00bba\u00ab on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config. You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute: section data-autoslide= 2000 p After 2 seconds the first fragment will be shown. /p p class= fragment data-autoslide= 10000 After 10 seconds the next fragment will be shown. /p p class= fragment Now, the fragment is displayed for 2 seconds before the next slide is shown. /p /section Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired.","title":"Auto-sliding"},{"location":"concepts-driven-design-with-di/README.html#keyboard-bindings","text":"If you're unhappy with any of the default keyboard bindings you can override them using the keyboard config option: Reveal.configure({ keyboard: { 13: 'next', // go to the next slide when the ENTER key is pressed 27: function() {}, // do something custom when ESC is pressed 32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding) } });","title":"Keyboard Bindings"},{"location":"concepts-driven-design-with-di/README.html#touch-navigation","text":"You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js. If there's some part of your content that needs to remain accessible to touch events you'll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled.","title":"Touch Navigation"},{"location":"concepts-driven-design-with-di/README.html#lazy-loading","text":"When working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option. To enable lazy loading all you need to do is change your \"src\" attributes to \"data-src\" as shown below. This is supported for image, video, audio and iframe elements. Lazy loaded iframes will also unload when the containing slide is no longer visible. section img data-src= image.png iframe data-src= http://hakim.se /iframe video source data-src= video.webm type= video/webm / source data-src= video.mp4 type= video/mp4 / /video /section","title":"Lazy Loading"},{"location":"concepts-driven-design-with-di/README.html#api","text":"The Reveal object exposes a JavaScript API for controlling navigation and reading state: // Navigation Reveal.slide( indexh, indexv, indexf ); Reveal.left(); Reveal.right(); Reveal.up(); Reveal.down(); Reveal.prev(); Reveal.next(); Reveal.prevFragment(); Reveal.nextFragment(); // Toggle presentation states, optionally pass true/false to force on/off Reveal.toggleOverview(); Reveal.togglePause(); Reveal.toggleAutoSlide(); // Change a config value at runtime Reveal.configure({ controls: true }); // Returns the present configuration options Reveal.getConfig(); // Fetch the current scale of the presentation Reveal.getScale(); // Retrieves the previous and current slide elements Reveal.getPreviousSlide(); Reveal.getCurrentSlide(); Reveal.getIndices(); // { h: 0, v: 0 } } Reveal.getProgress(); // 0-1 Reveal.getTotalSlides(); // Returns the speaker notes for the current slide Reveal.getSlideNotes(); // State checks Reveal.isFirstSlide(); Reveal.isLastSlide(); Reveal.isOverview(); Reveal.isPaused(); Reveal.isAutoSliding();","title":"API"},{"location":"concepts-driven-design-with-di/README.html#slide-changed-event","text":"A 'slidechanged' event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes. Some libraries, like MathJax (see #226 ), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'slidechanged', function( event ) { // event.previousSlide, event.currentSlide, event.indexh, event.indexv } );","title":"Slide Changed Event"},{"location":"concepts-driven-design-with-di/README.html#presentation-state","text":"The presentation's current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire. Reveal.slide( 1 ); // we're on slide 1 var state = Reveal.getState(); Reveal.slide( 3 ); // we're on slide 3 Reveal.setState( state ); // we're back on slide 1","title":"Presentation State"},{"location":"concepts-driven-design-with-di/README.html#slide-states","text":"If you set data-state=\"somestate\" on a slide section , \"somestate\" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide. Furthermore you can also listen to these changes in state via JavaScript: Reveal.addEventListener( 'somestate', function() { // TODO: Sprinkle magic }, false );","title":"Slide States"},{"location":"concepts-driven-design-with-di/README.html#slide-backgrounds","text":"Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your section elements. Four different types of backgrounds are supported: color, image, video and iframe. Below are a few examples. section data-background= #ff0000 h2 All CSS color formats are supported, like rgba() or hsl(). /h2 /section section data-background= http://example.com/image.png h2 This slide will have a full-size background image. /h2 /section section data-background= http://example.com/image.png data-background-size= 100px data-background-repeat= repeat h2 This background image will be sized to 100px and repeated. /h2 /section section data-background-video= https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm data-background-video-loop h2 Video. Multiple sources can be defined using a comma separated list. Video will loop when the data-background-video-loop attribute is provided. /h2 /section section data-background-iframe= https://slides.com h2 Embeds a web page as a background. Note that the page won't be interactive. /h2 /section Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition.","title":"Slide Backgrounds"},{"location":"concepts-driven-design-with-di/README.html#parallax-background","text":"If you want to use a parallax scrolling background, set the first two config properties below when initializing reveal.js (the other two are optional). Reveal.initialize({ // Parallax background image parallaxBackgroundImage: '', // e.g. https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px - currently only pixels are supported (don't use % or auto) // Amount of pixels to move the parallax background per slide step, // a value of 0 disables movement along the given axis // These are optional, if they aren't specified they'll be calculated automatically parallaxBackgroundHorizontal: 200, parallaxBackgroundVertical: 50 }); Make sure that the background size is much bigger than screen size to allow for some scrolling. View example .","title":"Parallax Background"},{"location":"concepts-driven-design-with-di/README.html#slide-transitions","text":"The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute: section data-transition= zoom h2 This slide will override the presentation transition and zoom! /h2 /section section data-transition-speed= fast h2 Choose from three transition speeds: default, fast or slow! /h2 /section You can also use different in and out transitions for the same slide: section data-transition= slide The train goes on \u2026 /section section data-transition= slide and on \u2026 /section section data-transition= slide-in fade-out and stops. /section section data-transition= fade-in slide-out (Passengers entering and leaving) /section section data-transition= slide And it starts again. /section","title":"Slide Transitions"},{"location":"concepts-driven-design-with-di/README.html#internal-links","text":"It's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute ( section id=\"some-slide\" ): a href= #/2/2 Link /a a href= #/some-slide Link /a You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it's a valid navigation route based on the current slide. a href= # class= navigate-left a href= # class= navigate-right a href= # class= navigate-up a href= # class= navigate-down a href= # class= navigate-prev !-- Previous vertical or horizontal slide -- a href= # class= navigate-next !-- Next vertical or horizontal slide --","title":"Internal links"},{"location":"concepts-driven-design-with-di/README.html#fragments","text":"Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here's an example: http://lab.hakim.se/reveal-js/#/fragments The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment: section p class= fragment grow grow /p p class= fragment shrink shrink /p p class= fragment fade-out fade-out /p p class= fragment current-visible visible only once /p p class= fragment highlight-current-blue blue only once /p p class= fragment highlight-red highlight-red /p p class= fragment highlight-green highlight-green /p p class= fragment highlight-blue highlight-blue /p /section Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second. section span class= fragment fade-in span class= fragment fade-out I'll fade in, then out /span /span /section The display order of fragments can be controlled using the data-fragment-index attribute. section p class= fragment data-fragment-index= 3 Appears last /p p class= fragment data-fragment-index= 1 Appears first /p p class= fragment data-fragment-index= 2 Appears second /p /section","title":"Fragments"},{"location":"concepts-driven-design-with-di/README.html#fragment-events","text":"When a slide fragment is either shown or hidden reveal.js will dispatch an event. Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'fragmentshown', function( event ) { // event.fragment = the fragment DOM element } ); Reveal.addEventListener( 'fragmenthidden', function( event ) { // event.fragment = the fragment DOM element } );","title":"Fragment events"},{"location":"concepts-driven-design-with-di/README.html#code-syntax-highlighting","text":"By default, Reveal is configured with highlight.js for code syntax highlighting. Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present surrounding whitespace is automatically removed. section pre code data-trim (def lazy-fib (concat [0 1] ((fn rfib [a b] (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) /code /pre /section","title":"Code syntax highlighting"},{"location":"concepts-driven-design-with-di/README.html#slide-number","text":"If you would like to display the page number of the current slide you can do so using the slideNumber configuration value. // Shows the slide number using default formatting Reveal.configure({ slideNumber: true }); // Slide number formatting can be configured using these variables: // h.v : horizontal . vertical slide number (default) // h/v : horizontal / vertical slide number // c : flattened slide number // c/t : flattened slide number / total slides Reveal.configure({ slideNumber: 'c/t' });","title":"Slide number"},{"location":"concepts-driven-design-with-di/README.html#overview-mode","text":"Press \"Esc\" or \"o\" keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks: Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } ); Reveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal.toggleOverview();","title":"Overview mode"},{"location":"concepts-driven-design-with-di/README.html#fullscreen-mode","text":"Just press \u00bbF\u00ab on your keyboard to show your presentation in fullscreen mode. Press the \u00bbESC\u00ab key to exit fullscreen mode.","title":"Fullscreen mode"},{"location":"concepts-driven-design-with-di/README.html#embedded-media","text":"Embedded HTML5 video / audio and YouTube iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute. Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown: video data-autoplay src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video Additionally the framework automatically pushes two post messages to all iframes, slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden.","title":"Embedded media"},{"location":"concepts-driven-design-with-di/README.html#stretching-elements","text":"Sometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below: section h2 This video will use up the remaining space on the slide /h2 video class= stretch src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video /section Limitations: - Only direct descendants of a slide section can be stretched - Only one descendant per slide section can be stretched","title":"Stretching elements"},{"location":"concepts-driven-design-with-di/README.html#postmessage-api","text":"The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2: window .postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' ); When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window: window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); if( data.namespace === 'reveal' data.eventName ==='slidechanged' ) { // Slide changed, see data.state for slide number } } ); This cross-window messaging can be toggled on or off using configuration flags. Reveal.initialize({ ..., // Exposes the reveal.js API through window.postMessage postMessage: true, // Dispatches all reveal.js events to the parent window through postMessage postMessageEvents: false });","title":"postMessage API"},{"location":"concepts-driven-design-with-di/README.html#pdf-export","text":"Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium . Here's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300. Open your presentation with print-pdf included anywhere in the query string. This triggers the default index HTML to load the PDF print stylesheet ( css/print/pdf.css ). You can test this with lab.hakim.se/reveal-js?print-pdf . Open the in-browser print dialog (CMD+P). Change the Destination setting to Save as PDF . Change the Layout to Landscape . Change the Margins to None . Click Save . Alternatively you can use the decktape project.","title":"PDF Export"},{"location":"concepts-driven-design-with-di/README.html#theming","text":"The framework comes with a few different themes included: black: Black background, white text, blue links (default theme) white: White background, black text, blue links league: Gray background, white text, blue links (default theme for reveal.js 3.0.0) beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html: link rel= stylesheet href= css/theme/black.css id= theme If you want to add a theme of your own see the instructions here: /css/theme/README.md .","title":"Theming"},{"location":"concepts-driven-design-with-di/README.html#speaker-notes","text":"reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the 's' key on your keyboard to open the notes window. Notes are defined by appending an aside element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown. Alternatively you can add your notes in a data-notes attribute on the slide. Like section data-notes=\"Something important\" /section . When used locally, this feature requires that reveal.js runs from a local web server . section h2 Some Slide /h2 aside class= notes Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit 's' on your keyboard). /aside /section Notes are only visible to you in the speaker view. If you wish to share your notes with the audience initialize reveal.js with the showNotes config value set to true . If you're using the external Markdown plugin, you can add notes with the help of a special delimiter: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: /section # Title ## Sub-title Here is some content... Note: This will only display in the notes window.","title":"Speaker Notes"},{"location":"concepts-driven-design-with-di/README.html#server-side-speaker-notes","text":"In some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies: Reveal.initialize({ ... dependencies: [ { src: 'socket.io/socket.io.js', async: true }, { src: 'plugin/notes-server/client.js', async: true } ] }); Then: Install Node.js Run npm install Run node plugin/notes-server","title":"Server Side Speaker Notes"},{"location":"concepts-driven-design-with-di/README.html#multiplexing","text":"The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at http://revealjs-51546.onmodulus.net/ . The multiplex plugin needs the following 3 things to operate: Master presentation that has control Client presentations that follow the master Socket.io server to broadcast events from the master to the clients More details:","title":"Multiplexing"},{"location":"concepts-driven-design-with-di/README.html#master-presentation","text":"Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation: npm install node-static static If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server. You can then access your master presentation at http://localhost:1947 Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'revealjs-51546.onmodulus.net:80' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, // and if you want speaker notes { src: 'plugin/notes-server/client.js', async: true } // other dependencies... ] });","title":"Master presentation"},{"location":"concepts-driven-design-with-di/README.html#client-presentation","text":"Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via http://example.com/path/to/presentation/client/index.html , with the configuration below causing them to connect to the socket.io server as clients. Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'revealjs-51546.onmodulus.net:80' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] });","title":"Client presentation"},{"location":"concepts-driven-design-with-di/README.html#socketio-server","text":"Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands: npm install node plugin/multiplex Or you use the socket.io server at http://revealjs-51546.onmodulus.net/ . You'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit http://example.com/token , where http://example.com is the location of your socket.io server. Or if you're going to use the socket.io server at http://revealjs-51546.onmodulus.net/ , visit http://revealjs-51546.onmodulus.net/token . You are very welcome to point your presentations at the Socket.io server running at http://revealjs-51546.onmodulus.net/ , but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. It is simple to deploy to nodejitsu, heroku, your own environment, etc.","title":"Socket.io server"},{"location":"concepts-driven-design-with-di/README.html#socketio-server-as-file-static-server","text":"The socket.io server can play the role of static file server for your client presentation, as in the example at http://revealjs-51546.onmodulus.net/ . (Open http://revealjs-51546.onmodulus.net/ in two browsers. Navigate through the slides on one, and the other will update to match.) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open http://revealjs-51546.onmodulus.net/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] });","title":"socket.io server as file static server"},{"location":"concepts-driven-design-with-di/README.html#mathjax","text":"If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you'll need to include it as a reveal.js dependency, find our more about dependencies here . The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the mathjax configuration value. Below is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the math config object at all. Reveal.initialize({ // other options ... math: { mathjax: 'https://cdn.mathjax.org/mathjax/latest/MathJax.js', config: 'TeX-AMS_HTML-full' // See http://docs.mathjax.org/en/latest/config-files.html }, dependencies: [ { src: 'plugin/math/math.js', async: true } ] }); Read MathJax's documentation if you need HTTPS delivery or serving of specific versions for stability.","title":"MathJax"},{"location":"concepts-driven-design-with-di/README.html#installation","text":"The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source.","title":"Installation"},{"location":"concepts-driven-design-with-di/README.html#basic-setup","text":"The core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser. Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases Unzip and replace the example contents in index.html with your own Open index.html in a browser to view it","title":"Basic setup"},{"location":"concepts-driven-design-with-di/README.html#full-setup","text":"Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code. Install Node.js Install Grunt Clone the reveal.js repository sh $ git clone https://github.com/hakimel/reveal.js.git Navigate to the reveal.js folder sh $ cd reveal.js Install dependencies sh $ npm install Serve the presentation and monitor source files for changes sh $ grunt serve Open http://localhost:8000 to view your presentation You can change the port by using grunt serve --port 8001 .","title":"Full setup"},{"location":"concepts-driven-design-with-di/README.html#folder-structure","text":"css/ Core styles without which the project does not function js/ Like above but for JavaScript plugin/ Components that have been developed as extensions to reveal.js lib/ All other third party assets (JavaScript, CSS, fonts)","title":"Folder Structure"},{"location":"concepts-driven-design-with-di/README.html#license","text":"MIT licensed Copyright (C) 2015 Hakim El Hattab, http://hakim.se","title":"License"},{"location":"concepts-driven-design-with-di/CONTRIBUTING.html","text":"Contributing Please keep the issue tracker limited to bug reports , feature requests and pull requests . Personal Support If you have personal support or setup questions the best place to ask those are StackOverflow . Bug Reports When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested. Pull Requests Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master) Plugins Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"CONTRIBUTING"},{"location":"concepts-driven-design-with-di/CONTRIBUTING.html#contributing","text":"Please keep the issue tracker limited to bug reports , feature requests and pull requests .","title":"Contributing"},{"location":"concepts-driven-design-with-di/CONTRIBUTING.html#personal-support","text":"If you have personal support or setup questions the best place to ask those are StackOverflow .","title":"Personal Support"},{"location":"concepts-driven-design-with-di/CONTRIBUTING.html#bug-reports","text":"When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested.","title":"Bug Reports"},{"location":"concepts-driven-design-with-di/CONTRIBUTING.html#pull-requests","text":"Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master)","title":"Pull Requests"},{"location":"concepts-driven-design-with-di/CONTRIBUTING.html#plugins","text":"Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"Plugins"},{"location":"concepts-driven-design-with-di/css/theme/README.html","text":"Dependencies Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceding: https://github.com/hakimel/reveal.js#full-setup Creating a Theme To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run grunt css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Home"},{"location":"concepts-driven-design-with-di/css/theme/README.html#dependencies","text":"Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceding: https://github.com/hakimel/reveal.js#full-setup","title":"Dependencies"},{"location":"concepts-driven-design-with-di/css/theme/README.html#creating-a-theme","text":"To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run grunt css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Creating a Theme"},{"location":"concepts-driven-design-with-di/plugin/markdown/example.html","text":"Markdown Demo External 1.1 Content 1.1 Note: This will only appear in the speaker notes window. External 1.2 Content 1.2 External 2 Content 2.1 External 3.1 Content 3.1 External 3.2 Content 3.2","title":"Markdown Demo"},{"location":"concepts-driven-design-with-di/plugin/markdown/example.html#markdown-demo","text":"","title":"Markdown Demo"},{"location":"concepts-driven-design-with-di/plugin/markdown/example.html#external-11","text":"Content 1.1 Note: This will only appear in the speaker notes window.","title":"External 1.1"},{"location":"concepts-driven-design-with-di/plugin/markdown/example.html#external-12","text":"Content 1.2","title":"External 1.2"},{"location":"concepts-driven-design-with-di/plugin/markdown/example.html#external-2","text":"Content 2.1","title":"External 2"},{"location":"concepts-driven-design-with-di/plugin/markdown/example.html#external-31","text":"Content 3.1","title":"External 3.1"},{"location":"concepts-driven-design-with-di/plugin/markdown/example.html#external-32","text":"Content 3.2","title":"External 3.2"},{"location":"cpp-london-2017/README.html","text":"reveal.js A framework for easily creating beautiful presentations using HTML. Check out the live demo . reveal.js comes with a broad range of features including nested slides , Markdown contents , PDF export , speaker notes and a JavaScript API . It's best viewed in a modern browser but fallbacks are available to make sure your presentation can still be viewed elsewhere. More reading: Installation : Step-by-step instructions for getting reveal.js running on your computer. Changelog : Up-to-date version history. Examples : Presentations created with reveal.js, add your own! Browser Support : Explanation of browser support and fallbacks. Plugins : A list of plugins that can be used to extend reveal.js. Online Editor Presentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at http://slides.com . Instructions Markup Markup hierarchy needs to be div class=\"reveal\" div class=\"slides\" section where the section represents one slide and can be repeated indefinitely. If you place multiple section 's inside of another section they will be shown as vertical slides. The first of the vertical slides is the \"root\" of the others (at the top), and it will be included in the horizontal sequence. For example: div class= reveal div class= slides section Single Horizontal Slide /section section section Vertical Slide 1 /section section Vertical Slide 2 /section /section /div /div Markdown It's possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your section elements and wrap the contents in a script type=\"text/template\" like the example below. This is based on data-markdown from Paul Irish modified to use marked to support Github Flavoured Markdown . Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks). section data-markdown script type= text/template ## Page title A paragraph with some text and a [link](http://hakim.se). /script /section External Markdown You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file. The data-charset attribute is optional and specifies which charset to use when loading the external file. When used locally, this feature requires that reveal.js runs from a local web server . section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: data-charset= iso-8859-15 /section Element Attributes Special syntax (in html comment) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things. section data-markdown script type= text/template - Item 1 !-- .element: class= fragment data-fragment-index= 2 -- - Item 2 !-- .element: class= fragment data-fragment-index= 1 -- /script /section Slide Attributes Special syntax (in html comment) is available for adding attributes to the slide section elements generated by your Markdown. section data-markdown script type= text/template !-- .slide: data-background= #ff0000 -- Markdown content /script /section Configuration At the end of your page you need to initialize reveal by running the following code. Note that all config values are optional and will default as specified below. Reveal.initialize({ // Display controls in the bottom right corner controls: true, // Display a presentation progress bar progress: true, // Display the page number of the current slide slideNumber: false, // Push each slide change to the browser history history: false, // Enable keyboard shortcuts for navigation keyboard: true, // Enable the slide overview mode overview: true, // Vertical centering of slides center: true, // Enables touch navigation on devices with touch input touch: true, // Loop the presentation loop: false, // Change the presentation direction to be RTL rtl: false, // Turns fragments on and off globally fragments: true, // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded: false, // Flags if we should show a help overlay when the questionmark // key is pressed help: true, // Flags if speaker notes should be visible to all viewers showNotes: false, // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide: 0, // Stop auto-sliding after user input autoSlideStoppable: true, // Enable slide navigation via mouse wheel mouseWheel: false, // Hides the address bar on mobile devices hideAddressBar: true, // Opens links in an iframe preview overlay previewLinks: false, // Transition style transition: 'default', // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed: 'default', // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition: 'default', // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance: 3, // Parallax background image parallaxBackgroundImage: '', // e.g. 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg' // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px // Amount to move parallax background (horizontal and vertical) on slide change // Number, e.g. 100 parallaxBackgroundHorizontal: '', parallaxBackgroundVertical: '' }); The configuration can be updated after initialization using the configure method: // Turn autoSlide off Reveal.configure({ autoSlide: 0 }); // Start auto-sliding every 5s Reveal.configure({ autoSlide: 5000 }); Presentation Size All presentations have a normal size, that is the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport. See below for a list of configuration options related to sizing, including default values: Reveal.initialize({ ... // The normal size of the presentation, aspect ratio will be preserved // when the presentation is scaled to fit different resolutions. Can be // specified using percentage units. width: 960, height: 700, // Factor of the display size that should remain empty around the content margin: 0.1, // Bounds for smallest/largest possible scale to apply to content minScale: 0.2, maxScale: 1.5 }); Dependencies Reveal.js doesn't rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example: Reveal.initialize({ dependencies: [ // Cross-browser shim that fully implements classList - https://github.com/eligrey/classList.js/ { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } }, // Interpret Markdown in section elements { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, // Syntax highlight for code elements { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, // Zoom in and out with Alt+click { src: 'plugin/zoom-js/zoom.js', async: true }, // Speaker notes { src: 'plugin/notes/notes.js', async: true }, // MathJax { src: 'plugin/math/math.js', async: true } ] }); You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src : Path to the script to load - async : [optional] Flags if the script should load after reveal.js has started, defaults to false - callback : [optional] Function to execute when the script has loaded - condition : [optional] Function which must return true for the script to be loaded Ready Event A 'ready' event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call Reveal.isReady() . Reveal.addEventListener( 'ready', function( event ) { // event.currentSlide, event.indexh, event.indexv } ); Auto-sliding Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides: // Slide every five seconds Reveal.configure({ autoSlide: 5000 }); When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing \u00bba\u00ab on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config. You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute: section data-autoslide= 2000 p After 2 seconds the first fragment will be shown. /p p class= fragment data-autoslide= 10000 After 10 seconds the next fragment will be shown. /p p class= fragment Now, the fragment is displayed for 2 seconds before the next slide is shown. /p /section Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired. Keyboard Bindings If you're unhappy with any of the default keyboard bindings you can override them using the keyboard config option: Reveal.configure({ keyboard: { 13: 'next', // go to the next slide when the ENTER key is pressed 27: function() {}, // do something custom when ESC is pressed 32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding) } }); Touch Navigation You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js. If there's some part of your content that needs to remain accessible to touch events you'll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled. Lazy Loading When working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option. To enable lazy loading all you need to do is change your \"src\" attributes to \"data-src\" as shown below. This is supported for image, video, audio and iframe elements. Lazy loaded iframes will also unload when the containing slide is no longer visible. section img data-src= image.png iframe data-src= http://hakim.se /iframe video source data-src= video.webm type= video/webm / source data-src= video.mp4 type= video/mp4 / /video /section API The Reveal object exposes a JavaScript API for controlling navigation and reading state: // Navigation Reveal.slide( indexh, indexv, indexf ); Reveal.left(); Reveal.right(); Reveal.up(); Reveal.down(); Reveal.prev(); Reveal.next(); Reveal.prevFragment(); Reveal.nextFragment(); // Toggle presentation states, optionally pass true/false to force on/off Reveal.toggleOverview(); Reveal.togglePause(); Reveal.toggleAutoSlide(); // Change a config value at runtime Reveal.configure({ controls: true }); // Returns the present configuration options Reveal.getConfig(); // Fetch the current scale of the presentation Reveal.getScale(); // Retrieves the previous and current slide elements Reveal.getPreviousSlide(); Reveal.getCurrentSlide(); Reveal.getIndices(); // { h: 0, v: 0 } } Reveal.getProgress(); // 0-1 Reveal.getTotalSlides(); // Returns the speaker notes for the current slide Reveal.getSlideNotes(); // State checks Reveal.isFirstSlide(); Reveal.isLastSlide(); Reveal.isOverview(); Reveal.isPaused(); Reveal.isAutoSliding(); Slide Changed Event A 'slidechanged' event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes. Some libraries, like MathJax (see #226 ), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'slidechanged', function( event ) { // event.previousSlide, event.currentSlide, event.indexh, event.indexv } ); Presentation State The presentation's current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire. Reveal.slide( 1 ); // we're on slide 1 var state = Reveal.getState(); Reveal.slide( 3 ); // we're on slide 3 Reveal.setState( state ); // we're back on slide 1 Slide States If you set data-state=\"somestate\" on a slide section , \"somestate\" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide. Furthermore you can also listen to these changes in state via JavaScript: Reveal.addEventListener( 'somestate', function() { // TODO: Sprinkle magic }, false ); Slide Backgrounds Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your section elements. Four different types of backgrounds are supported: color, image, video and iframe. Below are a few examples. section data-background= #ff0000 h2 All CSS color formats are supported, like rgba() or hsl(). /h2 /section section data-background= http://example.com/image.png h2 This slide will have a full-size background image. /h2 /section section data-background= http://example.com/image.png data-background-size= 100px data-background-repeat= repeat h2 This background image will be sized to 100px and repeated. /h2 /section section data-background-video= https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm data-background-video-loop h2 Video. Multiple sources can be defined using a comma separated list. Video will loop when the data-background-video-loop attribute is provided. /h2 /section section data-background-iframe= https://slides.com h2 Embeds a web page as a background. Note that the page won't be interactive. /h2 /section Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition. Parallax Background If you want to use a parallax scrolling background, set the first two config properties below when initializing reveal.js (the other two are optional). Reveal.initialize({ // Parallax background image parallaxBackgroundImage: '', // e.g. https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px - currently only pixels are supported (don't use % or auto) // Amount of pixels to move the parallax background per slide step, // a value of 0 disables movement along the given axis // These are optional, if they aren't specified they'll be calculated automatically parallaxBackgroundHorizontal: 200, parallaxBackgroundVertical: 50 }); Make sure that the background size is much bigger than screen size to allow for some scrolling. View example . Slide Transitions The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute: section data-transition= zoom h2 This slide will override the presentation transition and zoom! /h2 /section section data-transition-speed= fast h2 Choose from three transition speeds: default, fast or slow! /h2 /section You can also use different in and out transitions for the same slide: section data-transition= slide The train goes on \u2026 /section section data-transition= slide and on \u2026 /section section data-transition= slide-in fade-out and stops. /section section data-transition= fade-in slide-out (Passengers entering and leaving) /section section data-transition= slide And it starts again. /section Internal links It's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute ( section id=\"some-slide\" ): a href= #/2/2 Link /a a href= #/some-slide Link /a You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it's a valid navigation route based on the current slide. a href= # class= navigate-left a href= # class= navigate-right a href= # class= navigate-up a href= # class= navigate-down a href= # class= navigate-prev !-- Previous vertical or horizontal slide -- a href= # class= navigate-next !-- Next vertical or horizontal slide -- Fragments Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here's an example: http://lab.hakim.se/reveal-js/#/fragments The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment: section p class= fragment grow grow /p p class= fragment shrink shrink /p p class= fragment fade-out fade-out /p p class= fragment current-visible visible only once /p p class= fragment highlight-current-blue blue only once /p p class= fragment highlight-red highlight-red /p p class= fragment highlight-green highlight-green /p p class= fragment highlight-blue highlight-blue /p /section Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second. section span class= fragment fade-in span class= fragment fade-out I'll fade in, then out /span /span /section The display order of fragments can be controlled using the data-fragment-index attribute. section p class= fragment data-fragment-index= 3 Appears last /p p class= fragment data-fragment-index= 1 Appears first /p p class= fragment data-fragment-index= 2 Appears second /p /section Fragment events When a slide fragment is either shown or hidden reveal.js will dispatch an event. Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'fragmentshown', function( event ) { // event.fragment = the fragment DOM element } ); Reveal.addEventListener( 'fragmenthidden', function( event ) { // event.fragment = the fragment DOM element } ); Code syntax highlighting By default, Reveal is configured with highlight.js for code syntax highlighting. Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present surrounding whitespace is automatically removed. section pre code data-trim (def lazy-fib (concat [0 1] ((fn rfib [a b] (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) /code /pre /section Slide number If you would like to display the page number of the current slide you can do so using the slideNumber configuration value. // Shows the slide number using default formatting Reveal.configure({ slideNumber: true }); // Slide number formatting can be configured using these variables: // h.v : horizontal . vertical slide number (default) // h/v : horizontal / vertical slide number // c : flattened slide number // c/t : flattened slide number / total slides Reveal.configure({ slideNumber: 'c/t' }); Overview mode Press \"Esc\" or \"o\" keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks: Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } ); Reveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal.toggleOverview(); Fullscreen mode Just press \u00bbF\u00ab on your keyboard to show your presentation in fullscreen mode. Press the \u00bbESC\u00ab key to exit fullscreen mode. Embedded media Embedded HTML5 video / audio and YouTube iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute. Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown: video data-autoplay src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video Additionally the framework automatically pushes two post messages to all iframes, slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden. Stretching elements Sometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below: section h2 This video will use up the remaining space on the slide /h2 video class= stretch src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video /section Limitations: - Only direct descendants of a slide section can be stretched - Only one descendant per slide section can be stretched postMessage API The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2: window .postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' ); When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window: window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); if( data.namespace === 'reveal' data.eventName ==='slidechanged' ) { // Slide changed, see data.state for slide number } } ); This cross-window messaging can be toggled on or off using configuration flags. Reveal.initialize({ ..., // Exposes the reveal.js API through window.postMessage postMessage: true, // Dispatches all reveal.js events to the parent window through postMessage postMessageEvents: false }); PDF Export Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium . Here's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300. Open your presentation with print-pdf included anywhere in the query string. This triggers the default index HTML to load the PDF print stylesheet ( css/print/pdf.css ). You can test this with lab.hakim.se/reveal-js?print-pdf . Open the in-browser print dialog (CMD+P). Change the Destination setting to Save as PDF . Change the Layout to Landscape . Change the Margins to None . Click Save . Alternatively you can use the decktape project. Theming The framework comes with a few different themes included: black: Black background, white text, blue links (default theme) white: White background, black text, blue links league: Gray background, white text, blue links (default theme for reveal.js 3.0.0) beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html: link rel= stylesheet href= css/theme/black.css id= theme If you want to add a theme of your own see the instructions here: /css/theme/README.md . Speaker Notes reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the 's' key on your keyboard to open the notes window. Notes are defined by appending an aside element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown. Alternatively you can add your notes in a data-notes attribute on the slide. Like section data-notes=\"Something important\" /section . When used locally, this feature requires that reveal.js runs from a local web server . section h2 Some Slide /h2 aside class= notes Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit 's' on your keyboard). /aside /section Notes are only visible to you in the speaker view. If you wish to share your notes with the audience initialize reveal.js with the showNotes config value set to true . If you're using the external Markdown plugin, you can add notes with the help of a special delimiter: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: /section # Title ## Sub-title Here is some content... Note: This will only display in the notes window. Server Side Speaker Notes In some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies: Reveal.initialize({ ... dependencies: [ { src: 'socket.io/socket.io.js', async: true }, { src: 'plugin/notes-server/client.js', async: true } ] }); Then: Install Node.js Run npm install Run node plugin/notes-server Multiplexing The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at http://revealjs-51546.onmodulus.net/ . The multiplex plugin needs the following 3 things to operate: Master presentation that has control Client presentations that follow the master Socket.io server to broadcast events from the master to the clients More details: Master presentation Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation: npm install node-static static If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server. You can then access your master presentation at http://localhost:1947 Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'revealjs-51546.onmodulus.net:80' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, // and if you want speaker notes { src: 'plugin/notes-server/client.js', async: true } // other dependencies... ] }); Client presentation Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via http://example.com/path/to/presentation/client/index.html , with the configuration below causing them to connect to the socket.io server as clients. Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'revealjs-51546.onmodulus.net:80' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] }); Socket.io server Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands: npm install node plugin/multiplex Or you use the socket.io server at http://revealjs-51546.onmodulus.net/ . You'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit http://example.com/token , where http://example.com is the location of your socket.io server. Or if you're going to use the socket.io server at http://revealjs-51546.onmodulus.net/ , visit http://revealjs-51546.onmodulus.net/token . You are very welcome to point your presentations at the Socket.io server running at http://revealjs-51546.onmodulus.net/ , but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. It is simple to deploy to nodejitsu, heroku, your own environment, etc. socket.io server as file static server The socket.io server can play the role of static file server for your client presentation, as in the example at http://revealjs-51546.onmodulus.net/ . (Open http://revealjs-51546.onmodulus.net/ in two browsers. Navigate through the slides on one, and the other will update to match.) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open http://revealjs-51546.onmodulus.net/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] }); MathJax If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you'll need to include it as a reveal.js dependency, find our more about dependencies here . The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the mathjax configuration value. Below is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the math config object at all. Reveal.initialize({ // other options ... math: { mathjax: 'https://cdn.mathjax.org/mathjax/latest/MathJax.js', config: 'TeX-AMS_HTML-full' // See http://docs.mathjax.org/en/latest/config-files.html }, dependencies: [ { src: 'plugin/math/math.js', async: true } ] }); Read MathJax's documentation if you need HTTPS delivery or serving of specific versions for stability. Installation The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source. Basic setup The core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser. Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases Unzip and replace the example contents in index.html with your own Open index.html in a browser to view it Full setup Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code. Install Node.js Install Grunt Clone the reveal.js repository sh $ git clone https://github.com/hakimel/reveal.js.git Navigate to the reveal.js folder sh $ cd reveal.js Install dependencies sh $ npm install Serve the presentation and monitor source files for changes sh $ grunt serve Open http://localhost:8000 to view your presentation You can change the port by using grunt serve --port 8001 . Folder Structure css/ Core styles without which the project does not function js/ Like above but for JavaScript plugin/ Components that have been developed as extensions to reveal.js lib/ All other third party assets (JavaScript, CSS, fonts) License MIT licensed Copyright (C) 2015 Hakim El Hattab, http://hakim.se","title":"reveal.js [![Build Status](https://travis-ci.org/hakimel/reveal.js.svg?branch=master)](https://travis-ci.org/hakimel/reveal.js)"},{"location":"cpp-london-2017/README.html#revealjs","text":"A framework for easily creating beautiful presentations using HTML. Check out the live demo . reveal.js comes with a broad range of features including nested slides , Markdown contents , PDF export , speaker notes and a JavaScript API . It's best viewed in a modern browser but fallbacks are available to make sure your presentation can still be viewed elsewhere.","title":"reveal.js"},{"location":"cpp-london-2017/README.html#more-reading","text":"Installation : Step-by-step instructions for getting reveal.js running on your computer. Changelog : Up-to-date version history. Examples : Presentations created with reveal.js, add your own! Browser Support : Explanation of browser support and fallbacks. Plugins : A list of plugins that can be used to extend reveal.js.","title":"More reading:"},{"location":"cpp-london-2017/README.html#online-editor","text":"Presentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at http://slides.com .","title":"Online Editor"},{"location":"cpp-london-2017/README.html#instructions","text":"","title":"Instructions"},{"location":"cpp-london-2017/README.html#markup","text":"Markup hierarchy needs to be div class=\"reveal\" div class=\"slides\" section where the section represents one slide and can be repeated indefinitely. If you place multiple section 's inside of another section they will be shown as vertical slides. The first of the vertical slides is the \"root\" of the others (at the top), and it will be included in the horizontal sequence. For example: div class= reveal div class= slides section Single Horizontal Slide /section section section Vertical Slide 1 /section section Vertical Slide 2 /section /section /div /div","title":"Markup"},{"location":"cpp-london-2017/README.html#markdown","text":"It's possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your section elements and wrap the contents in a script type=\"text/template\" like the example below. This is based on data-markdown from Paul Irish modified to use marked to support Github Flavoured Markdown . Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks). section data-markdown script type= text/template ## Page title A paragraph with some text and a [link](http://hakim.se). /script /section","title":"Markdown"},{"location":"cpp-london-2017/README.html#external-markdown","text":"You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file. The data-charset attribute is optional and specifies which charset to use when loading the external file. When used locally, this feature requires that reveal.js runs from a local web server . section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: data-charset= iso-8859-15 /section","title":"External Markdown"},{"location":"cpp-london-2017/README.html#element-attributes","text":"Special syntax (in html comment) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things. section data-markdown script type= text/template - Item 1 !-- .element: class= fragment data-fragment-index= 2 -- - Item 2 !-- .element: class= fragment data-fragment-index= 1 -- /script /section","title":"Element Attributes"},{"location":"cpp-london-2017/README.html#slide-attributes","text":"Special syntax (in html comment) is available for adding attributes to the slide section elements generated by your Markdown. section data-markdown script type= text/template !-- .slide: data-background= #ff0000 -- Markdown content /script /section","title":"Slide Attributes"},{"location":"cpp-london-2017/README.html#configuration","text":"At the end of your page you need to initialize reveal by running the following code. Note that all config values are optional and will default as specified below. Reveal.initialize({ // Display controls in the bottom right corner controls: true, // Display a presentation progress bar progress: true, // Display the page number of the current slide slideNumber: false, // Push each slide change to the browser history history: false, // Enable keyboard shortcuts for navigation keyboard: true, // Enable the slide overview mode overview: true, // Vertical centering of slides center: true, // Enables touch navigation on devices with touch input touch: true, // Loop the presentation loop: false, // Change the presentation direction to be RTL rtl: false, // Turns fragments on and off globally fragments: true, // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded: false, // Flags if we should show a help overlay when the questionmark // key is pressed help: true, // Flags if speaker notes should be visible to all viewers showNotes: false, // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide: 0, // Stop auto-sliding after user input autoSlideStoppable: true, // Enable slide navigation via mouse wheel mouseWheel: false, // Hides the address bar on mobile devices hideAddressBar: true, // Opens links in an iframe preview overlay previewLinks: false, // Transition style transition: 'default', // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed: 'default', // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition: 'default', // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance: 3, // Parallax background image parallaxBackgroundImage: '', // e.g. 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg' // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px // Amount to move parallax background (horizontal and vertical) on slide change // Number, e.g. 100 parallaxBackgroundHorizontal: '', parallaxBackgroundVertical: '' }); The configuration can be updated after initialization using the configure method: // Turn autoSlide off Reveal.configure({ autoSlide: 0 }); // Start auto-sliding every 5s Reveal.configure({ autoSlide: 5000 });","title":"Configuration"},{"location":"cpp-london-2017/README.html#presentation-size","text":"All presentations have a normal size, that is the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport. See below for a list of configuration options related to sizing, including default values: Reveal.initialize({ ... // The normal size of the presentation, aspect ratio will be preserved // when the presentation is scaled to fit different resolutions. Can be // specified using percentage units. width: 960, height: 700, // Factor of the display size that should remain empty around the content margin: 0.1, // Bounds for smallest/largest possible scale to apply to content minScale: 0.2, maxScale: 1.5 });","title":"Presentation Size"},{"location":"cpp-london-2017/README.html#dependencies","text":"Reveal.js doesn't rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example: Reveal.initialize({ dependencies: [ // Cross-browser shim that fully implements classList - https://github.com/eligrey/classList.js/ { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } }, // Interpret Markdown in section elements { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, // Syntax highlight for code elements { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, // Zoom in and out with Alt+click { src: 'plugin/zoom-js/zoom.js', async: true }, // Speaker notes { src: 'plugin/notes/notes.js', async: true }, // MathJax { src: 'plugin/math/math.js', async: true } ] }); You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src : Path to the script to load - async : [optional] Flags if the script should load after reveal.js has started, defaults to false - callback : [optional] Function to execute when the script has loaded - condition : [optional] Function which must return true for the script to be loaded","title":"Dependencies"},{"location":"cpp-london-2017/README.html#ready-event","text":"A 'ready' event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call Reveal.isReady() . Reveal.addEventListener( 'ready', function( event ) { // event.currentSlide, event.indexh, event.indexv } );","title":"Ready Event"},{"location":"cpp-london-2017/README.html#auto-sliding","text":"Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides: // Slide every five seconds Reveal.configure({ autoSlide: 5000 }); When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing \u00bba\u00ab on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config. You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute: section data-autoslide= 2000 p After 2 seconds the first fragment will be shown. /p p class= fragment data-autoslide= 10000 After 10 seconds the next fragment will be shown. /p p class= fragment Now, the fragment is displayed for 2 seconds before the next slide is shown. /p /section Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired.","title":"Auto-sliding"},{"location":"cpp-london-2017/README.html#keyboard-bindings","text":"If you're unhappy with any of the default keyboard bindings you can override them using the keyboard config option: Reveal.configure({ keyboard: { 13: 'next', // go to the next slide when the ENTER key is pressed 27: function() {}, // do something custom when ESC is pressed 32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding) } });","title":"Keyboard Bindings"},{"location":"cpp-london-2017/README.html#touch-navigation","text":"You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js. If there's some part of your content that needs to remain accessible to touch events you'll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled.","title":"Touch Navigation"},{"location":"cpp-london-2017/README.html#lazy-loading","text":"When working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option. To enable lazy loading all you need to do is change your \"src\" attributes to \"data-src\" as shown below. This is supported for image, video, audio and iframe elements. Lazy loaded iframes will also unload when the containing slide is no longer visible. section img data-src= image.png iframe data-src= http://hakim.se /iframe video source data-src= video.webm type= video/webm / source data-src= video.mp4 type= video/mp4 / /video /section","title":"Lazy Loading"},{"location":"cpp-london-2017/README.html#api","text":"The Reveal object exposes a JavaScript API for controlling navigation and reading state: // Navigation Reveal.slide( indexh, indexv, indexf ); Reveal.left(); Reveal.right(); Reveal.up(); Reveal.down(); Reveal.prev(); Reveal.next(); Reveal.prevFragment(); Reveal.nextFragment(); // Toggle presentation states, optionally pass true/false to force on/off Reveal.toggleOverview(); Reveal.togglePause(); Reveal.toggleAutoSlide(); // Change a config value at runtime Reveal.configure({ controls: true }); // Returns the present configuration options Reveal.getConfig(); // Fetch the current scale of the presentation Reveal.getScale(); // Retrieves the previous and current slide elements Reveal.getPreviousSlide(); Reveal.getCurrentSlide(); Reveal.getIndices(); // { h: 0, v: 0 } } Reveal.getProgress(); // 0-1 Reveal.getTotalSlides(); // Returns the speaker notes for the current slide Reveal.getSlideNotes(); // State checks Reveal.isFirstSlide(); Reveal.isLastSlide(); Reveal.isOverview(); Reveal.isPaused(); Reveal.isAutoSliding();","title":"API"},{"location":"cpp-london-2017/README.html#slide-changed-event","text":"A 'slidechanged' event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes. Some libraries, like MathJax (see #226 ), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'slidechanged', function( event ) { // event.previousSlide, event.currentSlide, event.indexh, event.indexv } );","title":"Slide Changed Event"},{"location":"cpp-london-2017/README.html#presentation-state","text":"The presentation's current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire. Reveal.slide( 1 ); // we're on slide 1 var state = Reveal.getState(); Reveal.slide( 3 ); // we're on slide 3 Reveal.setState( state ); // we're back on slide 1","title":"Presentation State"},{"location":"cpp-london-2017/README.html#slide-states","text":"If you set data-state=\"somestate\" on a slide section , \"somestate\" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide. Furthermore you can also listen to these changes in state via JavaScript: Reveal.addEventListener( 'somestate', function() { // TODO: Sprinkle magic }, false );","title":"Slide States"},{"location":"cpp-london-2017/README.html#slide-backgrounds","text":"Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your section elements. Four different types of backgrounds are supported: color, image, video and iframe. Below are a few examples. section data-background= #ff0000 h2 All CSS color formats are supported, like rgba() or hsl(). /h2 /section section data-background= http://example.com/image.png h2 This slide will have a full-size background image. /h2 /section section data-background= http://example.com/image.png data-background-size= 100px data-background-repeat= repeat h2 This background image will be sized to 100px and repeated. /h2 /section section data-background-video= https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm data-background-video-loop h2 Video. Multiple sources can be defined using a comma separated list. Video will loop when the data-background-video-loop attribute is provided. /h2 /section section data-background-iframe= https://slides.com h2 Embeds a web page as a background. Note that the page won't be interactive. /h2 /section Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition.","title":"Slide Backgrounds"},{"location":"cpp-london-2017/README.html#parallax-background","text":"If you want to use a parallax scrolling background, set the first two config properties below when initializing reveal.js (the other two are optional). Reveal.initialize({ // Parallax background image parallaxBackgroundImage: '', // e.g. https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px - currently only pixels are supported (don't use % or auto) // Amount of pixels to move the parallax background per slide step, // a value of 0 disables movement along the given axis // These are optional, if they aren't specified they'll be calculated automatically parallaxBackgroundHorizontal: 200, parallaxBackgroundVertical: 50 }); Make sure that the background size is much bigger than screen size to allow for some scrolling. View example .","title":"Parallax Background"},{"location":"cpp-london-2017/README.html#slide-transitions","text":"The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute: section data-transition= zoom h2 This slide will override the presentation transition and zoom! /h2 /section section data-transition-speed= fast h2 Choose from three transition speeds: default, fast or slow! /h2 /section You can also use different in and out transitions for the same slide: section data-transition= slide The train goes on \u2026 /section section data-transition= slide and on \u2026 /section section data-transition= slide-in fade-out and stops. /section section data-transition= fade-in slide-out (Passengers entering and leaving) /section section data-transition= slide And it starts again. /section","title":"Slide Transitions"},{"location":"cpp-london-2017/README.html#internal-links","text":"It's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute ( section id=\"some-slide\" ): a href= #/2/2 Link /a a href= #/some-slide Link /a You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it's a valid navigation route based on the current slide. a href= # class= navigate-left a href= # class= navigate-right a href= # class= navigate-up a href= # class= navigate-down a href= # class= navigate-prev !-- Previous vertical or horizontal slide -- a href= # class= navigate-next !-- Next vertical or horizontal slide --","title":"Internal links"},{"location":"cpp-london-2017/README.html#fragments","text":"Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here's an example: http://lab.hakim.se/reveal-js/#/fragments The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment: section p class= fragment grow grow /p p class= fragment shrink shrink /p p class= fragment fade-out fade-out /p p class= fragment current-visible visible only once /p p class= fragment highlight-current-blue blue only once /p p class= fragment highlight-red highlight-red /p p class= fragment highlight-green highlight-green /p p class= fragment highlight-blue highlight-blue /p /section Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second. section span class= fragment fade-in span class= fragment fade-out I'll fade in, then out /span /span /section The display order of fragments can be controlled using the data-fragment-index attribute. section p class= fragment data-fragment-index= 3 Appears last /p p class= fragment data-fragment-index= 1 Appears first /p p class= fragment data-fragment-index= 2 Appears second /p /section","title":"Fragments"},{"location":"cpp-london-2017/README.html#fragment-events","text":"When a slide fragment is either shown or hidden reveal.js will dispatch an event. Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'fragmentshown', function( event ) { // event.fragment = the fragment DOM element } ); Reveal.addEventListener( 'fragmenthidden', function( event ) { // event.fragment = the fragment DOM element } );","title":"Fragment events"},{"location":"cpp-london-2017/README.html#code-syntax-highlighting","text":"By default, Reveal is configured with highlight.js for code syntax highlighting. Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present surrounding whitespace is automatically removed. section pre code data-trim (def lazy-fib (concat [0 1] ((fn rfib [a b] (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) /code /pre /section","title":"Code syntax highlighting"},{"location":"cpp-london-2017/README.html#slide-number","text":"If you would like to display the page number of the current slide you can do so using the slideNumber configuration value. // Shows the slide number using default formatting Reveal.configure({ slideNumber: true }); // Slide number formatting can be configured using these variables: // h.v : horizontal . vertical slide number (default) // h/v : horizontal / vertical slide number // c : flattened slide number // c/t : flattened slide number / total slides Reveal.configure({ slideNumber: 'c/t' });","title":"Slide number"},{"location":"cpp-london-2017/README.html#overview-mode","text":"Press \"Esc\" or \"o\" keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks: Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } ); Reveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal.toggleOverview();","title":"Overview mode"},{"location":"cpp-london-2017/README.html#fullscreen-mode","text":"Just press \u00bbF\u00ab on your keyboard to show your presentation in fullscreen mode. Press the \u00bbESC\u00ab key to exit fullscreen mode.","title":"Fullscreen mode"},{"location":"cpp-london-2017/README.html#embedded-media","text":"Embedded HTML5 video / audio and YouTube iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute. Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown: video data-autoplay src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video Additionally the framework automatically pushes two post messages to all iframes, slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden.","title":"Embedded media"},{"location":"cpp-london-2017/README.html#stretching-elements","text":"Sometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below: section h2 This video will use up the remaining space on the slide /h2 video class= stretch src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video /section Limitations: - Only direct descendants of a slide section can be stretched - Only one descendant per slide section can be stretched","title":"Stretching elements"},{"location":"cpp-london-2017/README.html#postmessage-api","text":"The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2: window .postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' ); When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window: window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); if( data.namespace === 'reveal' data.eventName ==='slidechanged' ) { // Slide changed, see data.state for slide number } } ); This cross-window messaging can be toggled on or off using configuration flags. Reveal.initialize({ ..., // Exposes the reveal.js API through window.postMessage postMessage: true, // Dispatches all reveal.js events to the parent window through postMessage postMessageEvents: false });","title":"postMessage API"},{"location":"cpp-london-2017/README.html#pdf-export","text":"Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium . Here's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300. Open your presentation with print-pdf included anywhere in the query string. This triggers the default index HTML to load the PDF print stylesheet ( css/print/pdf.css ). You can test this with lab.hakim.se/reveal-js?print-pdf . Open the in-browser print dialog (CMD+P). Change the Destination setting to Save as PDF . Change the Layout to Landscape . Change the Margins to None . Click Save . Alternatively you can use the decktape project.","title":"PDF Export"},{"location":"cpp-london-2017/README.html#theming","text":"The framework comes with a few different themes included: black: Black background, white text, blue links (default theme) white: White background, black text, blue links league: Gray background, white text, blue links (default theme for reveal.js 3.0.0) beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html: link rel= stylesheet href= css/theme/black.css id= theme If you want to add a theme of your own see the instructions here: /css/theme/README.md .","title":"Theming"},{"location":"cpp-london-2017/README.html#speaker-notes","text":"reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the 's' key on your keyboard to open the notes window. Notes are defined by appending an aside element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown. Alternatively you can add your notes in a data-notes attribute on the slide. Like section data-notes=\"Something important\" /section . When used locally, this feature requires that reveal.js runs from a local web server . section h2 Some Slide /h2 aside class= notes Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit 's' on your keyboard). /aside /section Notes are only visible to you in the speaker view. If you wish to share your notes with the audience initialize reveal.js with the showNotes config value set to true . If you're using the external Markdown plugin, you can add notes with the help of a special delimiter: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: /section # Title ## Sub-title Here is some content... Note: This will only display in the notes window.","title":"Speaker Notes"},{"location":"cpp-london-2017/README.html#server-side-speaker-notes","text":"In some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies: Reveal.initialize({ ... dependencies: [ { src: 'socket.io/socket.io.js', async: true }, { src: 'plugin/notes-server/client.js', async: true } ] }); Then: Install Node.js Run npm install Run node plugin/notes-server","title":"Server Side Speaker Notes"},{"location":"cpp-london-2017/README.html#multiplexing","text":"The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at http://revealjs-51546.onmodulus.net/ . The multiplex plugin needs the following 3 things to operate: Master presentation that has control Client presentations that follow the master Socket.io server to broadcast events from the master to the clients More details:","title":"Multiplexing"},{"location":"cpp-london-2017/README.html#master-presentation","text":"Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation: npm install node-static static If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server. You can then access your master presentation at http://localhost:1947 Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'revealjs-51546.onmodulus.net:80' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, // and if you want speaker notes { src: 'plugin/notes-server/client.js', async: true } // other dependencies... ] });","title":"Master presentation"},{"location":"cpp-london-2017/README.html#client-presentation","text":"Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via http://example.com/path/to/presentation/client/index.html , with the configuration below causing them to connect to the socket.io server as clients. Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'revealjs-51546.onmodulus.net:80' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] });","title":"Client presentation"},{"location":"cpp-london-2017/README.html#socketio-server","text":"Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands: npm install node plugin/multiplex Or you use the socket.io server at http://revealjs-51546.onmodulus.net/ . You'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit http://example.com/token , where http://example.com is the location of your socket.io server. Or if you're going to use the socket.io server at http://revealjs-51546.onmodulus.net/ , visit http://revealjs-51546.onmodulus.net/token . You are very welcome to point your presentations at the Socket.io server running at http://revealjs-51546.onmodulus.net/ , but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. It is simple to deploy to nodejitsu, heroku, your own environment, etc.","title":"Socket.io server"},{"location":"cpp-london-2017/README.html#socketio-server-as-file-static-server","text":"The socket.io server can play the role of static file server for your client presentation, as in the example at http://revealjs-51546.onmodulus.net/ . (Open http://revealjs-51546.onmodulus.net/ in two browsers. Navigate through the slides on one, and the other will update to match.) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open http://revealjs-51546.onmodulus.net/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] });","title":"socket.io server as file static server"},{"location":"cpp-london-2017/README.html#mathjax","text":"If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you'll need to include it as a reveal.js dependency, find our more about dependencies here . The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the mathjax configuration value. Below is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the math config object at all. Reveal.initialize({ // other options ... math: { mathjax: 'https://cdn.mathjax.org/mathjax/latest/MathJax.js', config: 'TeX-AMS_HTML-full' // See http://docs.mathjax.org/en/latest/config-files.html }, dependencies: [ { src: 'plugin/math/math.js', async: true } ] }); Read MathJax's documentation if you need HTTPS delivery or serving of specific versions for stability.","title":"MathJax"},{"location":"cpp-london-2017/README.html#installation","text":"The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source.","title":"Installation"},{"location":"cpp-london-2017/README.html#basic-setup","text":"The core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser. Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases Unzip and replace the example contents in index.html with your own Open index.html in a browser to view it","title":"Basic setup"},{"location":"cpp-london-2017/README.html#full-setup","text":"Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code. Install Node.js Install Grunt Clone the reveal.js repository sh $ git clone https://github.com/hakimel/reveal.js.git Navigate to the reveal.js folder sh $ cd reveal.js Install dependencies sh $ npm install Serve the presentation and monitor source files for changes sh $ grunt serve Open http://localhost:8000 to view your presentation You can change the port by using grunt serve --port 8001 .","title":"Full setup"},{"location":"cpp-london-2017/README.html#folder-structure","text":"css/ Core styles without which the project does not function js/ Like above but for JavaScript plugin/ Components that have been developed as extensions to reveal.js lib/ All other third party assets (JavaScript, CSS, fonts)","title":"Folder Structure"},{"location":"cpp-london-2017/README.html#license","text":"MIT licensed Copyright (C) 2015 Hakim El Hattab, http://hakim.se","title":"License"},{"location":"cpp-london-2017/CONTRIBUTING.html","text":"Contributing Please keep the issue tracker limited to bug reports , feature requests and pull requests . Personal Support If you have personal support or setup questions the best place to ask those are StackOverflow . Bug Reports When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested. Pull Requests Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master) Plugins Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"CONTRIBUTING"},{"location":"cpp-london-2017/CONTRIBUTING.html#contributing","text":"Please keep the issue tracker limited to bug reports , feature requests and pull requests .","title":"Contributing"},{"location":"cpp-london-2017/CONTRIBUTING.html#personal-support","text":"If you have personal support or setup questions the best place to ask those are StackOverflow .","title":"Personal Support"},{"location":"cpp-london-2017/CONTRIBUTING.html#bug-reports","text":"When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested.","title":"Bug Reports"},{"location":"cpp-london-2017/CONTRIBUTING.html#pull-requests","text":"Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master)","title":"Pull Requests"},{"location":"cpp-london-2017/CONTRIBUTING.html#plugins","text":"Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"Plugins"},{"location":"cpp-london-2017/css/theme/README.html","text":"Dependencies Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceding: https://github.com/hakimel/reveal.js#full-setup Creating a Theme To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run grunt css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Home"},{"location":"cpp-london-2017/css/theme/README.html#dependencies","text":"Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceding: https://github.com/hakimel/reveal.js#full-setup","title":"Dependencies"},{"location":"cpp-london-2017/css/theme/README.html#creating-a-theme","text":"To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run grunt css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Creating a Theme"},{"location":"cpp-london-2017/plugin/markdown/example.html","text":"Markdown Demo External 1.1 Content 1.1 Note: This will only appear in the speaker notes window. External 1.2 Content 1.2 External 2 Content 2.1 External 3.1 Content 3.1 External 3.2 Content 3.2","title":"Markdown Demo"},{"location":"cpp-london-2017/plugin/markdown/example.html#markdown-demo","text":"","title":"Markdown Demo"},{"location":"cpp-london-2017/plugin/markdown/example.html#external-11","text":"Content 1.1 Note: This will only appear in the speaker notes window.","title":"External 1.1"},{"location":"cpp-london-2017/plugin/markdown/example.html#external-12","text":"Content 1.2","title":"External 1.2"},{"location":"cpp-london-2017/plugin/markdown/example.html#external-2","text":"Content 2.1","title":"External 2"},{"location":"cpp-london-2017/plugin/markdown/example.html#external-31","text":"Content 3.1","title":"External 3.1"},{"location":"cpp-london-2017/plugin/markdown/example.html#external-32","text":"Content 3.2","title":"External 3.2"},{"location":"cppcon-2018/reveal.js/README.html","text":"reveal.js A framework for easily creating beautiful presentations using HTML. Check out the live demo . reveal.js comes with a broad range of features including nested slides , Markdown contents , PDF export , speaker notes and a JavaScript API . There's also a fully featured visual editor and platform for sharing reveal.js presentations at slides.com . Table of contents Online Editor Instructions Markup Markdown Element Attributes Slide Attributes Configuration Presentation Size Dependencies Ready Event Auto-sliding Keyboard Bindings Touch Navigation Lazy Loading API Slide Changed Event Presentation State Slide States Slide Backgrounds Parallax Background Slide Transitions Internal links Fragments Fragment events Code syntax highlighting Slide number Overview mode Fullscreen mode Embedded media Stretching elements postMessage API PDF Export Theming Speaker Notes Share and Print Speaker Notes Server Side Speaker Notes Multiplexing Master presentation Client presentation Socket.io server MathJax Installation Basic setup Full setup Folder Structure License More reading Changelog : Up-to-date version history. Examples : Presentations created with reveal.js, add your own! Browser Support : Explanation of browser support and fallbacks. Plugins : A list of plugins that can be used to extend reveal.js. Online Editor Presentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at https://slides.com . Instructions Markup Here's a barebones example of a fully working reveal.js presentation: html head link rel= stylesheet href= css/reveal.css link rel= stylesheet href= css/theme/white.css /head body div class= reveal div class= slides section Slide 1 /section section Slide 2 /section /div /div script src= js/reveal.js /script script Reveal.initialize(); /script /body /html The presentation markup hierarchy needs to be .reveal .slides section where the section represents one slide and can be repeated indefinitely. If you place multiple section elements inside of another section they will be shown as vertical slides. The first of the vertical slides is the \"root\" of the others (at the top), and will be included in the horizontal sequence. For example: div class= reveal div class= slides section Single Horizontal Slide /section section section Vertical Slide 1 /section section Vertical Slide 2 /section /section /div /div Markdown It's possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your section elements and wrap the contents in a textarea data-template like the example below. You'll also need to add the plugin/markdown/marked.js and plugin/markdown/markdown.js scripts (in that order) to your HTML file. This is based on data-markdown from Paul Irish modified to use marked to support GitHub Flavored Markdown . Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks). section data-markdown textarea data-template ## Page title A paragraph with some text and a [link](http://hakim.se). /textarea /section External Markdown You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file: the data-separator attribute defines a regular expression for horizontal slides (defaults to ^\\r?\\n---\\r?\\n$ , a newline-bounded horizontal rule) and data-separator-vertical defines vertical slides (disabled by default). The data-separator-notes attribute is a regular expression for specifying the beginning of the current slide's speaker notes (defaults to notes?: , so it will match both \"note:\" and \"notes:\"). The data-charset attribute is optional and specifies which charset to use when loading the external file. When used locally, this feature requires that reveal.js runs from a local web server . The following example customises all available options: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: data-charset= iso-8859-15 !-- Note that Windows uses `\\r\\n` instead of `\\n` as its linefeed character. For a regex that supports all operating systems, use `\\r?\\n` instead of `\\n`. -- /section Element Attributes Special syntax (through HTML comments) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things. section data-markdown script type= text/template - Item 1 !-- .element: class= fragment data-fragment-index= 2 -- - Item 2 !-- .element: class= fragment data-fragment-index= 1 -- /script /section Slide Attributes Special syntax (through HTML comments) is available for adding attributes to the slide section elements generated by your Markdown. section data-markdown script type= text/template !-- .slide: data-background= #ff0000 -- Markdown content /script /section Configuring marked We use marked to parse Markdown. To customise marked's rendering, you can pass in options when configuring Reveal : Reveal.initialize({ // Options which are passed into marked // See https://github.com/chjj/marked#options-1 markdown: { smartypants: true } }); Configuration At the end of your page you need to initialize reveal by running the following code. Note that all configuration values are optional and will default to the values specified below. Reveal.initialize({ // Display presentation control arrows controls: true, // Help the user learn the controls by providing hints, for example by // bouncing the down arrow when they first encounter a vertical slide controlsTutorial: true, // Determines where controls appear, edges or bottom-right controlsLayout: 'bottom-right', // Visibility rule for backwards navigation arrows; faded , hidden // or visible controlsBackArrows: 'faded', // Display a presentation progress bar progress: true, // Display the page number of the current slide slideNumber: false, // Push each slide change to the browser history history: false, // Enable keyboard shortcuts for navigation keyboard: true, // Enable the slide overview mode overview: true, // Vertical centering of slides center: true, // Enables touch navigation on devices with touch input touch: true, // Loop the presentation loop: false, // Change the presentation direction to be RTL rtl: false, // Randomizes the order of slides each time the presentation loads shuffle: false, // Turns fragments on and off globally fragments: true, // Flags whether to include the current fragment in the URL, // so that reloading brings you to the same fragment position fragmentInURL: false, // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded: false, // Flags if we should show a help overlay when the questionmark // key is pressed help: true, // Flags if speaker notes should be visible to all viewers showNotes: false, // Global override for autoplaying embedded media (video/audio/iframe) // - null: Media will only autoplay if data-autoplay is present // - true: All media will autoplay, regardless of individual setting // - false: No media will autoplay, regardless of individual setting autoPlayMedia: null, // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide: 0, // Stop auto-sliding after user input autoSlideStoppable: true, // Use this method for navigation when auto-sliding autoSlideMethod: Reveal.navigateNext, // Specify the average time in seconds that you think you will spend // presenting each slide. This is used to show a pacing timer in the // speaker view defaultTiming: 120, // Enable slide navigation via mouse wheel mouseWheel: false, // Hides the address bar on mobile devices hideAddressBar: true, // Opens links in an iframe preview overlay // Add `data-preview-link` and `data-preview-link= false ` to customise each link // individually previewLinks: false, // Transition style transition: 'slide', // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed: 'default', // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition: 'fade', // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance: 3, // Parallax background image parallaxBackgroundImage: '', // e.g. 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg' // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: null, parallaxBackgroundVertical: null, // The display mode that will be used to show slides display: 'block' }); The configuration can be updated after initialization using the configure method: // Turn autoSlide off Reveal.configure({ autoSlide: 0 }); // Start auto-sliding every 5s Reveal.configure({ autoSlide: 5000 }); Presentation Size All presentations have a normal size, that is, the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport. See below for a list of configuration options related to sizing, including default values: Reveal.initialize({ // ... // The normal size of the presentation, aspect ratio will be preserved // when the presentation is scaled to fit different resolutions. Can be // specified using percentage units. width: 960, height: 700, // Factor of the display size that should remain empty around the content margin: 0.1, // Bounds for smallest/largest possible scale to apply to content minScale: 0.2, maxScale: 1.5 }); If you wish to disable this behavior and do your own scaling (e.g. using media queries), try these settings: Reveal.initialize({ // ... width: 100% , height: 100% , margin: 0, minScale: 1, maxScale: 1 }); Dependencies Reveal.js doesn't rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example: Reveal.initialize({ dependencies: [ // Cross-browser shim that fully implements classList - https://github.com/eligrey/classList.js/ { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } }, // Interpret Markdown in section elements { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, // Syntax highlight for code elements { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, // Zoom in and out with Alt+click { src: 'plugin/zoom-js/zoom.js', async: true }, // Speaker notes { src: 'plugin/notes/notes.js', async: true }, // MathJax { src: 'plugin/math/math.js', async: true } ] }); You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src : Path to the script to load - async : [optional] Flags if the script should load after reveal.js has started, defaults to false - callback : [optional] Function to execute when the script has loaded - condition : [optional] Function which must return true for the script to be loaded To load these dependencies, reveal.js requires head.js (a script loading library) to be loaded before reveal.js. Ready Event A ready event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call Reveal.isReady() . Reveal.addEventListener( 'ready', function( event ) { // event.currentSlide, event.indexh, event.indexv } ); Note that we also add a .ready class to the .reveal element so that you can hook into this with CSS. Auto-sliding Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides: // Slide every five seconds Reveal.configure({ autoSlide: 5000 }); When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing \u00bbA\u00ab on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config. You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute: section data-autoslide= 2000 p After 2 seconds the first fragment will be shown. /p p class= fragment data-autoslide= 10000 After 10 seconds the next fragment will be shown. /p p class= fragment Now, the fragment is displayed for 2 seconds before the next slide is shown. /p /section To override the method used for navigation when auto-sliding, you can specify the autoSlideMethod setting. To only navigate along the top layer and ignore vertical slides, set this to Reveal.navigateRight . Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired. Keyboard Bindings If you're unhappy with any of the default keyboard bindings you can override them using the keyboard config option: Reveal.configure({ keyboard: { 13: 'next', // go to the next slide when the ENTER key is pressed 27: function() {}, // do something custom when ESC is pressed 32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding) } }); Touch Navigation You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js. If there's some part of your content that needs to remain accessible to touch events you'll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled. Lazy Loading When working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option. To enable lazy loading all you need to do is change your src attributes to data-src as shown below. This is supported for image, video, audio and iframe elements. Lazy loaded iframes will also unload when the containing slide is no longer visible. section img data-src= image.png iframe data-src= http://hakim.se /iframe video source data-src= video.webm type= video/webm / source data-src= video.mp4 type= video/mp4 / /video /section API The Reveal object exposes a JavaScript API for controlling navigation and reading state: // Navigation Reveal.slide( indexh, indexv, indexf ); Reveal.left(); Reveal.right(); Reveal.up(); Reveal.down(); Reveal.prev(); Reveal.next(); Reveal.prevFragment(); Reveal.nextFragment(); // Randomize the order of slides Reveal.shuffle(); // Toggle presentation states, optionally pass true/false to force on/off Reveal.toggleOverview(); Reveal.togglePause(); Reveal.toggleAutoSlide(); // Shows a help overlay with keyboard shortcuts, optionally pass true/false // to force on/off Reveal.toggleHelp(); // Change a config value at runtime Reveal.configure({ controls: true }); // Returns the present configuration options Reveal.getConfig(); // Fetch the current scale of the presentation Reveal.getScale(); // Retrieves the previous and current slide elements Reveal.getPreviousSlide(); Reveal.getCurrentSlide(); Reveal.getIndices(); // { h: 0, v: 0, f: 0 } Reveal.getSlidePastCount(); Reveal.getProgress(); // (0 == first slide, 1 == last slide) Reveal.getSlides(); // Array of all slides Reveal.getTotalSlides(); // Total number of slides // Returns the speaker notes for the current slide Reveal.getSlideNotes(); // State checks Reveal.isFirstSlide(); Reveal.isLastSlide(); Reveal.isOverview(); Reveal.isPaused(); Reveal.isAutoSliding(); Custom Key Bindings Custom key bindings can be added and removed using the following Javascript API. Custom key bindings will override the default keyboard bindings, but will in turn be overridden by the user defined bindings in the keyboard config option. Reveal.addKeyBinding( binding, callback ); Reveal.removeKeyBinding( keyCode ); For example // The binding parameter provides the following properties // keyCode: the keycode for binding to the callback // key: the key label to show in the help overlay // description: the description of the action to show in the help overlay Reveal.addKeyBinding( { keyCode: 84, key: 'T', description: 'Start timer' }, function() { // start timer } ) // The binding parameter can also be a direct keycode without providing the help description Reveal.addKeyBinding( 82, function() { // reset timer } ) This allows plugins to add key bindings directly to Reveal so they can make use of Reveal's pre-processing logic for key handling (for example, ignoring key presses when paused); and be included in the help overlay (optional) Slide Changed Event A slidechanged event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes. Some libraries, like MathJax (see #226 ), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'slidechanged', function( event ) { // event.previousSlide, event.currentSlide, event.indexh, event.indexv } ); Presentation State The presentation's current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire. Reveal.slide( 1 ); // we're on slide 1 var state = Reveal.getState(); Reveal.slide( 3 ); // we're on slide 3 Reveal.setState( state ); // we're back on slide 1 Slide States If you set data-state=\"somestate\" on a slide section , \"somestate\" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide. Furthermore you can also listen to these changes in state via JavaScript: Reveal.addEventListener( 'somestate', function() { // TODO: Sprinkle magic }, false ); Slide Backgrounds Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your section elements. Four different types of backgrounds are supported: color, image, video and iframe. Color Backgrounds All CSS color formats are supported, including hex values, keywords, rgba() or hsl() . section data-background-color= #ff0000 h2 Color /h2 /section Image Backgrounds By default, background images are resized to cover the full page. Available options: Attribute Default Description data-background-image URL of the image to show. GIFs restart when the slide opens. data-background-size cover See background-size on MDN. data-background-position center See background-position on MDN. data-background-repeat no-repeat See background-repeat on MDN. data-background-opacity 1 Opacity of the background image on a 0-1 scale. 0 is transparent and 1 is fully opaque. section data-background-image= http://example.com/image.png h2 Image /h2 /section section data-background-image= http://example.com/image.png data-background-size= 100px data-background-repeat= repeat h2 This background image will be sized to 100px and repeated /h2 /section Video Backgrounds Automatically plays a full size video behind the slide. Attribute Default Description data-background-video A single video source, or a comma separated list of video sources. data-background-video-loop false Flags if the video should play repeatedly. data-background-video-muted false Flags if the audio should be muted. data-background-size cover Use cover for full screen and some cropping or contain for letterboxing. data-background-opacity 1 Opacity of the background video on a 0-1 scale. 0 is transparent and 1 is fully opaque. section data-background-video= https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm data-background-video-loop data-background-video-muted h2 Video /h2 /section Iframe Backgrounds Embeds a web page as a slide background that covers 100% of the reveal.js width and height. The iframe is in the background layer, behind your slides, and as such it's not possible to interact with it by default. To make your background interactive, you can add the data-background-interactive attribute. section data-background-iframe= https://slides.com data-background-interactive h2 Iframe /h2 /section Background Transitions Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition. Parallax Background If you want to use a parallax scrolling background, set the first two properties below when initializing reveal.js (the other two are optional). Reveal.initialize({ // Parallax background image parallaxBackgroundImage: '', // e.g. https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px - currently only pixels are supported (don't use % or auto) // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: 200, parallaxBackgroundVertical: 50 }); Make sure that the background size is much bigger than screen size to allow for some scrolling. View example . Slide Transitions The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute: section data-transition= zoom h2 This slide will override the presentation transition and zoom! /h2 /section section data-transition-speed= fast h2 Choose from three transition speeds: default, fast or slow! /h2 /section You can also use different in and out transitions for the same slide: section data-transition= slide The train goes on \u2026 /section section data-transition= slide and on \u2026 /section section data-transition= slide-in fade-out and stops. /section section data-transition= fade-in slide-out (Passengers entering and leaving) /section section data-transition= slide And it starts again. /section You can choose from none , fade , slide , convex , concave and zoom . Internal links It's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute ( section id=\"some-slide\" ): a href= #/2/2 Link /a a href= #/some-slide Link /a You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it's a valid navigation route based on the current slide. a href= # class= navigate-left a href= # class= navigate-right a href= # class= navigate-up a href= # class= navigate-down a href= # class= navigate-prev !-- Previous vertical or horizontal slide -- a href= # class= navigate-next !-- Next vertical or horizontal slide -- Fragments Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here's an example: http://revealjs.com/#/fragments The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment: section p class= fragment grow grow /p p class= fragment shrink shrink /p p class= fragment fade-out fade-out /p p class= fragment fade-up fade-up (also down, left and right!) /p p class= fragment fade-in-then-out fades in, then out when we move to the next step /p p class= fragment fade-in-then-semi-out fades in, then obfuscate when we move to the next step /p p class= fragment highlight-current-blue blue only once /p p class= fragment highlight-red highlight-red /p p class= fragment highlight-green highlight-green /p p class= fragment highlight-blue highlight-blue /p /section Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second. section span class= fragment fade-in span class= fragment fade-out I'll fade in, then out /span /span /section The display order of fragments can be controlled using the data-fragment-index attribute. section p class= fragment data-fragment-index= 3 Appears last /p p class= fragment data-fragment-index= 1 Appears first /p p class= fragment data-fragment-index= 2 Appears second /p /section Fragment events When a slide fragment is either shown or hidden reveal.js will dispatch an event. Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'fragmentshown', function( event ) { // event.fragment = the fragment DOM element } ); Reveal.addEventListener( 'fragmenthidden', function( event ) { // event.fragment = the fragment DOM element } ); Code syntax highlighting By default, Reveal is configured with highlight.js for code syntax highlighting. To enable syntax highlighting, you'll have to load the highlight plugin ( plugin/highlight/highlight.js ) and a highlight.js CSS theme (Reveal comes packaged with the zenburn theme: lib/css/zenburn.css ). Reveal.initialize({ // More info https://github.com/hakimel/reveal.js#dependencies dependencies: [ { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, ] }); Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present, surrounding whitespace is automatically removed. HTML will be escaped by default. To avoid this, for example if you are using mark to call out a line of code, add the data-noescape attribute to the code element. section pre code data-trim data-noescape (def lazy-fib (concat [0 1] mark ((fn rfib [a b] /mark (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) /code /pre /section Slide number If you would like to display the page number of the current slide you can do so using the slideNumber and showSlideNumber configuration values. // Shows the slide number using default formatting Reveal.configure({ slideNumber: true }); // Slide number formatting can be configured using these variables: // h.v : horizontal . vertical slide number (default) // h/v : horizontal / vertical slide number // c : flattened slide number // c/t : flattened slide number / total slides Reveal.configure({ slideNumber: 'c/t' }); // Control which views the slide number displays on using the showSlideNumber value: // all : show on all views (default) // speaker : only show slide numbers on speaker notes view // print : only show slide numbers when printing to PDF Reveal.configure({ showSlideNumber: 'speaker' }); Overview mode Press \u00bbESC\u00ab or \u00bbO\u00ab keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks: Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } ); Reveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal.toggleOverview(); Fullscreen mode Just press \u00bbF\u00ab on your keyboard to show your presentation in fullscreen mode. Press the \u00bbESC\u00ab key to exit fullscreen mode. Embedded media Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown: video data-autoplay src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video If you want to enable or disable autoplay globally, for all embedded media, you can use the autoPlayMedia configuration option. If you set this to true ALL media will autoplay regardless of individual data-autoplay attributes. If you initialize with autoPlayMedia: false NO media will autoplay. Note that embedded HTML5 video / audio and YouTube/Vimeo iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute. Embedded iframes reveal.js automatically pushes two post messages to embedded iframes. slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden. Stretching elements Sometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below: section h2 This video will use up the remaining space on the slide /h2 video class= stretch src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video /section Limitations: - Only direct descendants of a slide section can be stretched - Only one descendant per slide section can be stretched postMessage API The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2: window .postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' ); When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window: window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); if( data.namespace === 'reveal' data.eventName ==='slidechanged' ) { // Slide changed, see data.state for slide number } } ); This cross-window messaging can be toggled on or off using configuration flags. Reveal.initialize({ // ... // Exposes the reveal.js API through window.postMessage postMessage: true, // Dispatches all reveal.js events to the parent window through postMessage postMessageEvents: false }); PDF Export Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium and to be serving the presentation from a webserver. Here's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300. Separate pages for fragments Fragments are printed on separate slides by default. Meaning if you have a slide with three fragment steps, it will generate three separate slides where the fragments appear incrementally. If you prefer printing all fragments in their visible states on the same slide you can set the pdfSeparateFragments config option to false. Page size Export dimensions are inferred from the configured presentation size . Slides that are too tall to fit within a single page will expand onto multiple pages. You can limit how many pages a slide may expand onto using the pdfMaxPagesPerSlide config option, for example Reveal.configure({ pdfMaxPagesPerSlide: 1 }) ensures that no slide ever grows to more than one printed page. Print stylesheet To enable the PDF print capability in your presentation, the special print stylesheet at /css/print/pdf.css must be loaded. The default index.html file handles this for you when print-pdf is included in the query string. If you're using a different HTML template, you can add this to your HEAD: script var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); /script Instructions Open your presentation with print-pdf included in the query string i.e. http://localhost:8000/?print-pdf. You can test this with revealjs.com?print-pdf . If you want to include speaker notes in your export, you can append showNotes=true to the query string: http://localhost:8000/?print-pdf showNotes=true Open the in-browser print dialog (CTRL/CMD+P). Change the Destination setting to Save as PDF . Change the Layout to Landscape . Change the Margins to None . Enable the Background graphics option. Click Save . Alternatively you can use the decktape project. Theming The framework comes with a few different themes included: black: Black background, white text, blue links (default theme) white: White background, black text, blue links league: Gray background, white text, blue links (default theme for reveal.js 3.0.0) beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html: link rel= stylesheet href= css/theme/black.css id= theme If you want to add a theme of your own see the instructions here: /css/theme/README.md . Speaker Notes reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the \u00bbS\u00ab key on your keyboard to open the notes window. A speaker timer starts as soon as the speaker view is opened. You can reset it to 00:00:00 at any time by simply clicking/tapping on it. Notes are defined by appending an aside element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown. Alternatively you can add your notes in a data-notes attribute on the slide. Like section data-notes=\"Something important\" /section . When used locally, this feature requires that reveal.js runs from a local web server . section h2 Some Slide /h2 aside class= notes Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit \u00bbS\u00ab on your keyboard). /aside /section If you're using the external Markdown plugin, you can add notes with the help of a special delimiter: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: /section # Title ## Sub-title Here is some content... Note: This will only display in the notes window. Share and Print Speaker Notes Notes are only visible to the speaker inside of the speaker view. If you wish to share your notes with others you can initialize reveal.js with the showNotes configuration value set to true . Notes will appear along the bottom of the presentations. When showNotes is enabled notes are also included when you export to PDF . By default, notes are printed in a semi-transparent box on top of the slide. If you'd rather print them on a separate page after the slide, set showNotes: \"separate-page\" . Speaker notes clock and timers The speaker notes window will also show: Time elapsed since the beginning of the presentation. If you hover the mouse above this section, a timer reset button will appear. Current wall-clock time (Optionally) a pacing timer which indicates whether the current pace of the presentation is on track for the right timing (shown in green), and if not, whether the presenter should speed up (shown in red) or has the luxury of slowing down (blue). The pacing timer can be enabled by configuring by the defaultTiming parameter in the Reveal configuration block, which specifies the number of seconds per slide. 120 can be a reasonable rule of thumb. Timings can also be given per slide section by setting the data-timing attribute. Both values are in numbers of seconds. Server Side Speaker Notes In some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies: Reveal.initialize({ // ... dependencies: [ { src: 'socket.io/socket.io.js', async: true }, { src: 'plugin/notes-server/client.js', async: true } ] }); Then: Install Node.js (4.0.0 or later) Run npm install Run node plugin/notes-server Multiplexing The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . The multiplex plugin needs the following 3 things to operate: Master presentation that has control Client presentations that follow the master Socket.io server to broadcast events from the master to the clients Master presentation Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation: npm install node-static static If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server. You can then access your master presentation at http://localhost:1947 Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, // and if you want speaker notes { src: 'plugin/notes-server/client.js', async: true } // other dependencies... ] }); Client presentation Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via http://example.com/path/to/presentation/client/index.html , with the configuration below causing them to connect to the socket.io server as clients. Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] }); Socket.io server Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands: npm install node plugin/multiplex Or you can use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . You'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit http://example.com/token , where http://example.com is the location of your socket.io server. Or if you're going to use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , visit https://reveal-js-multiplex-ccjbegmaii.now.sh/token . You are very welcome to point your presentations at the Socket.io server running at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. The easiest way to do this is by installing now . With that installed, deploying your own Multiplex server is as easy running the following command from the reveal.js folder: now plugin/multiplex . socket.io server as file static server The socket.io server can play the role of static file server for your client presentation, as in the example at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match.) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] }); MathJax If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you'll need to include it as a reveal.js dependency, find our more about dependencies here . The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the mathjax configuration value. Below is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the math config object at all. Reveal.initialize({ // other options ... math: { mathjax: 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js', config: 'TeX-AMS_HTML-full' // See http://docs.mathjax.org/en/latest/config-files.html }, dependencies: [ { src: 'plugin/math/math.js', async: true } ] }); Read MathJax's documentation if you need HTTPS delivery or serving of specific versions for stability. Installation The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source. Basic setup The core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser. Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases Unzip and replace the example contents in index.html with your own Open index.html in a browser to view it Full setup Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code. Install Node.js (4.0.0 or later) Clone the reveal.js repository sh $ git clone https://github.com/hakimel/reveal.js.git Navigate to the reveal.js folder sh $ cd reveal.js Install dependencies sh $ npm install Serve the presentation and monitor source files for changes sh $ npm start Open http://localhost:8000 to view your presentation You can change the port by using npm start -- --port=8001 . Folder Structure css/ Core styles without which the project does not function js/ Like above but for JavaScript plugin/ Components that have been developed as extensions to reveal.js lib/ All other third party assets (JavaScript, CSS, fonts) License MIT licensed Copyright (C) 2018 Hakim El Hattab, http://hakim.se","title":"reveal.js [![Build Status](https://travis-ci.org/hakimel/reveal.js.svg?branch=master)](https://travis-ci.org/hakimel/reveal.js) <a href=\"https://slides.com?ref=github\"><img src=\"https://s3.amazonaws.com/static.slid.es/images/slides-github-banner-320x40.png?1\" alt=\"Slides\" width=\"160\" height=\"20\"></a>"},{"location":"cppcon-2018/reveal.js/README.html#revealjs","text":"A framework for easily creating beautiful presentations using HTML. Check out the live demo . reveal.js comes with a broad range of features including nested slides , Markdown contents , PDF export , speaker notes and a JavaScript API . There's also a fully featured visual editor and platform for sharing reveal.js presentations at slides.com .","title":"reveal.js  "},{"location":"cppcon-2018/reveal.js/README.html#table-of-contents","text":"Online Editor Instructions Markup Markdown Element Attributes Slide Attributes Configuration Presentation Size Dependencies Ready Event Auto-sliding Keyboard Bindings Touch Navigation Lazy Loading API Slide Changed Event Presentation State Slide States Slide Backgrounds Parallax Background Slide Transitions Internal links Fragments Fragment events Code syntax highlighting Slide number Overview mode Fullscreen mode Embedded media Stretching elements postMessage API PDF Export Theming Speaker Notes Share and Print Speaker Notes Server Side Speaker Notes Multiplexing Master presentation Client presentation Socket.io server MathJax Installation Basic setup Full setup Folder Structure License","title":"Table of contents"},{"location":"cppcon-2018/reveal.js/README.html#more-reading","text":"Changelog : Up-to-date version history. Examples : Presentations created with reveal.js, add your own! Browser Support : Explanation of browser support and fallbacks. Plugins : A list of plugins that can be used to extend reveal.js.","title":"More reading"},{"location":"cppcon-2018/reveal.js/README.html#online-editor","text":"Presentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at https://slides.com .","title":"Online Editor"},{"location":"cppcon-2018/reveal.js/README.html#instructions","text":"","title":"Instructions"},{"location":"cppcon-2018/reveal.js/README.html#markup","text":"Here's a barebones example of a fully working reveal.js presentation: html head link rel= stylesheet href= css/reveal.css link rel= stylesheet href= css/theme/white.css /head body div class= reveal div class= slides section Slide 1 /section section Slide 2 /section /div /div script src= js/reveal.js /script script Reveal.initialize(); /script /body /html The presentation markup hierarchy needs to be .reveal .slides section where the section represents one slide and can be repeated indefinitely. If you place multiple section elements inside of another section they will be shown as vertical slides. The first of the vertical slides is the \"root\" of the others (at the top), and will be included in the horizontal sequence. For example: div class= reveal div class= slides section Single Horizontal Slide /section section section Vertical Slide 1 /section section Vertical Slide 2 /section /section /div /div","title":"Markup"},{"location":"cppcon-2018/reveal.js/README.html#markdown","text":"It's possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your section elements and wrap the contents in a textarea data-template like the example below. You'll also need to add the plugin/markdown/marked.js and plugin/markdown/markdown.js scripts (in that order) to your HTML file. This is based on data-markdown from Paul Irish modified to use marked to support GitHub Flavored Markdown . Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks). section data-markdown textarea data-template ## Page title A paragraph with some text and a [link](http://hakim.se). /textarea /section","title":"Markdown"},{"location":"cppcon-2018/reveal.js/README.html#external-markdown","text":"You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file: the data-separator attribute defines a regular expression for horizontal slides (defaults to ^\\r?\\n---\\r?\\n$ , a newline-bounded horizontal rule) and data-separator-vertical defines vertical slides (disabled by default). The data-separator-notes attribute is a regular expression for specifying the beginning of the current slide's speaker notes (defaults to notes?: , so it will match both \"note:\" and \"notes:\"). The data-charset attribute is optional and specifies which charset to use when loading the external file. When used locally, this feature requires that reveal.js runs from a local web server . The following example customises all available options: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: data-charset= iso-8859-15 !-- Note that Windows uses `\\r\\n` instead of `\\n` as its linefeed character. For a regex that supports all operating systems, use `\\r?\\n` instead of `\\n`. -- /section","title":"External Markdown"},{"location":"cppcon-2018/reveal.js/README.html#element-attributes","text":"Special syntax (through HTML comments) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things. section data-markdown script type= text/template - Item 1 !-- .element: class= fragment data-fragment-index= 2 -- - Item 2 !-- .element: class= fragment data-fragment-index= 1 -- /script /section","title":"Element Attributes"},{"location":"cppcon-2018/reveal.js/README.html#slide-attributes","text":"Special syntax (through HTML comments) is available for adding attributes to the slide section elements generated by your Markdown. section data-markdown script type= text/template !-- .slide: data-background= #ff0000 -- Markdown content /script /section","title":"Slide Attributes"},{"location":"cppcon-2018/reveal.js/README.html#configuring-marked","text":"We use marked to parse Markdown. To customise marked's rendering, you can pass in options when configuring Reveal : Reveal.initialize({ // Options which are passed into marked // See https://github.com/chjj/marked#options-1 markdown: { smartypants: true } });","title":"Configuring marked"},{"location":"cppcon-2018/reveal.js/README.html#configuration","text":"At the end of your page you need to initialize reveal by running the following code. Note that all configuration values are optional and will default to the values specified below. Reveal.initialize({ // Display presentation control arrows controls: true, // Help the user learn the controls by providing hints, for example by // bouncing the down arrow when they first encounter a vertical slide controlsTutorial: true, // Determines where controls appear, edges or bottom-right controlsLayout: 'bottom-right', // Visibility rule for backwards navigation arrows; faded , hidden // or visible controlsBackArrows: 'faded', // Display a presentation progress bar progress: true, // Display the page number of the current slide slideNumber: false, // Push each slide change to the browser history history: false, // Enable keyboard shortcuts for navigation keyboard: true, // Enable the slide overview mode overview: true, // Vertical centering of slides center: true, // Enables touch navigation on devices with touch input touch: true, // Loop the presentation loop: false, // Change the presentation direction to be RTL rtl: false, // Randomizes the order of slides each time the presentation loads shuffle: false, // Turns fragments on and off globally fragments: true, // Flags whether to include the current fragment in the URL, // so that reloading brings you to the same fragment position fragmentInURL: false, // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded: false, // Flags if we should show a help overlay when the questionmark // key is pressed help: true, // Flags if speaker notes should be visible to all viewers showNotes: false, // Global override for autoplaying embedded media (video/audio/iframe) // - null: Media will only autoplay if data-autoplay is present // - true: All media will autoplay, regardless of individual setting // - false: No media will autoplay, regardless of individual setting autoPlayMedia: null, // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide: 0, // Stop auto-sliding after user input autoSlideStoppable: true, // Use this method for navigation when auto-sliding autoSlideMethod: Reveal.navigateNext, // Specify the average time in seconds that you think you will spend // presenting each slide. This is used to show a pacing timer in the // speaker view defaultTiming: 120, // Enable slide navigation via mouse wheel mouseWheel: false, // Hides the address bar on mobile devices hideAddressBar: true, // Opens links in an iframe preview overlay // Add `data-preview-link` and `data-preview-link= false ` to customise each link // individually previewLinks: false, // Transition style transition: 'slide', // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed: 'default', // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition: 'fade', // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance: 3, // Parallax background image parallaxBackgroundImage: '', // e.g. 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg' // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: null, parallaxBackgroundVertical: null, // The display mode that will be used to show slides display: 'block' }); The configuration can be updated after initialization using the configure method: // Turn autoSlide off Reveal.configure({ autoSlide: 0 }); // Start auto-sliding every 5s Reveal.configure({ autoSlide: 5000 });","title":"Configuration"},{"location":"cppcon-2018/reveal.js/README.html#presentation-size","text":"All presentations have a normal size, that is, the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport. See below for a list of configuration options related to sizing, including default values: Reveal.initialize({ // ... // The normal size of the presentation, aspect ratio will be preserved // when the presentation is scaled to fit different resolutions. Can be // specified using percentage units. width: 960, height: 700, // Factor of the display size that should remain empty around the content margin: 0.1, // Bounds for smallest/largest possible scale to apply to content minScale: 0.2, maxScale: 1.5 }); If you wish to disable this behavior and do your own scaling (e.g. using media queries), try these settings: Reveal.initialize({ // ... width: 100% , height: 100% , margin: 0, minScale: 1, maxScale: 1 });","title":"Presentation Size"},{"location":"cppcon-2018/reveal.js/README.html#dependencies","text":"Reveal.js doesn't rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example: Reveal.initialize({ dependencies: [ // Cross-browser shim that fully implements classList - https://github.com/eligrey/classList.js/ { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } }, // Interpret Markdown in section elements { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, // Syntax highlight for code elements { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, // Zoom in and out with Alt+click { src: 'plugin/zoom-js/zoom.js', async: true }, // Speaker notes { src: 'plugin/notes/notes.js', async: true }, // MathJax { src: 'plugin/math/math.js', async: true } ] }); You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src : Path to the script to load - async : [optional] Flags if the script should load after reveal.js has started, defaults to false - callback : [optional] Function to execute when the script has loaded - condition : [optional] Function which must return true for the script to be loaded To load these dependencies, reveal.js requires head.js (a script loading library) to be loaded before reveal.js.","title":"Dependencies"},{"location":"cppcon-2018/reveal.js/README.html#ready-event","text":"A ready event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call Reveal.isReady() . Reveal.addEventListener( 'ready', function( event ) { // event.currentSlide, event.indexh, event.indexv } ); Note that we also add a .ready class to the .reveal element so that you can hook into this with CSS.","title":"Ready Event"},{"location":"cppcon-2018/reveal.js/README.html#auto-sliding","text":"Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides: // Slide every five seconds Reveal.configure({ autoSlide: 5000 }); When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing \u00bbA\u00ab on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config. You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute: section data-autoslide= 2000 p After 2 seconds the first fragment will be shown. /p p class= fragment data-autoslide= 10000 After 10 seconds the next fragment will be shown. /p p class= fragment Now, the fragment is displayed for 2 seconds before the next slide is shown. /p /section To override the method used for navigation when auto-sliding, you can specify the autoSlideMethod setting. To only navigate along the top layer and ignore vertical slides, set this to Reveal.navigateRight . Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired.","title":"Auto-sliding"},{"location":"cppcon-2018/reveal.js/README.html#keyboard-bindings","text":"If you're unhappy with any of the default keyboard bindings you can override them using the keyboard config option: Reveal.configure({ keyboard: { 13: 'next', // go to the next slide when the ENTER key is pressed 27: function() {}, // do something custom when ESC is pressed 32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding) } });","title":"Keyboard Bindings"},{"location":"cppcon-2018/reveal.js/README.html#touch-navigation","text":"You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js. If there's some part of your content that needs to remain accessible to touch events you'll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled.","title":"Touch Navigation"},{"location":"cppcon-2018/reveal.js/README.html#lazy-loading","text":"When working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option. To enable lazy loading all you need to do is change your src attributes to data-src as shown below. This is supported for image, video, audio and iframe elements. Lazy loaded iframes will also unload when the containing slide is no longer visible. section img data-src= image.png iframe data-src= http://hakim.se /iframe video source data-src= video.webm type= video/webm / source data-src= video.mp4 type= video/mp4 / /video /section","title":"Lazy Loading"},{"location":"cppcon-2018/reveal.js/README.html#api","text":"The Reveal object exposes a JavaScript API for controlling navigation and reading state: // Navigation Reveal.slide( indexh, indexv, indexf ); Reveal.left(); Reveal.right(); Reveal.up(); Reveal.down(); Reveal.prev(); Reveal.next(); Reveal.prevFragment(); Reveal.nextFragment(); // Randomize the order of slides Reveal.shuffle(); // Toggle presentation states, optionally pass true/false to force on/off Reveal.toggleOverview(); Reveal.togglePause(); Reveal.toggleAutoSlide(); // Shows a help overlay with keyboard shortcuts, optionally pass true/false // to force on/off Reveal.toggleHelp(); // Change a config value at runtime Reveal.configure({ controls: true }); // Returns the present configuration options Reveal.getConfig(); // Fetch the current scale of the presentation Reveal.getScale(); // Retrieves the previous and current slide elements Reveal.getPreviousSlide(); Reveal.getCurrentSlide(); Reveal.getIndices(); // { h: 0, v: 0, f: 0 } Reveal.getSlidePastCount(); Reveal.getProgress(); // (0 == first slide, 1 == last slide) Reveal.getSlides(); // Array of all slides Reveal.getTotalSlides(); // Total number of slides // Returns the speaker notes for the current slide Reveal.getSlideNotes(); // State checks Reveal.isFirstSlide(); Reveal.isLastSlide(); Reveal.isOverview(); Reveal.isPaused(); Reveal.isAutoSliding();","title":"API"},{"location":"cppcon-2018/reveal.js/README.html#custom-key-bindings","text":"Custom key bindings can be added and removed using the following Javascript API. Custom key bindings will override the default keyboard bindings, but will in turn be overridden by the user defined bindings in the keyboard config option. Reveal.addKeyBinding( binding, callback ); Reveal.removeKeyBinding( keyCode ); For example // The binding parameter provides the following properties // keyCode: the keycode for binding to the callback // key: the key label to show in the help overlay // description: the description of the action to show in the help overlay Reveal.addKeyBinding( { keyCode: 84, key: 'T', description: 'Start timer' }, function() { // start timer } ) // The binding parameter can also be a direct keycode without providing the help description Reveal.addKeyBinding( 82, function() { // reset timer } ) This allows plugins to add key bindings directly to Reveal so they can make use of Reveal's pre-processing logic for key handling (for example, ignoring key presses when paused); and be included in the help overlay (optional)","title":"Custom Key Bindings"},{"location":"cppcon-2018/reveal.js/README.html#slide-changed-event","text":"A slidechanged event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes. Some libraries, like MathJax (see #226 ), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'slidechanged', function( event ) { // event.previousSlide, event.currentSlide, event.indexh, event.indexv } );","title":"Slide Changed Event"},{"location":"cppcon-2018/reveal.js/README.html#presentation-state","text":"The presentation's current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire. Reveal.slide( 1 ); // we're on slide 1 var state = Reveal.getState(); Reveal.slide( 3 ); // we're on slide 3 Reveal.setState( state ); // we're back on slide 1","title":"Presentation State"},{"location":"cppcon-2018/reveal.js/README.html#slide-states","text":"If you set data-state=\"somestate\" on a slide section , \"somestate\" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide. Furthermore you can also listen to these changes in state via JavaScript: Reveal.addEventListener( 'somestate', function() { // TODO: Sprinkle magic }, false );","title":"Slide States"},{"location":"cppcon-2018/reveal.js/README.html#slide-backgrounds","text":"Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your section elements. Four different types of backgrounds are supported: color, image, video and iframe.","title":"Slide Backgrounds"},{"location":"cppcon-2018/reveal.js/README.html#color-backgrounds","text":"All CSS color formats are supported, including hex values, keywords, rgba() or hsl() . section data-background-color= #ff0000 h2 Color /h2 /section","title":"Color Backgrounds"},{"location":"cppcon-2018/reveal.js/README.html#image-backgrounds","text":"By default, background images are resized to cover the full page. Available options: Attribute Default Description data-background-image URL of the image to show. GIFs restart when the slide opens. data-background-size cover See background-size on MDN. data-background-position center See background-position on MDN. data-background-repeat no-repeat See background-repeat on MDN. data-background-opacity 1 Opacity of the background image on a 0-1 scale. 0 is transparent and 1 is fully opaque. section data-background-image= http://example.com/image.png h2 Image /h2 /section section data-background-image= http://example.com/image.png data-background-size= 100px data-background-repeat= repeat h2 This background image will be sized to 100px and repeated /h2 /section","title":"Image Backgrounds"},{"location":"cppcon-2018/reveal.js/README.html#video-backgrounds","text":"Automatically plays a full size video behind the slide. Attribute Default Description data-background-video A single video source, or a comma separated list of video sources. data-background-video-loop false Flags if the video should play repeatedly. data-background-video-muted false Flags if the audio should be muted. data-background-size cover Use cover for full screen and some cropping or contain for letterboxing. data-background-opacity 1 Opacity of the background video on a 0-1 scale. 0 is transparent and 1 is fully opaque. section data-background-video= https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm data-background-video-loop data-background-video-muted h2 Video /h2 /section","title":"Video Backgrounds"},{"location":"cppcon-2018/reveal.js/README.html#iframe-backgrounds","text":"Embeds a web page as a slide background that covers 100% of the reveal.js width and height. The iframe is in the background layer, behind your slides, and as such it's not possible to interact with it by default. To make your background interactive, you can add the data-background-interactive attribute. section data-background-iframe= https://slides.com data-background-interactive h2 Iframe /h2 /section","title":"Iframe Backgrounds"},{"location":"cppcon-2018/reveal.js/README.html#background-transitions","text":"Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition.","title":"Background Transitions"},{"location":"cppcon-2018/reveal.js/README.html#parallax-background","text":"If you want to use a parallax scrolling background, set the first two properties below when initializing reveal.js (the other two are optional). Reveal.initialize({ // Parallax background image parallaxBackgroundImage: '', // e.g. https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px - currently only pixels are supported (don't use % or auto) // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: 200, parallaxBackgroundVertical: 50 }); Make sure that the background size is much bigger than screen size to allow for some scrolling. View example .","title":"Parallax Background"},{"location":"cppcon-2018/reveal.js/README.html#slide-transitions","text":"The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute: section data-transition= zoom h2 This slide will override the presentation transition and zoom! /h2 /section section data-transition-speed= fast h2 Choose from three transition speeds: default, fast or slow! /h2 /section You can also use different in and out transitions for the same slide: section data-transition= slide The train goes on \u2026 /section section data-transition= slide and on \u2026 /section section data-transition= slide-in fade-out and stops. /section section data-transition= fade-in slide-out (Passengers entering and leaving) /section section data-transition= slide And it starts again. /section You can choose from none , fade , slide , convex , concave and zoom .","title":"Slide Transitions"},{"location":"cppcon-2018/reveal.js/README.html#internal-links","text":"It's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute ( section id=\"some-slide\" ): a href= #/2/2 Link /a a href= #/some-slide Link /a You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it's a valid navigation route based on the current slide. a href= # class= navigate-left a href= # class= navigate-right a href= # class= navigate-up a href= # class= navigate-down a href= # class= navigate-prev !-- Previous vertical or horizontal slide -- a href= # class= navigate-next !-- Next vertical or horizontal slide --","title":"Internal links"},{"location":"cppcon-2018/reveal.js/README.html#fragments","text":"Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here's an example: http://revealjs.com/#/fragments The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment: section p class= fragment grow grow /p p class= fragment shrink shrink /p p class= fragment fade-out fade-out /p p class= fragment fade-up fade-up (also down, left and right!) /p p class= fragment fade-in-then-out fades in, then out when we move to the next step /p p class= fragment fade-in-then-semi-out fades in, then obfuscate when we move to the next step /p p class= fragment highlight-current-blue blue only once /p p class= fragment highlight-red highlight-red /p p class= fragment highlight-green highlight-green /p p class= fragment highlight-blue highlight-blue /p /section Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second. section span class= fragment fade-in span class= fragment fade-out I'll fade in, then out /span /span /section The display order of fragments can be controlled using the data-fragment-index attribute. section p class= fragment data-fragment-index= 3 Appears last /p p class= fragment data-fragment-index= 1 Appears first /p p class= fragment data-fragment-index= 2 Appears second /p /section","title":"Fragments"},{"location":"cppcon-2018/reveal.js/README.html#fragment-events","text":"When a slide fragment is either shown or hidden reveal.js will dispatch an event. Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'fragmentshown', function( event ) { // event.fragment = the fragment DOM element } ); Reveal.addEventListener( 'fragmenthidden', function( event ) { // event.fragment = the fragment DOM element } );","title":"Fragment events"},{"location":"cppcon-2018/reveal.js/README.html#code-syntax-highlighting","text":"By default, Reveal is configured with highlight.js for code syntax highlighting. To enable syntax highlighting, you'll have to load the highlight plugin ( plugin/highlight/highlight.js ) and a highlight.js CSS theme (Reveal comes packaged with the zenburn theme: lib/css/zenburn.css ). Reveal.initialize({ // More info https://github.com/hakimel/reveal.js#dependencies dependencies: [ { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, ] }); Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present, surrounding whitespace is automatically removed. HTML will be escaped by default. To avoid this, for example if you are using mark to call out a line of code, add the data-noescape attribute to the code element. section pre code data-trim data-noescape (def lazy-fib (concat [0 1] mark ((fn rfib [a b] /mark (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) /code /pre /section","title":"Code syntax highlighting"},{"location":"cppcon-2018/reveal.js/README.html#slide-number","text":"If you would like to display the page number of the current slide you can do so using the slideNumber and showSlideNumber configuration values. // Shows the slide number using default formatting Reveal.configure({ slideNumber: true }); // Slide number formatting can be configured using these variables: // h.v : horizontal . vertical slide number (default) // h/v : horizontal / vertical slide number // c : flattened slide number // c/t : flattened slide number / total slides Reveal.configure({ slideNumber: 'c/t' }); // Control which views the slide number displays on using the showSlideNumber value: // all : show on all views (default) // speaker : only show slide numbers on speaker notes view // print : only show slide numbers when printing to PDF Reveal.configure({ showSlideNumber: 'speaker' });","title":"Slide number"},{"location":"cppcon-2018/reveal.js/README.html#overview-mode","text":"Press \u00bbESC\u00ab or \u00bbO\u00ab keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks: Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } ); Reveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal.toggleOverview();","title":"Overview mode"},{"location":"cppcon-2018/reveal.js/README.html#fullscreen-mode","text":"Just press \u00bbF\u00ab on your keyboard to show your presentation in fullscreen mode. Press the \u00bbESC\u00ab key to exit fullscreen mode.","title":"Fullscreen mode"},{"location":"cppcon-2018/reveal.js/README.html#embedded-media","text":"Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown: video data-autoplay src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video If you want to enable or disable autoplay globally, for all embedded media, you can use the autoPlayMedia configuration option. If you set this to true ALL media will autoplay regardless of individual data-autoplay attributes. If you initialize with autoPlayMedia: false NO media will autoplay. Note that embedded HTML5 video / audio and YouTube/Vimeo iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute.","title":"Embedded media"},{"location":"cppcon-2018/reveal.js/README.html#embedded-iframes","text":"reveal.js automatically pushes two post messages to embedded iframes. slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden.","title":"Embedded iframes"},{"location":"cppcon-2018/reveal.js/README.html#stretching-elements","text":"Sometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below: section h2 This video will use up the remaining space on the slide /h2 video class= stretch src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video /section Limitations: - Only direct descendants of a slide section can be stretched - Only one descendant per slide section can be stretched","title":"Stretching elements"},{"location":"cppcon-2018/reveal.js/README.html#postmessage-api","text":"The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2: window .postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' ); When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window: window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); if( data.namespace === 'reveal' data.eventName ==='slidechanged' ) { // Slide changed, see data.state for slide number } } ); This cross-window messaging can be toggled on or off using configuration flags. Reveal.initialize({ // ... // Exposes the reveal.js API through window.postMessage postMessage: true, // Dispatches all reveal.js events to the parent window through postMessage postMessageEvents: false });","title":"postMessage API"},{"location":"cppcon-2018/reveal.js/README.html#pdf-export","text":"Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium and to be serving the presentation from a webserver. Here's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300.","title":"PDF Export"},{"location":"cppcon-2018/reveal.js/README.html#separate-pages-for-fragments","text":"Fragments are printed on separate slides by default. Meaning if you have a slide with three fragment steps, it will generate three separate slides where the fragments appear incrementally. If you prefer printing all fragments in their visible states on the same slide you can set the pdfSeparateFragments config option to false.","title":"Separate pages for fragments"},{"location":"cppcon-2018/reveal.js/README.html#page-size","text":"Export dimensions are inferred from the configured presentation size . Slides that are too tall to fit within a single page will expand onto multiple pages. You can limit how many pages a slide may expand onto using the pdfMaxPagesPerSlide config option, for example Reveal.configure({ pdfMaxPagesPerSlide: 1 }) ensures that no slide ever grows to more than one printed page.","title":"Page size"},{"location":"cppcon-2018/reveal.js/README.html#print-stylesheet","text":"To enable the PDF print capability in your presentation, the special print stylesheet at /css/print/pdf.css must be loaded. The default index.html file handles this for you when print-pdf is included in the query string. If you're using a different HTML template, you can add this to your HEAD: script var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); /script","title":"Print stylesheet"},{"location":"cppcon-2018/reveal.js/README.html#instructions_1","text":"Open your presentation with print-pdf included in the query string i.e. http://localhost:8000/?print-pdf. You can test this with revealjs.com?print-pdf . If you want to include speaker notes in your export, you can append showNotes=true to the query string: http://localhost:8000/?print-pdf showNotes=true Open the in-browser print dialog (CTRL/CMD+P). Change the Destination setting to Save as PDF . Change the Layout to Landscape . Change the Margins to None . Enable the Background graphics option. Click Save . Alternatively you can use the decktape project.","title":"Instructions"},{"location":"cppcon-2018/reveal.js/README.html#theming","text":"The framework comes with a few different themes included: black: Black background, white text, blue links (default theme) white: White background, black text, blue links league: Gray background, white text, blue links (default theme for reveal.js 3.0.0) beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html: link rel= stylesheet href= css/theme/black.css id= theme If you want to add a theme of your own see the instructions here: /css/theme/README.md .","title":"Theming"},{"location":"cppcon-2018/reveal.js/README.html#speaker-notes","text":"reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the \u00bbS\u00ab key on your keyboard to open the notes window. A speaker timer starts as soon as the speaker view is opened. You can reset it to 00:00:00 at any time by simply clicking/tapping on it. Notes are defined by appending an aside element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown. Alternatively you can add your notes in a data-notes attribute on the slide. Like section data-notes=\"Something important\" /section . When used locally, this feature requires that reveal.js runs from a local web server . section h2 Some Slide /h2 aside class= notes Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit \u00bbS\u00ab on your keyboard). /aside /section If you're using the external Markdown plugin, you can add notes with the help of a special delimiter: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: /section # Title ## Sub-title Here is some content... Note: This will only display in the notes window.","title":"Speaker Notes"},{"location":"cppcon-2018/reveal.js/README.html#share-and-print-speaker-notes","text":"Notes are only visible to the speaker inside of the speaker view. If you wish to share your notes with others you can initialize reveal.js with the showNotes configuration value set to true . Notes will appear along the bottom of the presentations. When showNotes is enabled notes are also included when you export to PDF . By default, notes are printed in a semi-transparent box on top of the slide. If you'd rather print them on a separate page after the slide, set showNotes: \"separate-page\" .","title":"Share and Print Speaker Notes"},{"location":"cppcon-2018/reveal.js/README.html#speaker-notes-clock-and-timers","text":"The speaker notes window will also show: Time elapsed since the beginning of the presentation. If you hover the mouse above this section, a timer reset button will appear. Current wall-clock time (Optionally) a pacing timer which indicates whether the current pace of the presentation is on track for the right timing (shown in green), and if not, whether the presenter should speed up (shown in red) or has the luxury of slowing down (blue). The pacing timer can be enabled by configuring by the defaultTiming parameter in the Reveal configuration block, which specifies the number of seconds per slide. 120 can be a reasonable rule of thumb. Timings can also be given per slide section by setting the data-timing attribute. Both values are in numbers of seconds.","title":"Speaker notes clock and timers"},{"location":"cppcon-2018/reveal.js/README.html#server-side-speaker-notes","text":"In some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies: Reveal.initialize({ // ... dependencies: [ { src: 'socket.io/socket.io.js', async: true }, { src: 'plugin/notes-server/client.js', async: true } ] }); Then: Install Node.js (4.0.0 or later) Run npm install Run node plugin/notes-server","title":"Server Side Speaker Notes"},{"location":"cppcon-2018/reveal.js/README.html#multiplexing","text":"The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . The multiplex plugin needs the following 3 things to operate: Master presentation that has control Client presentations that follow the master Socket.io server to broadcast events from the master to the clients","title":"Multiplexing"},{"location":"cppcon-2018/reveal.js/README.html#master-presentation","text":"Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation: npm install node-static static If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server. You can then access your master presentation at http://localhost:1947 Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, // and if you want speaker notes { src: 'plugin/notes-server/client.js', async: true } // other dependencies... ] });","title":"Master presentation"},{"location":"cppcon-2018/reveal.js/README.html#client-presentation","text":"Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via http://example.com/path/to/presentation/client/index.html , with the configuration below causing them to connect to the socket.io server as clients. Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] });","title":"Client presentation"},{"location":"cppcon-2018/reveal.js/README.html#socketio-server","text":"Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands: npm install node plugin/multiplex Or you can use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . You'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit http://example.com/token , where http://example.com is the location of your socket.io server. Or if you're going to use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , visit https://reveal-js-multiplex-ccjbegmaii.now.sh/token . You are very welcome to point your presentations at the Socket.io server running at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. The easiest way to do this is by installing now . With that installed, deploying your own Multiplex server is as easy running the following command from the reveal.js folder: now plugin/multiplex .","title":"Socket.io server"},{"location":"cppcon-2018/reveal.js/README.html#socketio-server-as-file-static-server","text":"The socket.io server can play the role of static file server for your client presentation, as in the example at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match.) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] });","title":"socket.io server as file static server"},{"location":"cppcon-2018/reveal.js/README.html#mathjax","text":"If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you'll need to include it as a reveal.js dependency, find our more about dependencies here . The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the mathjax configuration value. Below is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the math config object at all. Reveal.initialize({ // other options ... math: { mathjax: 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js', config: 'TeX-AMS_HTML-full' // See http://docs.mathjax.org/en/latest/config-files.html }, dependencies: [ { src: 'plugin/math/math.js', async: true } ] }); Read MathJax's documentation if you need HTTPS delivery or serving of specific versions for stability.","title":"MathJax"},{"location":"cppcon-2018/reveal.js/README.html#installation","text":"The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source.","title":"Installation"},{"location":"cppcon-2018/reveal.js/README.html#basic-setup","text":"The core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser. Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases Unzip and replace the example contents in index.html with your own Open index.html in a browser to view it","title":"Basic setup"},{"location":"cppcon-2018/reveal.js/README.html#full-setup","text":"Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code. Install Node.js (4.0.0 or later) Clone the reveal.js repository sh $ git clone https://github.com/hakimel/reveal.js.git Navigate to the reveal.js folder sh $ cd reveal.js Install dependencies sh $ npm install Serve the presentation and monitor source files for changes sh $ npm start Open http://localhost:8000 to view your presentation You can change the port by using npm start -- --port=8001 .","title":"Full setup"},{"location":"cppcon-2018/reveal.js/README.html#folder-structure","text":"css/ Core styles without which the project does not function js/ Like above but for JavaScript plugin/ Components that have been developed as extensions to reveal.js lib/ All other third party assets (JavaScript, CSS, fonts)","title":"Folder Structure"},{"location":"cppcon-2018/reveal.js/README.html#license","text":"MIT licensed Copyright (C) 2018 Hakim El Hattab, http://hakim.se","title":"License"},{"location":"cppcon-2018/reveal.js/CONTRIBUTING.html","text":"Contributing Please keep the issue tracker limited to bug reports , feature requests and pull requests . Personal Support If you have personal support or setup questions the best place to ask those are StackOverflow . Bug Reports When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested. Pull Requests Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master) Plugins Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"CONTRIBUTING"},{"location":"cppcon-2018/reveal.js/CONTRIBUTING.html#contributing","text":"Please keep the issue tracker limited to bug reports , feature requests and pull requests .","title":"Contributing"},{"location":"cppcon-2018/reveal.js/CONTRIBUTING.html#personal-support","text":"If you have personal support or setup questions the best place to ask those are StackOverflow .","title":"Personal Support"},{"location":"cppcon-2018/reveal.js/CONTRIBUTING.html#bug-reports","text":"When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested.","title":"Bug Reports"},{"location":"cppcon-2018/reveal.js/CONTRIBUTING.html#pull-requests","text":"Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master)","title":"Pull Requests"},{"location":"cppcon-2018/reveal.js/CONTRIBUTING.html#plugins","text":"Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"Plugins"},{"location":"cppcon-2018/reveal.js/css/theme/README.html","text":"Dependencies Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceeding: https://github.com/hakimel/reveal.js#full-setup Creating a Theme To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run npm run build -- css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Home"},{"location":"cppcon-2018/reveal.js/css/theme/README.html#dependencies","text":"Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceeding: https://github.com/hakimel/reveal.js#full-setup","title":"Dependencies"},{"location":"cppcon-2018/reveal.js/css/theme/README.html#creating-a-theme","text":"To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run npm run build -- css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Creating a Theme"},{"location":"cppcon-2018/reveal.js/plugin/markdown/example.html","text":"Markdown Demo External 1.1 Content 1.1 Note: This will only appear in the speaker notes window. External 1.2 Content 1.2 External 2 Content 2.1 External 3.1 Content 3.1 External 3.2 Content 3.2 External 3.3","title":"Markdown Demo"},{"location":"cppcon-2018/reveal.js/plugin/markdown/example.html#markdown-demo","text":"","title":"Markdown Demo"},{"location":"cppcon-2018/reveal.js/plugin/markdown/example.html#external-11","text":"Content 1.1 Note: This will only appear in the speaker notes window.","title":"External 1.1"},{"location":"cppcon-2018/reveal.js/plugin/markdown/example.html#external-12","text":"Content 1.2","title":"External 1.2"},{"location":"cppcon-2018/reveal.js/plugin/markdown/example.html#external-2","text":"Content 2.1","title":"External 2"},{"location":"cppcon-2018/reveal.js/plugin/markdown/example.html#external-31","text":"Content 3.1","title":"External 3.1"},{"location":"cppcon-2018/reveal.js/plugin/markdown/example.html#external-32","text":"Content 3.2","title":"External 3.2"},{"location":"cppcon-2018/reveal.js/plugin/markdown/example.html#external-33","text":"","title":"External 3.3"},{"location":"cppcon-2018/reveal.js/test/simple.html","text":"Slide 1.1 var a = 1; Slide 1.2 Slide 2","title":"Simple"},{"location":"cppcon-2018/reveal.js/test/simple.html#slide-11","text":"var a = 1;","title":"Slide 1.1"},{"location":"cppcon-2018/reveal.js/test/simple.html#slide-12","text":"","title":"Slide 1.2"},{"location":"cppcon-2018/reveal.js/test/simple.html#slide-2","text":"","title":"Slide 2"},{"location":"cppnow-2016/README.html","text":"reveal.js A framework for easily creating beautiful presentations using HTML. Check out the live demo . reveal.js comes with a broad range of features including nested slides , Markdown contents , PDF export , speaker notes and a JavaScript API . It's best viewed in a modern browser but fallbacks are available to make sure your presentation can still be viewed elsewhere. More reading: Installation : Step-by-step instructions for getting reveal.js running on your computer. Changelog : Up-to-date version history. Examples : Presentations created with reveal.js, add your own! Browser Support : Explanation of browser support and fallbacks. Plugins : A list of plugins that can be used to extend reveal.js. Online Editor Presentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at http://slides.com . Instructions Markup Markup hierarchy needs to be div class=\"reveal\" div class=\"slides\" section where the section represents one slide and can be repeated indefinitely. If you place multiple section 's inside of another section they will be shown as vertical slides. The first of the vertical slides is the \"root\" of the others (at the top), and it will be included in the horizontal sequence. For example: div class= reveal div class= slides section Single Horizontal Slide /section section section Vertical Slide 1 /section section Vertical Slide 2 /section /section /div /div Markdown It's possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your section elements and wrap the contents in a script type=\"text/template\" like the example below. This is based on data-markdown from Paul Irish modified to use marked to support Github Flavoured Markdown . Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks). section data-markdown script type= text/template ## Page title A paragraph with some text and a [link](http://hakim.se). /script /section External Markdown You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file. The data-charset attribute is optional and specifies which charset to use when loading the external file. When used locally, this feature requires that reveal.js runs from a local web server . section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: data-charset= iso-8859-15 /section Element Attributes Special syntax (in html comment) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things. section data-markdown script type= text/template - Item 1 !-- .element: class= fragment data-fragment-index= 2 -- - Item 2 !-- .element: class= fragment data-fragment-index= 1 -- /script /section Slide Attributes Special syntax (in html comment) is available for adding attributes to the slide section elements generated by your Markdown. section data-markdown script type= text/template !-- .slide: data-background= #ff0000 -- Markdown content /script /section Configuration At the end of your page you need to initialize reveal by running the following code. Note that all config values are optional and will default as specified below. Reveal.initialize({ // Display controls in the bottom right corner controls: true, // Display a presentation progress bar progress: true, // Display the page number of the current slide slideNumber: false, // Push each slide change to the browser history history: false, // Enable keyboard shortcuts for navigation keyboard: true, // Enable the slide overview mode overview: true, // Vertical centering of slides center: true, // Enables touch navigation on devices with touch input touch: true, // Loop the presentation loop: false, // Change the presentation direction to be RTL rtl: false, // Turns fragments on and off globally fragments: true, // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded: false, // Flags if we should show a help overlay when the questionmark // key is pressed help: true, // Flags if speaker notes should be visible to all viewers showNotes: false, // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide: 0, // Stop auto-sliding after user input autoSlideStoppable: true, // Enable slide navigation via mouse wheel mouseWheel: false, // Hides the address bar on mobile devices hideAddressBar: true, // Opens links in an iframe preview overlay previewLinks: false, // Transition style transition: 'default', // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed: 'default', // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition: 'default', // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance: 3, // Parallax background image parallaxBackgroundImage: '', // e.g. 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg' // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px // Amount to move parallax background (horizontal and vertical) on slide change // Number, e.g. 100 parallaxBackgroundHorizontal: '', parallaxBackgroundVertical: '' }); The configuration can be updated after initialization using the configure method: // Turn autoSlide off Reveal.configure({ autoSlide: 0 }); // Start auto-sliding every 5s Reveal.configure({ autoSlide: 5000 }); Presentation Size All presentations have a normal size, that is the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport. See below for a list of configuration options related to sizing, including default values: Reveal.initialize({ ... // The normal size of the presentation, aspect ratio will be preserved // when the presentation is scaled to fit different resolutions. Can be // specified using percentage units. width: 960, height: 700, // Factor of the display size that should remain empty around the content margin: 0.1, // Bounds for smallest/largest possible scale to apply to content minScale: 0.2, maxScale: 1.5 }); Dependencies Reveal.js doesn't rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example: Reveal.initialize({ dependencies: [ // Cross-browser shim that fully implements classList - https://github.com/eligrey/classList.js/ { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } }, // Interpret Markdown in section elements { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, // Syntax highlight for code elements { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, // Zoom in and out with Alt+click { src: 'plugin/zoom-js/zoom.js', async: true }, // Speaker notes { src: 'plugin/notes/notes.js', async: true }, // MathJax { src: 'plugin/math/math.js', async: true } ] }); You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src : Path to the script to load - async : [optional] Flags if the script should load after reveal.js has started, defaults to false - callback : [optional] Function to execute when the script has loaded - condition : [optional] Function which must return true for the script to be loaded Ready Event A 'ready' event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call Reveal.isReady() . Reveal.addEventListener( 'ready', function( event ) { // event.currentSlide, event.indexh, event.indexv } ); Auto-sliding Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides: // Slide every five seconds Reveal.configure({ autoSlide: 5000 }); When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing \u00bba\u00ab on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config. You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute: section data-autoslide= 2000 p After 2 seconds the first fragment will be shown. /p p class= fragment data-autoslide= 10000 After 10 seconds the next fragment will be shown. /p p class= fragment Now, the fragment is displayed for 2 seconds before the next slide is shown. /p /section Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired. Keyboard Bindings If you're unhappy with any of the default keyboard bindings you can override them using the keyboard config option: Reveal.configure({ keyboard: { 13: 'next', // go to the next slide when the ENTER key is pressed 27: function() {}, // do something custom when ESC is pressed 32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding) } }); Touch Navigation You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js. If there's some part of your content that needs to remain accessible to touch events you'll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled. Lazy Loading When working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option. To enable lazy loading all you need to do is change your \"src\" attributes to \"data-src\" as shown below. This is supported for image, video, audio and iframe elements. Lazy loaded iframes will also unload when the containing slide is no longer visible. section img data-src= image.png iframe data-src= http://hakim.se /iframe video source data-src= video.webm type= video/webm / source data-src= video.mp4 type= video/mp4 / /video /section API The Reveal object exposes a JavaScript API for controlling navigation and reading state: // Navigation Reveal.slide( indexh, indexv, indexf ); Reveal.left(); Reveal.right(); Reveal.up(); Reveal.down(); Reveal.prev(); Reveal.next(); Reveal.prevFragment(); Reveal.nextFragment(); // Toggle presentation states, optionally pass true/false to force on/off Reveal.toggleOverview(); Reveal.togglePause(); Reveal.toggleAutoSlide(); // Change a config value at runtime Reveal.configure({ controls: true }); // Returns the present configuration options Reveal.getConfig(); // Fetch the current scale of the presentation Reveal.getScale(); // Retrieves the previous and current slide elements Reveal.getPreviousSlide(); Reveal.getCurrentSlide(); Reveal.getIndices(); // { h: 0, v: 0 } } Reveal.getProgress(); // 0-1 Reveal.getTotalSlides(); // Returns the speaker notes for the current slide Reveal.getSlideNotes(); // State checks Reveal.isFirstSlide(); Reveal.isLastSlide(); Reveal.isOverview(); Reveal.isPaused(); Reveal.isAutoSliding(); Slide Changed Event A 'slidechanged' event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes. Some libraries, like MathJax (see #226 ), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'slidechanged', function( event ) { // event.previousSlide, event.currentSlide, event.indexh, event.indexv } ); Presentation State The presentation's current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire. Reveal.slide( 1 ); // we're on slide 1 var state = Reveal.getState(); Reveal.slide( 3 ); // we're on slide 3 Reveal.setState( state ); // we're back on slide 1 Slide States If you set data-state=\"somestate\" on a slide section , \"somestate\" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide. Furthermore you can also listen to these changes in state via JavaScript: Reveal.addEventListener( 'somestate', function() { // TODO: Sprinkle magic }, false ); Slide Backgrounds Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your section elements. Four different types of backgrounds are supported: color, image, video and iframe. Below are a few examples. section data-background= #ff0000 h2 All CSS color formats are supported, like rgba() or hsl(). /h2 /section section data-background= http://example.com/image.png h2 This slide will have a full-size background image. /h2 /section section data-background= http://example.com/image.png data-background-size= 100px data-background-repeat= repeat h2 This background image will be sized to 100px and repeated. /h2 /section section data-background-video= https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm data-background-video-loop h2 Video. Multiple sources can be defined using a comma separated list. Video will loop when the data-background-video-loop attribute is provided. /h2 /section section data-background-iframe= https://slides.com h2 Embeds a web page as a background. Note that the page won't be interactive. /h2 /section Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition. Parallax Background If you want to use a parallax scrolling background, set the first two config properties below when initializing reveal.js (the other two are optional). Reveal.initialize({ // Parallax background image parallaxBackgroundImage: '', // e.g. https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px - currently only pixels are supported (don't use % or auto) // Amount of pixels to move the parallax background per slide step, // a value of 0 disables movement along the given axis // These are optional, if they aren't specified they'll be calculated automatically parallaxBackgroundHorizontal: 200, parallaxBackgroundVertical: 50 }); Make sure that the background size is much bigger than screen size to allow for some scrolling. View example . Slide Transitions The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute: section data-transition= zoom h2 This slide will override the presentation transition and zoom! /h2 /section section data-transition-speed= fast h2 Choose from three transition speeds: default, fast or slow! /h2 /section You can also use different in and out transitions for the same slide: section data-transition= slide The train goes on \u2026 /section section data-transition= slide and on \u2026 /section section data-transition= slide-in fade-out and stops. /section section data-transition= fade-in slide-out (Passengers entering and leaving) /section section data-transition= slide And it starts again. /section Internal links It's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute ( section id=\"some-slide\" ): a href= #/2/2 Link /a a href= #/some-slide Link /a You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it's a valid navigation route based on the current slide. a href= # class= navigate-left a href= # class= navigate-right a href= # class= navigate-up a href= # class= navigate-down a href= # class= navigate-prev !-- Previous vertical or horizontal slide -- a href= # class= navigate-next !-- Next vertical or horizontal slide -- Fragments Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here's an example: http://lab.hakim.se/reveal-js/#/fragments The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment: section p class= fragment grow grow /p p class= fragment shrink shrink /p p class= fragment fade-out fade-out /p p class= fragment current-visible visible only once /p p class= fragment highlight-current-blue blue only once /p p class= fragment highlight-red highlight-red /p p class= fragment highlight-green highlight-green /p p class= fragment highlight-blue highlight-blue /p /section Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second. section span class= fragment fade-in span class= fragment fade-out I'll fade in, then out /span /span /section The display order of fragments can be controlled using the data-fragment-index attribute. section p class= fragment data-fragment-index= 3 Appears last /p p class= fragment data-fragment-index= 1 Appears first /p p class= fragment data-fragment-index= 2 Appears second /p /section Fragment events When a slide fragment is either shown or hidden reveal.js will dispatch an event. Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'fragmentshown', function( event ) { // event.fragment = the fragment DOM element } ); Reveal.addEventListener( 'fragmenthidden', function( event ) { // event.fragment = the fragment DOM element } ); Code syntax highlighting By default, Reveal is configured with highlight.js for code syntax highlighting. Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present surrounding whitespace is automatically removed. section pre code data-trim (def lazy-fib (concat [0 1] ((fn rfib [a b] (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) /code /pre /section Slide number If you would like to display the page number of the current slide you can do so using the slideNumber configuration value. // Shows the slide number using default formatting Reveal.configure({ slideNumber: true }); // Slide number formatting can be configured using these variables: // h.v : horizontal . vertical slide number (default) // h/v : horizontal / vertical slide number // c : flattened slide number // c/t : flattened slide number / total slides Reveal.configure({ slideNumber: 'c/t' }); Overview mode Press \"Esc\" or \"o\" keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks: Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } ); Reveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal.toggleOverview(); Fullscreen mode Just press \u00bbF\u00ab on your keyboard to show your presentation in fullscreen mode. Press the \u00bbESC\u00ab key to exit fullscreen mode. Embedded media Embedded HTML5 video / audio and YouTube iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute. Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown: video data-autoplay src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video Additionally the framework automatically pushes two post messages to all iframes, slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden. Stretching elements Sometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below: section h2 This video will use up the remaining space on the slide /h2 video class= stretch src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video /section Limitations: - Only direct descendants of a slide section can be stretched - Only one descendant per slide section can be stretched postMessage API The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2: window .postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' ); When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window: window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); if( data.namespace === 'reveal' data.eventName ==='slidechanged' ) { // Slide changed, see data.state for slide number } } ); This cross-window messaging can be toggled on or off using configuration flags. Reveal.initialize({ ..., // Exposes the reveal.js API through window.postMessage postMessage: true, // Dispatches all reveal.js events to the parent window through postMessage postMessageEvents: false }); PDF Export Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium . Here's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300. Open your presentation with print-pdf included anywhere in the query string. This triggers the default index HTML to load the PDF print stylesheet ( css/print/pdf.css ). You can test this with lab.hakim.se/reveal-js?print-pdf . Open the in-browser print dialog (CMD+P). Change the Destination setting to Save as PDF . Change the Layout to Landscape . Change the Margins to None . Click Save . Alternatively you can use the decktape project. Theming The framework comes with a few different themes included: black: Black background, white text, blue links (default theme) white: White background, black text, blue links league: Gray background, white text, blue links (default theme for reveal.js 3.0.0) beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html: link rel= stylesheet href= css/theme/black.css id= theme If you want to add a theme of your own see the instructions here: /css/theme/README.md . Speaker Notes reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the 's' key on your keyboard to open the notes window. Notes are defined by appending an aside element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown. Alternatively you can add your notes in a data-notes attribute on the slide. Like section data-notes=\"Something important\" /section . When used locally, this feature requires that reveal.js runs from a local web server . section h2 Some Slide /h2 aside class= notes Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit 's' on your keyboard). /aside /section Notes are only visible to you in the speaker view. If you wish to share your notes with the audience initialize reveal.js with the showNotes config value set to true . If you're using the external Markdown plugin, you can add notes with the help of a special delimiter: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: /section # Title ## Sub-title Here is some content... Note: This will only display in the notes window. Server Side Speaker Notes In some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies: Reveal.initialize({ ... dependencies: [ { src: 'socket.io/socket.io.js', async: true }, { src: 'plugin/notes-server/client.js', async: true } ] }); Then: Install Node.js Run npm install Run node plugin/notes-server Multiplexing The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at http://revealjs-51546.onmodulus.net/ . The multiplex plugin needs the following 3 things to operate: Master presentation that has control Client presentations that follow the master Socket.io server to broadcast events from the master to the clients More details: Master presentation Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation: npm install node-static static If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server. You can then access your master presentation at http://localhost:1947 Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'revealjs-51546.onmodulus.net:80' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, // and if you want speaker notes { src: 'plugin/notes-server/client.js', async: true } // other dependencies... ] }); Client presentation Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via http://example.com/path/to/presentation/client/index.html , with the configuration below causing them to connect to the socket.io server as clients. Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'revealjs-51546.onmodulus.net:80' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] }); Socket.io server Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands: npm install node plugin/multiplex Or you use the socket.io server at http://revealjs-51546.onmodulus.net/ . You'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit http://example.com/token , where http://example.com is the location of your socket.io server. Or if you're going to use the socket.io server at http://revealjs-51546.onmodulus.net/ , visit http://revealjs-51546.onmodulus.net/token . You are very welcome to point your presentations at the Socket.io server running at http://revealjs-51546.onmodulus.net/ , but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. It is simple to deploy to nodejitsu, heroku, your own environment, etc. socket.io server as file static server The socket.io server can play the role of static file server for your client presentation, as in the example at http://revealjs-51546.onmodulus.net/ . (Open http://revealjs-51546.onmodulus.net/ in two browsers. Navigate through the slides on one, and the other will update to match.) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open http://revealjs-51546.onmodulus.net/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] }); MathJax If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you'll need to include it as a reveal.js dependency, find our more about dependencies here . The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the mathjax configuration value. Below is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the math config object at all. Reveal.initialize({ // other options ... math: { mathjax: 'https://cdn.mathjax.org/mathjax/latest/MathJax.js', config: 'TeX-AMS_HTML-full' // See http://docs.mathjax.org/en/latest/config-files.html }, dependencies: [ { src: 'plugin/math/math.js', async: true } ] }); Read MathJax's documentation if you need HTTPS delivery or serving of specific versions for stability. Installation The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source. Basic setup The core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser. Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases Unzip and replace the example contents in index.html with your own Open index.html in a browser to view it Full setup Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code. Install Node.js Install Grunt Clone the reveal.js repository sh $ git clone https://github.com/hakimel/reveal.js.git Navigate to the reveal.js folder sh $ cd reveal.js Install dependencies sh $ npm install Serve the presentation and monitor source files for changes sh $ grunt serve Open http://localhost:8000 to view your presentation You can change the port by using grunt serve --port 8001 . Folder Structure css/ Core styles without which the project does not function js/ Like above but for JavaScript plugin/ Components that have been developed as extensions to reveal.js lib/ All other third party assets (JavaScript, CSS, fonts) License MIT licensed Copyright (C) 2015 Hakim El Hattab, http://hakim.se","title":"reveal.js [![Build Status](https://travis-ci.org/hakimel/reveal.js.svg?branch=master)](https://travis-ci.org/hakimel/reveal.js)"},{"location":"cppnow-2016/README.html#revealjs","text":"A framework for easily creating beautiful presentations using HTML. Check out the live demo . reveal.js comes with a broad range of features including nested slides , Markdown contents , PDF export , speaker notes and a JavaScript API . It's best viewed in a modern browser but fallbacks are available to make sure your presentation can still be viewed elsewhere.","title":"reveal.js"},{"location":"cppnow-2016/README.html#more-reading","text":"Installation : Step-by-step instructions for getting reveal.js running on your computer. Changelog : Up-to-date version history. Examples : Presentations created with reveal.js, add your own! Browser Support : Explanation of browser support and fallbacks. Plugins : A list of plugins that can be used to extend reveal.js.","title":"More reading:"},{"location":"cppnow-2016/README.html#online-editor","text":"Presentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at http://slides.com .","title":"Online Editor"},{"location":"cppnow-2016/README.html#instructions","text":"","title":"Instructions"},{"location":"cppnow-2016/README.html#markup","text":"Markup hierarchy needs to be div class=\"reveal\" div class=\"slides\" section where the section represents one slide and can be repeated indefinitely. If you place multiple section 's inside of another section they will be shown as vertical slides. The first of the vertical slides is the \"root\" of the others (at the top), and it will be included in the horizontal sequence. For example: div class= reveal div class= slides section Single Horizontal Slide /section section section Vertical Slide 1 /section section Vertical Slide 2 /section /section /div /div","title":"Markup"},{"location":"cppnow-2016/README.html#markdown","text":"It's possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your section elements and wrap the contents in a script type=\"text/template\" like the example below. This is based on data-markdown from Paul Irish modified to use marked to support Github Flavoured Markdown . Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks). section data-markdown script type= text/template ## Page title A paragraph with some text and a [link](http://hakim.se). /script /section","title":"Markdown"},{"location":"cppnow-2016/README.html#external-markdown","text":"You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file. The data-charset attribute is optional and specifies which charset to use when loading the external file. When used locally, this feature requires that reveal.js runs from a local web server . section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: data-charset= iso-8859-15 /section","title":"External Markdown"},{"location":"cppnow-2016/README.html#element-attributes","text":"Special syntax (in html comment) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things. section data-markdown script type= text/template - Item 1 !-- .element: class= fragment data-fragment-index= 2 -- - Item 2 !-- .element: class= fragment data-fragment-index= 1 -- /script /section","title":"Element Attributes"},{"location":"cppnow-2016/README.html#slide-attributes","text":"Special syntax (in html comment) is available for adding attributes to the slide section elements generated by your Markdown. section data-markdown script type= text/template !-- .slide: data-background= #ff0000 -- Markdown content /script /section","title":"Slide Attributes"},{"location":"cppnow-2016/README.html#configuration","text":"At the end of your page you need to initialize reveal by running the following code. Note that all config values are optional and will default as specified below. Reveal.initialize({ // Display controls in the bottom right corner controls: true, // Display a presentation progress bar progress: true, // Display the page number of the current slide slideNumber: false, // Push each slide change to the browser history history: false, // Enable keyboard shortcuts for navigation keyboard: true, // Enable the slide overview mode overview: true, // Vertical centering of slides center: true, // Enables touch navigation on devices with touch input touch: true, // Loop the presentation loop: false, // Change the presentation direction to be RTL rtl: false, // Turns fragments on and off globally fragments: true, // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded: false, // Flags if we should show a help overlay when the questionmark // key is pressed help: true, // Flags if speaker notes should be visible to all viewers showNotes: false, // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide: 0, // Stop auto-sliding after user input autoSlideStoppable: true, // Enable slide navigation via mouse wheel mouseWheel: false, // Hides the address bar on mobile devices hideAddressBar: true, // Opens links in an iframe preview overlay previewLinks: false, // Transition style transition: 'default', // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed: 'default', // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition: 'default', // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance: 3, // Parallax background image parallaxBackgroundImage: '', // e.g. 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg' // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px // Amount to move parallax background (horizontal and vertical) on slide change // Number, e.g. 100 parallaxBackgroundHorizontal: '', parallaxBackgroundVertical: '' }); The configuration can be updated after initialization using the configure method: // Turn autoSlide off Reveal.configure({ autoSlide: 0 }); // Start auto-sliding every 5s Reveal.configure({ autoSlide: 5000 });","title":"Configuration"},{"location":"cppnow-2016/README.html#presentation-size","text":"All presentations have a normal size, that is the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport. See below for a list of configuration options related to sizing, including default values: Reveal.initialize({ ... // The normal size of the presentation, aspect ratio will be preserved // when the presentation is scaled to fit different resolutions. Can be // specified using percentage units. width: 960, height: 700, // Factor of the display size that should remain empty around the content margin: 0.1, // Bounds for smallest/largest possible scale to apply to content minScale: 0.2, maxScale: 1.5 });","title":"Presentation Size"},{"location":"cppnow-2016/README.html#dependencies","text":"Reveal.js doesn't rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example: Reveal.initialize({ dependencies: [ // Cross-browser shim that fully implements classList - https://github.com/eligrey/classList.js/ { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } }, // Interpret Markdown in section elements { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, // Syntax highlight for code elements { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, // Zoom in and out with Alt+click { src: 'plugin/zoom-js/zoom.js', async: true }, // Speaker notes { src: 'plugin/notes/notes.js', async: true }, // MathJax { src: 'plugin/math/math.js', async: true } ] }); You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src : Path to the script to load - async : [optional] Flags if the script should load after reveal.js has started, defaults to false - callback : [optional] Function to execute when the script has loaded - condition : [optional] Function which must return true for the script to be loaded","title":"Dependencies"},{"location":"cppnow-2016/README.html#ready-event","text":"A 'ready' event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call Reveal.isReady() . Reveal.addEventListener( 'ready', function( event ) { // event.currentSlide, event.indexh, event.indexv } );","title":"Ready Event"},{"location":"cppnow-2016/README.html#auto-sliding","text":"Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides: // Slide every five seconds Reveal.configure({ autoSlide: 5000 }); When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing \u00bba\u00ab on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config. You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute: section data-autoslide= 2000 p After 2 seconds the first fragment will be shown. /p p class= fragment data-autoslide= 10000 After 10 seconds the next fragment will be shown. /p p class= fragment Now, the fragment is displayed for 2 seconds before the next slide is shown. /p /section Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired.","title":"Auto-sliding"},{"location":"cppnow-2016/README.html#keyboard-bindings","text":"If you're unhappy with any of the default keyboard bindings you can override them using the keyboard config option: Reveal.configure({ keyboard: { 13: 'next', // go to the next slide when the ENTER key is pressed 27: function() {}, // do something custom when ESC is pressed 32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding) } });","title":"Keyboard Bindings"},{"location":"cppnow-2016/README.html#touch-navigation","text":"You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js. If there's some part of your content that needs to remain accessible to touch events you'll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled.","title":"Touch Navigation"},{"location":"cppnow-2016/README.html#lazy-loading","text":"When working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option. To enable lazy loading all you need to do is change your \"src\" attributes to \"data-src\" as shown below. This is supported for image, video, audio and iframe elements. Lazy loaded iframes will also unload when the containing slide is no longer visible. section img data-src= image.png iframe data-src= http://hakim.se /iframe video source data-src= video.webm type= video/webm / source data-src= video.mp4 type= video/mp4 / /video /section","title":"Lazy Loading"},{"location":"cppnow-2016/README.html#api","text":"The Reveal object exposes a JavaScript API for controlling navigation and reading state: // Navigation Reveal.slide( indexh, indexv, indexf ); Reveal.left(); Reveal.right(); Reveal.up(); Reveal.down(); Reveal.prev(); Reveal.next(); Reveal.prevFragment(); Reveal.nextFragment(); // Toggle presentation states, optionally pass true/false to force on/off Reveal.toggleOverview(); Reveal.togglePause(); Reveal.toggleAutoSlide(); // Change a config value at runtime Reveal.configure({ controls: true }); // Returns the present configuration options Reveal.getConfig(); // Fetch the current scale of the presentation Reveal.getScale(); // Retrieves the previous and current slide elements Reveal.getPreviousSlide(); Reveal.getCurrentSlide(); Reveal.getIndices(); // { h: 0, v: 0 } } Reveal.getProgress(); // 0-1 Reveal.getTotalSlides(); // Returns the speaker notes for the current slide Reveal.getSlideNotes(); // State checks Reveal.isFirstSlide(); Reveal.isLastSlide(); Reveal.isOverview(); Reveal.isPaused(); Reveal.isAutoSliding();","title":"API"},{"location":"cppnow-2016/README.html#slide-changed-event","text":"A 'slidechanged' event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes. Some libraries, like MathJax (see #226 ), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'slidechanged', function( event ) { // event.previousSlide, event.currentSlide, event.indexh, event.indexv } );","title":"Slide Changed Event"},{"location":"cppnow-2016/README.html#presentation-state","text":"The presentation's current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire. Reveal.slide( 1 ); // we're on slide 1 var state = Reveal.getState(); Reveal.slide( 3 ); // we're on slide 3 Reveal.setState( state ); // we're back on slide 1","title":"Presentation State"},{"location":"cppnow-2016/README.html#slide-states","text":"If you set data-state=\"somestate\" on a slide section , \"somestate\" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide. Furthermore you can also listen to these changes in state via JavaScript: Reveal.addEventListener( 'somestate', function() { // TODO: Sprinkle magic }, false );","title":"Slide States"},{"location":"cppnow-2016/README.html#slide-backgrounds","text":"Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your section elements. Four different types of backgrounds are supported: color, image, video and iframe. Below are a few examples. section data-background= #ff0000 h2 All CSS color formats are supported, like rgba() or hsl(). /h2 /section section data-background= http://example.com/image.png h2 This slide will have a full-size background image. /h2 /section section data-background= http://example.com/image.png data-background-size= 100px data-background-repeat= repeat h2 This background image will be sized to 100px and repeated. /h2 /section section data-background-video= https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm data-background-video-loop h2 Video. Multiple sources can be defined using a comma separated list. Video will loop when the data-background-video-loop attribute is provided. /h2 /section section data-background-iframe= https://slides.com h2 Embeds a web page as a background. Note that the page won't be interactive. /h2 /section Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition.","title":"Slide Backgrounds"},{"location":"cppnow-2016/README.html#parallax-background","text":"If you want to use a parallax scrolling background, set the first two config properties below when initializing reveal.js (the other two are optional). Reveal.initialize({ // Parallax background image parallaxBackgroundImage: '', // e.g. https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px - currently only pixels are supported (don't use % or auto) // Amount of pixels to move the parallax background per slide step, // a value of 0 disables movement along the given axis // These are optional, if they aren't specified they'll be calculated automatically parallaxBackgroundHorizontal: 200, parallaxBackgroundVertical: 50 }); Make sure that the background size is much bigger than screen size to allow for some scrolling. View example .","title":"Parallax Background"},{"location":"cppnow-2016/README.html#slide-transitions","text":"The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute: section data-transition= zoom h2 This slide will override the presentation transition and zoom! /h2 /section section data-transition-speed= fast h2 Choose from three transition speeds: default, fast or slow! /h2 /section You can also use different in and out transitions for the same slide: section data-transition= slide The train goes on \u2026 /section section data-transition= slide and on \u2026 /section section data-transition= slide-in fade-out and stops. /section section data-transition= fade-in slide-out (Passengers entering and leaving) /section section data-transition= slide And it starts again. /section","title":"Slide Transitions"},{"location":"cppnow-2016/README.html#internal-links","text":"It's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute ( section id=\"some-slide\" ): a href= #/2/2 Link /a a href= #/some-slide Link /a You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it's a valid navigation route based on the current slide. a href= # class= navigate-left a href= # class= navigate-right a href= # class= navigate-up a href= # class= navigate-down a href= # class= navigate-prev !-- Previous vertical or horizontal slide -- a href= # class= navigate-next !-- Next vertical or horizontal slide --","title":"Internal links"},{"location":"cppnow-2016/README.html#fragments","text":"Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here's an example: http://lab.hakim.se/reveal-js/#/fragments The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment: section p class= fragment grow grow /p p class= fragment shrink shrink /p p class= fragment fade-out fade-out /p p class= fragment current-visible visible only once /p p class= fragment highlight-current-blue blue only once /p p class= fragment highlight-red highlight-red /p p class= fragment highlight-green highlight-green /p p class= fragment highlight-blue highlight-blue /p /section Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second. section span class= fragment fade-in span class= fragment fade-out I'll fade in, then out /span /span /section The display order of fragments can be controlled using the data-fragment-index attribute. section p class= fragment data-fragment-index= 3 Appears last /p p class= fragment data-fragment-index= 1 Appears first /p p class= fragment data-fragment-index= 2 Appears second /p /section","title":"Fragments"},{"location":"cppnow-2016/README.html#fragment-events","text":"When a slide fragment is either shown or hidden reveal.js will dispatch an event. Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'fragmentshown', function( event ) { // event.fragment = the fragment DOM element } ); Reveal.addEventListener( 'fragmenthidden', function( event ) { // event.fragment = the fragment DOM element } );","title":"Fragment events"},{"location":"cppnow-2016/README.html#code-syntax-highlighting","text":"By default, Reveal is configured with highlight.js for code syntax highlighting. Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present surrounding whitespace is automatically removed. section pre code data-trim (def lazy-fib (concat [0 1] ((fn rfib [a b] (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) /code /pre /section","title":"Code syntax highlighting"},{"location":"cppnow-2016/README.html#slide-number","text":"If you would like to display the page number of the current slide you can do so using the slideNumber configuration value. // Shows the slide number using default formatting Reveal.configure({ slideNumber: true }); // Slide number formatting can be configured using these variables: // h.v : horizontal . vertical slide number (default) // h/v : horizontal / vertical slide number // c : flattened slide number // c/t : flattened slide number / total slides Reveal.configure({ slideNumber: 'c/t' });","title":"Slide number"},{"location":"cppnow-2016/README.html#overview-mode","text":"Press \"Esc\" or \"o\" keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks: Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } ); Reveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal.toggleOverview();","title":"Overview mode"},{"location":"cppnow-2016/README.html#fullscreen-mode","text":"Just press \u00bbF\u00ab on your keyboard to show your presentation in fullscreen mode. Press the \u00bbESC\u00ab key to exit fullscreen mode.","title":"Fullscreen mode"},{"location":"cppnow-2016/README.html#embedded-media","text":"Embedded HTML5 video / audio and YouTube iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute. Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown: video data-autoplay src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video Additionally the framework automatically pushes two post messages to all iframes, slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden.","title":"Embedded media"},{"location":"cppnow-2016/README.html#stretching-elements","text":"Sometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below: section h2 This video will use up the remaining space on the slide /h2 video class= stretch src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video /section Limitations: - Only direct descendants of a slide section can be stretched - Only one descendant per slide section can be stretched","title":"Stretching elements"},{"location":"cppnow-2016/README.html#postmessage-api","text":"The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2: window .postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' ); When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window: window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); if( data.namespace === 'reveal' data.eventName ==='slidechanged' ) { // Slide changed, see data.state for slide number } } ); This cross-window messaging can be toggled on or off using configuration flags. Reveal.initialize({ ..., // Exposes the reveal.js API through window.postMessage postMessage: true, // Dispatches all reveal.js events to the parent window through postMessage postMessageEvents: false });","title":"postMessage API"},{"location":"cppnow-2016/README.html#pdf-export","text":"Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium . Here's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300. Open your presentation with print-pdf included anywhere in the query string. This triggers the default index HTML to load the PDF print stylesheet ( css/print/pdf.css ). You can test this with lab.hakim.se/reveal-js?print-pdf . Open the in-browser print dialog (CMD+P). Change the Destination setting to Save as PDF . Change the Layout to Landscape . Change the Margins to None . Click Save . Alternatively you can use the decktape project.","title":"PDF Export"},{"location":"cppnow-2016/README.html#theming","text":"The framework comes with a few different themes included: black: Black background, white text, blue links (default theme) white: White background, black text, blue links league: Gray background, white text, blue links (default theme for reveal.js 3.0.0) beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html: link rel= stylesheet href= css/theme/black.css id= theme If you want to add a theme of your own see the instructions here: /css/theme/README.md .","title":"Theming"},{"location":"cppnow-2016/README.html#speaker-notes","text":"reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the 's' key on your keyboard to open the notes window. Notes are defined by appending an aside element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown. Alternatively you can add your notes in a data-notes attribute on the slide. Like section data-notes=\"Something important\" /section . When used locally, this feature requires that reveal.js runs from a local web server . section h2 Some Slide /h2 aside class= notes Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit 's' on your keyboard). /aside /section Notes are only visible to you in the speaker view. If you wish to share your notes with the audience initialize reveal.js with the showNotes config value set to true . If you're using the external Markdown plugin, you can add notes with the help of a special delimiter: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: /section # Title ## Sub-title Here is some content... Note: This will only display in the notes window.","title":"Speaker Notes"},{"location":"cppnow-2016/README.html#server-side-speaker-notes","text":"In some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies: Reveal.initialize({ ... dependencies: [ { src: 'socket.io/socket.io.js', async: true }, { src: 'plugin/notes-server/client.js', async: true } ] }); Then: Install Node.js Run npm install Run node plugin/notes-server","title":"Server Side Speaker Notes"},{"location":"cppnow-2016/README.html#multiplexing","text":"The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at http://revealjs-51546.onmodulus.net/ . The multiplex plugin needs the following 3 things to operate: Master presentation that has control Client presentations that follow the master Socket.io server to broadcast events from the master to the clients More details:","title":"Multiplexing"},{"location":"cppnow-2016/README.html#master-presentation","text":"Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation: npm install node-static static If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server. You can then access your master presentation at http://localhost:1947 Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'revealjs-51546.onmodulus.net:80' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, // and if you want speaker notes { src: 'plugin/notes-server/client.js', async: true } // other dependencies... ] });","title":"Master presentation"},{"location":"cppnow-2016/README.html#client-presentation","text":"Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via http://example.com/path/to/presentation/client/index.html , with the configuration below causing them to connect to the socket.io server as clients. Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'revealjs-51546.onmodulus.net:80' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] });","title":"Client presentation"},{"location":"cppnow-2016/README.html#socketio-server","text":"Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands: npm install node plugin/multiplex Or you use the socket.io server at http://revealjs-51546.onmodulus.net/ . You'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit http://example.com/token , where http://example.com is the location of your socket.io server. Or if you're going to use the socket.io server at http://revealjs-51546.onmodulus.net/ , visit http://revealjs-51546.onmodulus.net/token . You are very welcome to point your presentations at the Socket.io server running at http://revealjs-51546.onmodulus.net/ , but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. It is simple to deploy to nodejitsu, heroku, your own environment, etc.","title":"Socket.io server"},{"location":"cppnow-2016/README.html#socketio-server-as-file-static-server","text":"The socket.io server can play the role of static file server for your client presentation, as in the example at http://revealjs-51546.onmodulus.net/ . (Open http://revealjs-51546.onmodulus.net/ in two browsers. Navigate through the slides on one, and the other will update to match.) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open http://revealjs-51546.onmodulus.net/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] });","title":"socket.io server as file static server"},{"location":"cppnow-2016/README.html#mathjax","text":"If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you'll need to include it as a reveal.js dependency, find our more about dependencies here . The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the mathjax configuration value. Below is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the math config object at all. Reveal.initialize({ // other options ... math: { mathjax: 'https://cdn.mathjax.org/mathjax/latest/MathJax.js', config: 'TeX-AMS_HTML-full' // See http://docs.mathjax.org/en/latest/config-files.html }, dependencies: [ { src: 'plugin/math/math.js', async: true } ] }); Read MathJax's documentation if you need HTTPS delivery or serving of specific versions for stability.","title":"MathJax"},{"location":"cppnow-2016/README.html#installation","text":"The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source.","title":"Installation"},{"location":"cppnow-2016/README.html#basic-setup","text":"The core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser. Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases Unzip and replace the example contents in index.html with your own Open index.html in a browser to view it","title":"Basic setup"},{"location":"cppnow-2016/README.html#full-setup","text":"Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code. Install Node.js Install Grunt Clone the reveal.js repository sh $ git clone https://github.com/hakimel/reveal.js.git Navigate to the reveal.js folder sh $ cd reveal.js Install dependencies sh $ npm install Serve the presentation and monitor source files for changes sh $ grunt serve Open http://localhost:8000 to view your presentation You can change the port by using grunt serve --port 8001 .","title":"Full setup"},{"location":"cppnow-2016/README.html#folder-structure","text":"css/ Core styles without which the project does not function js/ Like above but for JavaScript plugin/ Components that have been developed as extensions to reveal.js lib/ All other third party assets (JavaScript, CSS, fonts)","title":"Folder Structure"},{"location":"cppnow-2016/README.html#license","text":"MIT licensed Copyright (C) 2015 Hakim El Hattab, http://hakim.se","title":"License"},{"location":"cppnow-2016/CONTRIBUTING.html","text":"Contributing Please keep the issue tracker limited to bug reports , feature requests and pull requests . Personal Support If you have personal support or setup questions the best place to ask those are StackOverflow . Bug Reports When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested. Pull Requests Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master) Plugins Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"CONTRIBUTING"},{"location":"cppnow-2016/CONTRIBUTING.html#contributing","text":"Please keep the issue tracker limited to bug reports , feature requests and pull requests .","title":"Contributing"},{"location":"cppnow-2016/CONTRIBUTING.html#personal-support","text":"If you have personal support or setup questions the best place to ask those are StackOverflow .","title":"Personal Support"},{"location":"cppnow-2016/CONTRIBUTING.html#bug-reports","text":"When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested.","title":"Bug Reports"},{"location":"cppnow-2016/CONTRIBUTING.html#pull-requests","text":"Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master)","title":"Pull Requests"},{"location":"cppnow-2016/CONTRIBUTING.html#plugins","text":"Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"Plugins"},{"location":"cppnow-2016/css/theme/README.html","text":"Dependencies Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceding: https://github.com/hakimel/reveal.js#full-setup Creating a Theme To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run grunt css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Home"},{"location":"cppnow-2016/css/theme/README.html#dependencies","text":"Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceding: https://github.com/hakimel/reveal.js#full-setup","title":"Dependencies"},{"location":"cppnow-2016/css/theme/README.html#creating-a-theme","text":"To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run grunt css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Creating a Theme"},{"location":"cppnow-2016/plugin/markdown/example.html","text":"Markdown Demo External 1.1 Content 1.1 Note: This will only appear in the speaker notes window. External 1.2 Content 1.2 External 2 Content 2.1 External 3.1 Content 3.1 External 3.2 Content 3.2","title":"Markdown Demo"},{"location":"cppnow-2016/plugin/markdown/example.html#markdown-demo","text":"","title":"Markdown Demo"},{"location":"cppnow-2016/plugin/markdown/example.html#external-11","text":"Content 1.1 Note: This will only appear in the speaker notes window.","title":"External 1.1"},{"location":"cppnow-2016/plugin/markdown/example.html#external-12","text":"Content 1.2","title":"External 1.2"},{"location":"cppnow-2016/plugin/markdown/example.html#external-2","text":"Content 2.1","title":"External 2"},{"location":"cppnow-2016/plugin/markdown/example.html#external-31","text":"Content 3.1","title":"External 3.1"},{"location":"cppnow-2016/plugin/markdown/example.html#external-32","text":"Content 3.2","title":"External 3.2"},{"location":"cppnow-2017/README.html","text":"reveal.js A framework for easily creating beautiful presentations using HTML. Check out the live demo . reveal.js comes with a broad range of features including nested slides , Markdown contents , PDF export , speaker notes and a JavaScript API . It's best viewed in a modern browser but fallbacks are available to make sure your presentation can still be viewed elsewhere. More reading: Installation : Step-by-step instructions for getting reveal.js running on your computer. Changelog : Up-to-date version history. Examples : Presentations created with reveal.js, add your own! Browser Support : Explanation of browser support and fallbacks. Plugins : A list of plugins that can be used to extend reveal.js. Online Editor Presentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at http://slides.com . Instructions Markup Markup hierarchy needs to be div class=\"reveal\" div class=\"slides\" section where the section represents one slide and can be repeated indefinitely. If you place multiple section 's inside of another section they will be shown as vertical slides. The first of the vertical slides is the \"root\" of the others (at the top), and it will be included in the horizontal sequence. For example: div class= reveal div class= slides section Single Horizontal Slide /section section section Vertical Slide 1 /section section Vertical Slide 2 /section /section /div /div Markdown It's possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your section elements and wrap the contents in a script type=\"text/template\" like the example below. This is based on data-markdown from Paul Irish modified to use marked to support Github Flavoured Markdown . Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks). section data-markdown script type= text/template ## Page title A paragraph with some text and a [link](http://hakim.se). /script /section External Markdown You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file. The data-charset attribute is optional and specifies which charset to use when loading the external file. When used locally, this feature requires that reveal.js runs from a local web server . section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: data-charset= iso-8859-15 /section Element Attributes Special syntax (in html comment) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things. section data-markdown script type= text/template - Item 1 !-- .element: class= fragment data-fragment-index= 2 -- - Item 2 !-- .element: class= fragment data-fragment-index= 1 -- /script /section Slide Attributes Special syntax (in html comment) is available for adding attributes to the slide section elements generated by your Markdown. section data-markdown script type= text/template !-- .slide: data-background= #ff0000 -- Markdown content /script /section Configuration At the end of your page you need to initialize reveal by running the following code. Note that all config values are optional and will default as specified below. Reveal.initialize({ // Display controls in the bottom right corner controls: true, // Display a presentation progress bar progress: true, // Display the page number of the current slide slideNumber: false, // Push each slide change to the browser history history: false, // Enable keyboard shortcuts for navigation keyboard: true, // Enable the slide overview mode overview: true, // Vertical centering of slides center: true, // Enables touch navigation on devices with touch input touch: true, // Loop the presentation loop: false, // Change the presentation direction to be RTL rtl: false, // Turns fragments on and off globally fragments: true, // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded: false, // Flags if we should show a help overlay when the questionmark // key is pressed help: true, // Flags if speaker notes should be visible to all viewers showNotes: false, // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide: 0, // Stop auto-sliding after user input autoSlideStoppable: true, // Enable slide navigation via mouse wheel mouseWheel: false, // Hides the address bar on mobile devices hideAddressBar: true, // Opens links in an iframe preview overlay previewLinks: false, // Transition style transition: 'default', // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed: 'default', // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition: 'default', // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance: 3, // Parallax background image parallaxBackgroundImage: '', // e.g. 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg' // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px // Amount to move parallax background (horizontal and vertical) on slide change // Number, e.g. 100 parallaxBackgroundHorizontal: '', parallaxBackgroundVertical: '' }); The configuration can be updated after initialization using the configure method: // Turn autoSlide off Reveal.configure({ autoSlide: 0 }); // Start auto-sliding every 5s Reveal.configure({ autoSlide: 5000 }); Presentation Size All presentations have a normal size, that is the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport. See below for a list of configuration options related to sizing, including default values: Reveal.initialize({ ... // The normal size of the presentation, aspect ratio will be preserved // when the presentation is scaled to fit different resolutions. Can be // specified using percentage units. width: 960, height: 700, // Factor of the display size that should remain empty around the content margin: 0.1, // Bounds for smallest/largest possible scale to apply to content minScale: 0.2, maxScale: 1.5 }); Dependencies Reveal.js doesn't rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example: Reveal.initialize({ dependencies: [ // Cross-browser shim that fully implements classList - https://github.com/eligrey/classList.js/ { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } }, // Interpret Markdown in section elements { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, // Syntax highlight for code elements { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, // Zoom in and out with Alt+click { src: 'plugin/zoom-js/zoom.js', async: true }, // Speaker notes { src: 'plugin/notes/notes.js', async: true }, // MathJax { src: 'plugin/math/math.js', async: true } ] }); You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src : Path to the script to load - async : [optional] Flags if the script should load after reveal.js has started, defaults to false - callback : [optional] Function to execute when the script has loaded - condition : [optional] Function which must return true for the script to be loaded Ready Event A 'ready' event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call Reveal.isReady() . Reveal.addEventListener( 'ready', function( event ) { // event.currentSlide, event.indexh, event.indexv } ); Auto-sliding Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides: // Slide every five seconds Reveal.configure({ autoSlide: 5000 }); When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing \u00bba\u00ab on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config. You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute: section data-autoslide= 2000 p After 2 seconds the first fragment will be shown. /p p class= fragment data-autoslide= 10000 After 10 seconds the next fragment will be shown. /p p class= fragment Now, the fragment is displayed for 2 seconds before the next slide is shown. /p /section Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired. Keyboard Bindings If you're unhappy with any of the default keyboard bindings you can override them using the keyboard config option: Reveal.configure({ keyboard: { 13: 'next', // go to the next slide when the ENTER key is pressed 27: function() {}, // do something custom when ESC is pressed 32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding) } }); Touch Navigation You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js. If there's some part of your content that needs to remain accessible to touch events you'll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled. Lazy Loading When working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option. To enable lazy loading all you need to do is change your \"src\" attributes to \"data-src\" as shown below. This is supported for image, video, audio and iframe elements. Lazy loaded iframes will also unload when the containing slide is no longer visible. section img data-src= image.png iframe data-src= http://hakim.se /iframe video source data-src= video.webm type= video/webm / source data-src= video.mp4 type= video/mp4 / /video /section API The Reveal object exposes a JavaScript API for controlling navigation and reading state: // Navigation Reveal.slide( indexh, indexv, indexf ); Reveal.left(); Reveal.right(); Reveal.up(); Reveal.down(); Reveal.prev(); Reveal.next(); Reveal.prevFragment(); Reveal.nextFragment(); // Toggle presentation states, optionally pass true/false to force on/off Reveal.toggleOverview(); Reveal.togglePause(); Reveal.toggleAutoSlide(); // Change a config value at runtime Reveal.configure({ controls: true }); // Returns the present configuration options Reveal.getConfig(); // Fetch the current scale of the presentation Reveal.getScale(); // Retrieves the previous and current slide elements Reveal.getPreviousSlide(); Reveal.getCurrentSlide(); Reveal.getIndices(); // { h: 0, v: 0 } } Reveal.getProgress(); // 0-1 Reveal.getTotalSlides(); // Returns the speaker notes for the current slide Reveal.getSlideNotes(); // State checks Reveal.isFirstSlide(); Reveal.isLastSlide(); Reveal.isOverview(); Reveal.isPaused(); Reveal.isAutoSliding(); Slide Changed Event A 'slidechanged' event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes. Some libraries, like MathJax (see #226 ), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'slidechanged', function( event ) { // event.previousSlide, event.currentSlide, event.indexh, event.indexv } ); Presentation State The presentation's current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire. Reveal.slide( 1 ); // we're on slide 1 var state = Reveal.getState(); Reveal.slide( 3 ); // we're on slide 3 Reveal.setState( state ); // we're back on slide 1 Slide States If you set data-state=\"somestate\" on a slide section , \"somestate\" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide. Furthermore you can also listen to these changes in state via JavaScript: Reveal.addEventListener( 'somestate', function() { // TODO: Sprinkle magic }, false ); Slide Backgrounds Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your section elements. Four different types of backgrounds are supported: color, image, video and iframe. Below are a few examples. section data-background= #ff0000 h2 All CSS color formats are supported, like rgba() or hsl(). /h2 /section section data-background= http://example.com/image.png h2 This slide will have a full-size background image. /h2 /section section data-background= http://example.com/image.png data-background-size= 100px data-background-repeat= repeat h2 This background image will be sized to 100px and repeated. /h2 /section section data-background-video= https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm data-background-video-loop h2 Video. Multiple sources can be defined using a comma separated list. Video will loop when the data-background-video-loop attribute is provided. /h2 /section section data-background-iframe= https://slides.com h2 Embeds a web page as a background. Note that the page won't be interactive. /h2 /section Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition. Parallax Background If you want to use a parallax scrolling background, set the first two config properties below when initializing reveal.js (the other two are optional). Reveal.initialize({ // Parallax background image parallaxBackgroundImage: '', // e.g. https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px - currently only pixels are supported (don't use % or auto) // Amount of pixels to move the parallax background per slide step, // a value of 0 disables movement along the given axis // These are optional, if they aren't specified they'll be calculated automatically parallaxBackgroundHorizontal: 200, parallaxBackgroundVertical: 50 }); Make sure that the background size is much bigger than screen size to allow for some scrolling. View example . Slide Transitions The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute: section data-transition= zoom h2 This slide will override the presentation transition and zoom! /h2 /section section data-transition-speed= fast h2 Choose from three transition speeds: default, fast or slow! /h2 /section You can also use different in and out transitions for the same slide: section data-transition= slide The train goes on \u2026 /section section data-transition= slide and on \u2026 /section section data-transition= slide-in fade-out and stops. /section section data-transition= fade-in slide-out (Passengers entering and leaving) /section section data-transition= slide And it starts again. /section Internal links It's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute ( section id=\"some-slide\" ): a href= #/2/2 Link /a a href= #/some-slide Link /a You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it's a valid navigation route based on the current slide. a href= # class= navigate-left a href= # class= navigate-right a href= # class= navigate-up a href= # class= navigate-down a href= # class= navigate-prev !-- Previous vertical or horizontal slide -- a href= # class= navigate-next !-- Next vertical or horizontal slide -- Fragments Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here's an example: http://lab.hakim.se/reveal-js/#/fragments The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment: section p class= fragment grow grow /p p class= fragment shrink shrink /p p class= fragment fade-out fade-out /p p class= fragment current-visible visible only once /p p class= fragment highlight-current-blue blue only once /p p class= fragment highlight-red highlight-red /p p class= fragment highlight-green highlight-green /p p class= fragment highlight-blue highlight-blue /p /section Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second. section span class= fragment fade-in span class= fragment fade-out I'll fade in, then out /span /span /section The display order of fragments can be controlled using the data-fragment-index attribute. section p class= fragment data-fragment-index= 3 Appears last /p p class= fragment data-fragment-index= 1 Appears first /p p class= fragment data-fragment-index= 2 Appears second /p /section Fragment events When a slide fragment is either shown or hidden reveal.js will dispatch an event. Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'fragmentshown', function( event ) { // event.fragment = the fragment DOM element } ); Reveal.addEventListener( 'fragmenthidden', function( event ) { // event.fragment = the fragment DOM element } ); Code syntax highlighting By default, Reveal is configured with highlight.js for code syntax highlighting. Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present surrounding whitespace is automatically removed. section pre code data-trim (def lazy-fib (concat [0 1] ((fn rfib [a b] (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) /code /pre /section Slide number If you would like to display the page number of the current slide you can do so using the slideNumber configuration value. // Shows the slide number using default formatting Reveal.configure({ slideNumber: true }); // Slide number formatting can be configured using these variables: // h.v : horizontal . vertical slide number (default) // h/v : horizontal / vertical slide number // c : flattened slide number // c/t : flattened slide number / total slides Reveal.configure({ slideNumber: 'c/t' }); Overview mode Press \"Esc\" or \"o\" keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks: Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } ); Reveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal.toggleOverview(); Fullscreen mode Just press \u00bbF\u00ab on your keyboard to show your presentation in fullscreen mode. Press the \u00bbESC\u00ab key to exit fullscreen mode. Embedded media Embedded HTML5 video / audio and YouTube iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute. Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown: video data-autoplay src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video Additionally the framework automatically pushes two post messages to all iframes, slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden. Stretching elements Sometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below: section h2 This video will use up the remaining space on the slide /h2 video class= stretch src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video /section Limitations: - Only direct descendants of a slide section can be stretched - Only one descendant per slide section can be stretched postMessage API The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2: window .postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' ); When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window: window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); if( data.namespace === 'reveal' data.eventName ==='slidechanged' ) { // Slide changed, see data.state for slide number } } ); This cross-window messaging can be toggled on or off using configuration flags. Reveal.initialize({ ..., // Exposes the reveal.js API through window.postMessage postMessage: true, // Dispatches all reveal.js events to the parent window through postMessage postMessageEvents: false }); PDF Export Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium . Here's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300. Open your presentation with print-pdf included anywhere in the query string. This triggers the default index HTML to load the PDF print stylesheet ( css/print/pdf.css ). You can test this with lab.hakim.se/reveal-js?print-pdf . Open the in-browser print dialog (CMD+P). Change the Destination setting to Save as PDF . Change the Layout to Landscape . Change the Margins to None . Click Save . Alternatively you can use the decktape project. Theming The framework comes with a few different themes included: black: Black background, white text, blue links (default theme) white: White background, black text, blue links league: Gray background, white text, blue links (default theme for reveal.js 3.0.0) beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html: link rel= stylesheet href= css/theme/black.css id= theme If you want to add a theme of your own see the instructions here: /css/theme/README.md . Speaker Notes reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the 's' key on your keyboard to open the notes window. Notes are defined by appending an aside element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown. Alternatively you can add your notes in a data-notes attribute on the slide. Like section data-notes=\"Something important\" /section . When used locally, this feature requires that reveal.js runs from a local web server . section h2 Some Slide /h2 aside class= notes Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit 's' on your keyboard). /aside /section Notes are only visible to you in the speaker view. If you wish to share your notes with the audience initialize reveal.js with the showNotes config value set to true . If you're using the external Markdown plugin, you can add notes with the help of a special delimiter: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: /section # Title ## Sub-title Here is some content... Note: This will only display in the notes window. Server Side Speaker Notes In some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies: Reveal.initialize({ ... dependencies: [ { src: 'socket.io/socket.io.js', async: true }, { src: 'plugin/notes-server/client.js', async: true } ] }); Then: Install Node.js Run npm install Run node plugin/notes-server Multiplexing The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at http://revealjs-51546.onmodulus.net/ . The multiplex plugin needs the following 3 things to operate: Master presentation that has control Client presentations that follow the master Socket.io server to broadcast events from the master to the clients More details: Master presentation Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation: npm install node-static static If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server. You can then access your master presentation at http://localhost:1947 Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'revealjs-51546.onmodulus.net:80' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, // and if you want speaker notes { src: 'plugin/notes-server/client.js', async: true } // other dependencies... ] }); Client presentation Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via http://example.com/path/to/presentation/client/index.html , with the configuration below causing them to connect to the socket.io server as clients. Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'revealjs-51546.onmodulus.net:80' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] }); Socket.io server Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands: npm install node plugin/multiplex Or you use the socket.io server at http://revealjs-51546.onmodulus.net/ . You'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit http://example.com/token , where http://example.com is the location of your socket.io server. Or if you're going to use the socket.io server at http://revealjs-51546.onmodulus.net/ , visit http://revealjs-51546.onmodulus.net/token . You are very welcome to point your presentations at the Socket.io server running at http://revealjs-51546.onmodulus.net/ , but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. It is simple to deploy to nodejitsu, heroku, your own environment, etc. socket.io server as file static server The socket.io server can play the role of static file server for your client presentation, as in the example at http://revealjs-51546.onmodulus.net/ . (Open http://revealjs-51546.onmodulus.net/ in two browsers. Navigate through the slides on one, and the other will update to match.) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open http://revealjs-51546.onmodulus.net/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] }); MathJax If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you'll need to include it as a reveal.js dependency, find our more about dependencies here . The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the mathjax configuration value. Below is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the math config object at all. Reveal.initialize({ // other options ... math: { mathjax: 'https://cdn.mathjax.org/mathjax/latest/MathJax.js', config: 'TeX-AMS_HTML-full' // See http://docs.mathjax.org/en/latest/config-files.html }, dependencies: [ { src: 'plugin/math/math.js', async: true } ] }); Read MathJax's documentation if you need HTTPS delivery or serving of specific versions for stability. Installation The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source. Basic setup The core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser. Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases Unzip and replace the example contents in index.html with your own Open index.html in a browser to view it Full setup Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code. Install Node.js Install Grunt Clone the reveal.js repository sh $ git clone https://github.com/hakimel/reveal.js.git Navigate to the reveal.js folder sh $ cd reveal.js Install dependencies sh $ npm install Serve the presentation and monitor source files for changes sh $ grunt serve Open http://localhost:8000 to view your presentation You can change the port by using grunt serve --port 8001 . Folder Structure css/ Core styles without which the project does not function js/ Like above but for JavaScript plugin/ Components that have been developed as extensions to reveal.js lib/ All other third party assets (JavaScript, CSS, fonts) License MIT licensed Copyright (C) 2015 Hakim El Hattab, http://hakim.se","title":"reveal.js [![Build Status](https://travis-ci.org/hakimel/reveal.js.svg?branch=master)](https://travis-ci.org/hakimel/reveal.js)"},{"location":"cppnow-2017/README.html#revealjs","text":"A framework for easily creating beautiful presentations using HTML. Check out the live demo . reveal.js comes with a broad range of features including nested slides , Markdown contents , PDF export , speaker notes and a JavaScript API . It's best viewed in a modern browser but fallbacks are available to make sure your presentation can still be viewed elsewhere.","title":"reveal.js"},{"location":"cppnow-2017/README.html#more-reading","text":"Installation : Step-by-step instructions for getting reveal.js running on your computer. Changelog : Up-to-date version history. Examples : Presentations created with reveal.js, add your own! Browser Support : Explanation of browser support and fallbacks. Plugins : A list of plugins that can be used to extend reveal.js.","title":"More reading:"},{"location":"cppnow-2017/README.html#online-editor","text":"Presentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at http://slides.com .","title":"Online Editor"},{"location":"cppnow-2017/README.html#instructions","text":"","title":"Instructions"},{"location":"cppnow-2017/README.html#markup","text":"Markup hierarchy needs to be div class=\"reveal\" div class=\"slides\" section where the section represents one slide and can be repeated indefinitely. If you place multiple section 's inside of another section they will be shown as vertical slides. The first of the vertical slides is the \"root\" of the others (at the top), and it will be included in the horizontal sequence. For example: div class= reveal div class= slides section Single Horizontal Slide /section section section Vertical Slide 1 /section section Vertical Slide 2 /section /section /div /div","title":"Markup"},{"location":"cppnow-2017/README.html#markdown","text":"It's possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your section elements and wrap the contents in a script type=\"text/template\" like the example below. This is based on data-markdown from Paul Irish modified to use marked to support Github Flavoured Markdown . Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks). section data-markdown script type= text/template ## Page title A paragraph with some text and a [link](http://hakim.se). /script /section","title":"Markdown"},{"location":"cppnow-2017/README.html#external-markdown","text":"You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file. The data-charset attribute is optional and specifies which charset to use when loading the external file. When used locally, this feature requires that reveal.js runs from a local web server . section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: data-charset= iso-8859-15 /section","title":"External Markdown"},{"location":"cppnow-2017/README.html#element-attributes","text":"Special syntax (in html comment) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things. section data-markdown script type= text/template - Item 1 !-- .element: class= fragment data-fragment-index= 2 -- - Item 2 !-- .element: class= fragment data-fragment-index= 1 -- /script /section","title":"Element Attributes"},{"location":"cppnow-2017/README.html#slide-attributes","text":"Special syntax (in html comment) is available for adding attributes to the slide section elements generated by your Markdown. section data-markdown script type= text/template !-- .slide: data-background= #ff0000 -- Markdown content /script /section","title":"Slide Attributes"},{"location":"cppnow-2017/README.html#configuration","text":"At the end of your page you need to initialize reveal by running the following code. Note that all config values are optional and will default as specified below. Reveal.initialize({ // Display controls in the bottom right corner controls: true, // Display a presentation progress bar progress: true, // Display the page number of the current slide slideNumber: false, // Push each slide change to the browser history history: false, // Enable keyboard shortcuts for navigation keyboard: true, // Enable the slide overview mode overview: true, // Vertical centering of slides center: true, // Enables touch navigation on devices with touch input touch: true, // Loop the presentation loop: false, // Change the presentation direction to be RTL rtl: false, // Turns fragments on and off globally fragments: true, // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded: false, // Flags if we should show a help overlay when the questionmark // key is pressed help: true, // Flags if speaker notes should be visible to all viewers showNotes: false, // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide: 0, // Stop auto-sliding after user input autoSlideStoppable: true, // Enable slide navigation via mouse wheel mouseWheel: false, // Hides the address bar on mobile devices hideAddressBar: true, // Opens links in an iframe preview overlay previewLinks: false, // Transition style transition: 'default', // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed: 'default', // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition: 'default', // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance: 3, // Parallax background image parallaxBackgroundImage: '', // e.g. 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg' // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px // Amount to move parallax background (horizontal and vertical) on slide change // Number, e.g. 100 parallaxBackgroundHorizontal: '', parallaxBackgroundVertical: '' }); The configuration can be updated after initialization using the configure method: // Turn autoSlide off Reveal.configure({ autoSlide: 0 }); // Start auto-sliding every 5s Reveal.configure({ autoSlide: 5000 });","title":"Configuration"},{"location":"cppnow-2017/README.html#presentation-size","text":"All presentations have a normal size, that is the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport. See below for a list of configuration options related to sizing, including default values: Reveal.initialize({ ... // The normal size of the presentation, aspect ratio will be preserved // when the presentation is scaled to fit different resolutions. Can be // specified using percentage units. width: 960, height: 700, // Factor of the display size that should remain empty around the content margin: 0.1, // Bounds for smallest/largest possible scale to apply to content minScale: 0.2, maxScale: 1.5 });","title":"Presentation Size"},{"location":"cppnow-2017/README.html#dependencies","text":"Reveal.js doesn't rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example: Reveal.initialize({ dependencies: [ // Cross-browser shim that fully implements classList - https://github.com/eligrey/classList.js/ { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } }, // Interpret Markdown in section elements { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, // Syntax highlight for code elements { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, // Zoom in and out with Alt+click { src: 'plugin/zoom-js/zoom.js', async: true }, // Speaker notes { src: 'plugin/notes/notes.js', async: true }, // MathJax { src: 'plugin/math/math.js', async: true } ] }); You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src : Path to the script to load - async : [optional] Flags if the script should load after reveal.js has started, defaults to false - callback : [optional] Function to execute when the script has loaded - condition : [optional] Function which must return true for the script to be loaded","title":"Dependencies"},{"location":"cppnow-2017/README.html#ready-event","text":"A 'ready' event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call Reveal.isReady() . Reveal.addEventListener( 'ready', function( event ) { // event.currentSlide, event.indexh, event.indexv } );","title":"Ready Event"},{"location":"cppnow-2017/README.html#auto-sliding","text":"Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides: // Slide every five seconds Reveal.configure({ autoSlide: 5000 }); When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing \u00bba\u00ab on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config. You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute: section data-autoslide= 2000 p After 2 seconds the first fragment will be shown. /p p class= fragment data-autoslide= 10000 After 10 seconds the next fragment will be shown. /p p class= fragment Now, the fragment is displayed for 2 seconds before the next slide is shown. /p /section Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired.","title":"Auto-sliding"},{"location":"cppnow-2017/README.html#keyboard-bindings","text":"If you're unhappy with any of the default keyboard bindings you can override them using the keyboard config option: Reveal.configure({ keyboard: { 13: 'next', // go to the next slide when the ENTER key is pressed 27: function() {}, // do something custom when ESC is pressed 32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding) } });","title":"Keyboard Bindings"},{"location":"cppnow-2017/README.html#touch-navigation","text":"You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js. If there's some part of your content that needs to remain accessible to touch events you'll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled.","title":"Touch Navigation"},{"location":"cppnow-2017/README.html#lazy-loading","text":"When working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option. To enable lazy loading all you need to do is change your \"src\" attributes to \"data-src\" as shown below. This is supported for image, video, audio and iframe elements. Lazy loaded iframes will also unload when the containing slide is no longer visible. section img data-src= image.png iframe data-src= http://hakim.se /iframe video source data-src= video.webm type= video/webm / source data-src= video.mp4 type= video/mp4 / /video /section","title":"Lazy Loading"},{"location":"cppnow-2017/README.html#api","text":"The Reveal object exposes a JavaScript API for controlling navigation and reading state: // Navigation Reveal.slide( indexh, indexv, indexf ); Reveal.left(); Reveal.right(); Reveal.up(); Reveal.down(); Reveal.prev(); Reveal.next(); Reveal.prevFragment(); Reveal.nextFragment(); // Toggle presentation states, optionally pass true/false to force on/off Reveal.toggleOverview(); Reveal.togglePause(); Reveal.toggleAutoSlide(); // Change a config value at runtime Reveal.configure({ controls: true }); // Returns the present configuration options Reveal.getConfig(); // Fetch the current scale of the presentation Reveal.getScale(); // Retrieves the previous and current slide elements Reveal.getPreviousSlide(); Reveal.getCurrentSlide(); Reveal.getIndices(); // { h: 0, v: 0 } } Reveal.getProgress(); // 0-1 Reveal.getTotalSlides(); // Returns the speaker notes for the current slide Reveal.getSlideNotes(); // State checks Reveal.isFirstSlide(); Reveal.isLastSlide(); Reveal.isOverview(); Reveal.isPaused(); Reveal.isAutoSliding();","title":"API"},{"location":"cppnow-2017/README.html#slide-changed-event","text":"A 'slidechanged' event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes. Some libraries, like MathJax (see #226 ), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'slidechanged', function( event ) { // event.previousSlide, event.currentSlide, event.indexh, event.indexv } );","title":"Slide Changed Event"},{"location":"cppnow-2017/README.html#presentation-state","text":"The presentation's current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire. Reveal.slide( 1 ); // we're on slide 1 var state = Reveal.getState(); Reveal.slide( 3 ); // we're on slide 3 Reveal.setState( state ); // we're back on slide 1","title":"Presentation State"},{"location":"cppnow-2017/README.html#slide-states","text":"If you set data-state=\"somestate\" on a slide section , \"somestate\" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide. Furthermore you can also listen to these changes in state via JavaScript: Reveal.addEventListener( 'somestate', function() { // TODO: Sprinkle magic }, false );","title":"Slide States"},{"location":"cppnow-2017/README.html#slide-backgrounds","text":"Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your section elements. Four different types of backgrounds are supported: color, image, video and iframe. Below are a few examples. section data-background= #ff0000 h2 All CSS color formats are supported, like rgba() or hsl(). /h2 /section section data-background= http://example.com/image.png h2 This slide will have a full-size background image. /h2 /section section data-background= http://example.com/image.png data-background-size= 100px data-background-repeat= repeat h2 This background image will be sized to 100px and repeated. /h2 /section section data-background-video= https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm data-background-video-loop h2 Video. Multiple sources can be defined using a comma separated list. Video will loop when the data-background-video-loop attribute is provided. /h2 /section section data-background-iframe= https://slides.com h2 Embeds a web page as a background. Note that the page won't be interactive. /h2 /section Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition.","title":"Slide Backgrounds"},{"location":"cppnow-2017/README.html#parallax-background","text":"If you want to use a parallax scrolling background, set the first two config properties below when initializing reveal.js (the other two are optional). Reveal.initialize({ // Parallax background image parallaxBackgroundImage: '', // e.g. https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px - currently only pixels are supported (don't use % or auto) // Amount of pixels to move the parallax background per slide step, // a value of 0 disables movement along the given axis // These are optional, if they aren't specified they'll be calculated automatically parallaxBackgroundHorizontal: 200, parallaxBackgroundVertical: 50 }); Make sure that the background size is much bigger than screen size to allow for some scrolling. View example .","title":"Parallax Background"},{"location":"cppnow-2017/README.html#slide-transitions","text":"The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute: section data-transition= zoom h2 This slide will override the presentation transition and zoom! /h2 /section section data-transition-speed= fast h2 Choose from three transition speeds: default, fast or slow! /h2 /section You can also use different in and out transitions for the same slide: section data-transition= slide The train goes on \u2026 /section section data-transition= slide and on \u2026 /section section data-transition= slide-in fade-out and stops. /section section data-transition= fade-in slide-out (Passengers entering and leaving) /section section data-transition= slide And it starts again. /section","title":"Slide Transitions"},{"location":"cppnow-2017/README.html#internal-links","text":"It's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute ( section id=\"some-slide\" ): a href= #/2/2 Link /a a href= #/some-slide Link /a You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it's a valid navigation route based on the current slide. a href= # class= navigate-left a href= # class= navigate-right a href= # class= navigate-up a href= # class= navigate-down a href= # class= navigate-prev !-- Previous vertical or horizontal slide -- a href= # class= navigate-next !-- Next vertical or horizontal slide --","title":"Internal links"},{"location":"cppnow-2017/README.html#fragments","text":"Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here's an example: http://lab.hakim.se/reveal-js/#/fragments The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment: section p class= fragment grow grow /p p class= fragment shrink shrink /p p class= fragment fade-out fade-out /p p class= fragment current-visible visible only once /p p class= fragment highlight-current-blue blue only once /p p class= fragment highlight-red highlight-red /p p class= fragment highlight-green highlight-green /p p class= fragment highlight-blue highlight-blue /p /section Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second. section span class= fragment fade-in span class= fragment fade-out I'll fade in, then out /span /span /section The display order of fragments can be controlled using the data-fragment-index attribute. section p class= fragment data-fragment-index= 3 Appears last /p p class= fragment data-fragment-index= 1 Appears first /p p class= fragment data-fragment-index= 2 Appears second /p /section","title":"Fragments"},{"location":"cppnow-2017/README.html#fragment-events","text":"When a slide fragment is either shown or hidden reveal.js will dispatch an event. Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'fragmentshown', function( event ) { // event.fragment = the fragment DOM element } ); Reveal.addEventListener( 'fragmenthidden', function( event ) { // event.fragment = the fragment DOM element } );","title":"Fragment events"},{"location":"cppnow-2017/README.html#code-syntax-highlighting","text":"By default, Reveal is configured with highlight.js for code syntax highlighting. Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present surrounding whitespace is automatically removed. section pre code data-trim (def lazy-fib (concat [0 1] ((fn rfib [a b] (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) /code /pre /section","title":"Code syntax highlighting"},{"location":"cppnow-2017/README.html#slide-number","text":"If you would like to display the page number of the current slide you can do so using the slideNumber configuration value. // Shows the slide number using default formatting Reveal.configure({ slideNumber: true }); // Slide number formatting can be configured using these variables: // h.v : horizontal . vertical slide number (default) // h/v : horizontal / vertical slide number // c : flattened slide number // c/t : flattened slide number / total slides Reveal.configure({ slideNumber: 'c/t' });","title":"Slide number"},{"location":"cppnow-2017/README.html#overview-mode","text":"Press \"Esc\" or \"o\" keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks: Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } ); Reveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal.toggleOverview();","title":"Overview mode"},{"location":"cppnow-2017/README.html#fullscreen-mode","text":"Just press \u00bbF\u00ab on your keyboard to show your presentation in fullscreen mode. Press the \u00bbESC\u00ab key to exit fullscreen mode.","title":"Fullscreen mode"},{"location":"cppnow-2017/README.html#embedded-media","text":"Embedded HTML5 video / audio and YouTube iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute. Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown: video data-autoplay src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video Additionally the framework automatically pushes two post messages to all iframes, slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden.","title":"Embedded media"},{"location":"cppnow-2017/README.html#stretching-elements","text":"Sometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below: section h2 This video will use up the remaining space on the slide /h2 video class= stretch src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video /section Limitations: - Only direct descendants of a slide section can be stretched - Only one descendant per slide section can be stretched","title":"Stretching elements"},{"location":"cppnow-2017/README.html#postmessage-api","text":"The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2: window .postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' ); When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window: window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); if( data.namespace === 'reveal' data.eventName ==='slidechanged' ) { // Slide changed, see data.state for slide number } } ); This cross-window messaging can be toggled on or off using configuration flags. Reveal.initialize({ ..., // Exposes the reveal.js API through window.postMessage postMessage: true, // Dispatches all reveal.js events to the parent window through postMessage postMessageEvents: false });","title":"postMessage API"},{"location":"cppnow-2017/README.html#pdf-export","text":"Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium . Here's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300. Open your presentation with print-pdf included anywhere in the query string. This triggers the default index HTML to load the PDF print stylesheet ( css/print/pdf.css ). You can test this with lab.hakim.se/reveal-js?print-pdf . Open the in-browser print dialog (CMD+P). Change the Destination setting to Save as PDF . Change the Layout to Landscape . Change the Margins to None . Click Save . Alternatively you can use the decktape project.","title":"PDF Export"},{"location":"cppnow-2017/README.html#theming","text":"The framework comes with a few different themes included: black: Black background, white text, blue links (default theme) white: White background, black text, blue links league: Gray background, white text, blue links (default theme for reveal.js 3.0.0) beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html: link rel= stylesheet href= css/theme/black.css id= theme If you want to add a theme of your own see the instructions here: /css/theme/README.md .","title":"Theming"},{"location":"cppnow-2017/README.html#speaker-notes","text":"reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the 's' key on your keyboard to open the notes window. Notes are defined by appending an aside element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown. Alternatively you can add your notes in a data-notes attribute on the slide. Like section data-notes=\"Something important\" /section . When used locally, this feature requires that reveal.js runs from a local web server . section h2 Some Slide /h2 aside class= notes Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit 's' on your keyboard). /aside /section Notes are only visible to you in the speaker view. If you wish to share your notes with the audience initialize reveal.js with the showNotes config value set to true . If you're using the external Markdown plugin, you can add notes with the help of a special delimiter: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: /section # Title ## Sub-title Here is some content... Note: This will only display in the notes window.","title":"Speaker Notes"},{"location":"cppnow-2017/README.html#server-side-speaker-notes","text":"In some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies: Reveal.initialize({ ... dependencies: [ { src: 'socket.io/socket.io.js', async: true }, { src: 'plugin/notes-server/client.js', async: true } ] }); Then: Install Node.js Run npm install Run node plugin/notes-server","title":"Server Side Speaker Notes"},{"location":"cppnow-2017/README.html#multiplexing","text":"The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at http://revealjs-51546.onmodulus.net/ . The multiplex plugin needs the following 3 things to operate: Master presentation that has control Client presentations that follow the master Socket.io server to broadcast events from the master to the clients More details:","title":"Multiplexing"},{"location":"cppnow-2017/README.html#master-presentation","text":"Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation: npm install node-static static If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server. You can then access your master presentation at http://localhost:1947 Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'revealjs-51546.onmodulus.net:80' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, // and if you want speaker notes { src: 'plugin/notes-server/client.js', async: true } // other dependencies... ] });","title":"Master presentation"},{"location":"cppnow-2017/README.html#client-presentation","text":"Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via http://example.com/path/to/presentation/client/index.html , with the configuration below causing them to connect to the socket.io server as clients. Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'revealjs-51546.onmodulus.net:80' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] });","title":"Client presentation"},{"location":"cppnow-2017/README.html#socketio-server","text":"Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands: npm install node plugin/multiplex Or you use the socket.io server at http://revealjs-51546.onmodulus.net/ . You'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit http://example.com/token , where http://example.com is the location of your socket.io server. Or if you're going to use the socket.io server at http://revealjs-51546.onmodulus.net/ , visit http://revealjs-51546.onmodulus.net/token . You are very welcome to point your presentations at the Socket.io server running at http://revealjs-51546.onmodulus.net/ , but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. It is simple to deploy to nodejitsu, heroku, your own environment, etc.","title":"Socket.io server"},{"location":"cppnow-2017/README.html#socketio-server-as-file-static-server","text":"The socket.io server can play the role of static file server for your client presentation, as in the example at http://revealjs-51546.onmodulus.net/ . (Open http://revealjs-51546.onmodulus.net/ in two browsers. Navigate through the slides on one, and the other will update to match.) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open http://revealjs-51546.onmodulus.net/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] });","title":"socket.io server as file static server"},{"location":"cppnow-2017/README.html#mathjax","text":"If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you'll need to include it as a reveal.js dependency, find our more about dependencies here . The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the mathjax configuration value. Below is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the math config object at all. Reveal.initialize({ // other options ... math: { mathjax: 'https://cdn.mathjax.org/mathjax/latest/MathJax.js', config: 'TeX-AMS_HTML-full' // See http://docs.mathjax.org/en/latest/config-files.html }, dependencies: [ { src: 'plugin/math/math.js', async: true } ] }); Read MathJax's documentation if you need HTTPS delivery or serving of specific versions for stability.","title":"MathJax"},{"location":"cppnow-2017/README.html#installation","text":"The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source.","title":"Installation"},{"location":"cppnow-2017/README.html#basic-setup","text":"The core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser. Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases Unzip and replace the example contents in index.html with your own Open index.html in a browser to view it","title":"Basic setup"},{"location":"cppnow-2017/README.html#full-setup","text":"Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code. Install Node.js Install Grunt Clone the reveal.js repository sh $ git clone https://github.com/hakimel/reveal.js.git Navigate to the reveal.js folder sh $ cd reveal.js Install dependencies sh $ npm install Serve the presentation and monitor source files for changes sh $ grunt serve Open http://localhost:8000 to view your presentation You can change the port by using grunt serve --port 8001 .","title":"Full setup"},{"location":"cppnow-2017/README.html#folder-structure","text":"css/ Core styles without which the project does not function js/ Like above but for JavaScript plugin/ Components that have been developed as extensions to reveal.js lib/ All other third party assets (JavaScript, CSS, fonts)","title":"Folder Structure"},{"location":"cppnow-2017/README.html#license","text":"MIT licensed Copyright (C) 2015 Hakim El Hattab, http://hakim.se","title":"License"},{"location":"cppnow-2017/CONTRIBUTING.html","text":"Contributing Please keep the issue tracker limited to bug reports , feature requests and pull requests . Personal Support If you have personal support or setup questions the best place to ask those are StackOverflow . Bug Reports When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested. Pull Requests Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master) Plugins Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"CONTRIBUTING"},{"location":"cppnow-2017/CONTRIBUTING.html#contributing","text":"Please keep the issue tracker limited to bug reports , feature requests and pull requests .","title":"Contributing"},{"location":"cppnow-2017/CONTRIBUTING.html#personal-support","text":"If you have personal support or setup questions the best place to ask those are StackOverflow .","title":"Personal Support"},{"location":"cppnow-2017/CONTRIBUTING.html#bug-reports","text":"When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested.","title":"Bug Reports"},{"location":"cppnow-2017/CONTRIBUTING.html#pull-requests","text":"Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master)","title":"Pull Requests"},{"location":"cppnow-2017/CONTRIBUTING.html#plugins","text":"Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"Plugins"},{"location":"cppnow-2017/css/theme/README.html","text":"Dependencies Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceding: https://github.com/hakimel/reveal.js#full-setup Creating a Theme To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run grunt css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Home"},{"location":"cppnow-2017/css/theme/README.html#dependencies","text":"Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceding: https://github.com/hakimel/reveal.js#full-setup","title":"Dependencies"},{"location":"cppnow-2017/css/theme/README.html#creating-a-theme","text":"To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run grunt css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Creating a Theme"},{"location":"cppnow-2017/plugin/markdown/example.html","text":"Markdown Demo External 1.1 Content 1.1 Note: This will only appear in the speaker notes window. External 1.2 Content 1.2 External 2 Content 2.1 External 3.1 Content 3.1 External 3.2 Content 3.2","title":"Markdown Demo"},{"location":"cppnow-2017/plugin/markdown/example.html#markdown-demo","text":"","title":"Markdown Demo"},{"location":"cppnow-2017/plugin/markdown/example.html#external-11","text":"Content 1.1 Note: This will only appear in the speaker notes window.","title":"External 1.1"},{"location":"cppnow-2017/plugin/markdown/example.html#external-12","text":"Content 1.2","title":"External 1.2"},{"location":"cppnow-2017/plugin/markdown/example.html#external-2","text":"Content 2.1","title":"External 2"},{"location":"cppnow-2017/plugin/markdown/example.html#external-31","text":"Content 3.1","title":"External 3.1"},{"location":"cppnow-2017/plugin/markdown/example.html#external-32","text":"Content 3.2","title":"External 3.2"},{"location":"cppnow-2019/reveal.js/README.html","text":"reveal.js A framework for easily creating beautiful presentations using HTML. Check out the live demo . reveal.js comes with a broad range of features including nested slides , Markdown contents , PDF export , speaker notes and a JavaScript API . There's also a fully featured visual editor and platform for sharing reveal.js presentations at slides.com . Table of contents Online Editor Installation Basic setup Full setup Folder Structure Instructions Markup Markdown Element Attributes Slide Attributes Configuration Presentation Size Dependencies Ready Event Auto-sliding Keyboard Bindings Vertical Slide Navigation Touch Navigation Lazy Loading API Slide Changed Event Presentation State Slide States Slide Backgrounds Parallax Background Slide Transitions Internal links Fragments Fragment events Code syntax highlighting Slide number Overview mode Fullscreen mode Embedded media Stretching elements Resize Event postMessage API PDF Export Theming Speaker Notes Share and Print Speaker Notes Server Side Speaker Notes Plugins Multiplexing Master presentation Client presentation Socket.io server MathJax License More reading Changelog : Up-to-date version history. Examples : Presentations created with reveal.js, add your own! Browser Support : Explanation of browser support and fallbacks. Plugins : A list of plugins that can be used to extend reveal.js. Online Editor Presentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at https://slides.com . Installation The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source. Basic setup The core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser. Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases Unzip and replace the example contents in index.html with your own Open index.html in a browser to view it Full setup Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code. Install Node.js (4.0.0 or later) Clone the reveal.js repository sh $ git clone https://github.com/hakimel/reveal.js.git Navigate to the reveal.js folder sh $ cd reveal.js Install dependencies sh $ npm install Serve the presentation and monitor source files for changes sh $ npm start Open http://localhost:8000 to view your presentation You can change the port by using npm start -- --port=8001 . Folder Structure css/ Core styles without which the project does not function js/ Like above but for JavaScript plugin/ Components that have been developed as extensions to reveal.js lib/ All other third party assets (JavaScript, CSS, fonts) Instructions Markup Here's a barebones example of a fully working reveal.js presentation: html head link rel= stylesheet href= css/reveal.css link rel= stylesheet href= css/theme/white.css /head body div class= reveal div class= slides section Slide 1 /section section Slide 2 /section /div /div script src= js/reveal.js /script script Reveal.initialize(); /script /body /html The presentation markup hierarchy needs to be .reveal .slides section where the section represents one slide and can be repeated indefinitely. If you place multiple section elements inside of another section they will be shown as vertical slides. The first of the vertical slides is the \"root\" of the others (at the top), and will be included in the horizontal sequence. For example: div class= reveal div class= slides section Single Horizontal Slide /section section section Vertical Slide 1 /section section Vertical Slide 2 /section /section /div /div Markdown It's possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your section elements and wrap the contents in a textarea data-template like the example below. You'll also need to add the plugin/markdown/marked.js and plugin/markdown/markdown.js scripts (in that order) to your HTML file. This is based on data-markdown from Paul Irish modified to use marked to support GitHub Flavored Markdown . Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks). section data-markdown textarea data-template ## Page title A paragraph with some text and a [link](http://hakim.se). /textarea /section External Markdown You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file: the data-separator attribute defines a regular expression for horizontal slides (defaults to ^\\r?\\n---\\r?\\n$ , a newline-bounded horizontal rule) and data-separator-vertical defines vertical slides (disabled by default). The data-separator-notes attribute is a regular expression for specifying the beginning of the current slide's speaker notes (defaults to notes?: , so it will match both \"note:\" and \"notes:\"). The data-charset attribute is optional and specifies which charset to use when loading the external file. When used locally, this feature requires that reveal.js runs from a local web server . The following example customises all available options: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: data-charset= iso-8859-15 !-- Note that Windows uses `\\r\\n` instead of `\\n` as its linefeed character. For a regex that supports all operating systems, use `\\r?\\n` instead of `\\n`. -- /section Element Attributes Special syntax (through HTML comments) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things. section data-markdown script type= text/template - Item 1 !-- .element: class= fragment data-fragment-index= 2 -- - Item 2 !-- .element: class= fragment data-fragment-index= 1 -- /script /section Slide Attributes Special syntax (through HTML comments) is available for adding attributes to the slide section elements generated by your Markdown. section data-markdown script type= text/template !-- .slide: data-background= #ff0000 -- Markdown content /script /section Configuring marked We use marked to parse Markdown. To customise marked's rendering, you can pass in options when configuring Reveal : Reveal.initialize({ // Options which are passed into marked // See https://marked.js.org/#/USING_ADVANCED.md#options markdown: { smartypants: true } }); Configuration At the end of your page you need to initialize reveal by running the following code. Note that all configuration values are optional and will default to the values specified below. Reveal.initialize({ // Display presentation control arrows controls: true, // Help the user learn the controls by providing hints, for example by // bouncing the down arrow when they first encounter a vertical slide controlsTutorial: true, // Determines where controls appear, edges or bottom-right controlsLayout: 'bottom-right', // Visibility rule for backwards navigation arrows; faded , hidden // or visible controlsBackArrows: 'faded', // Display a presentation progress bar progress: true, // Display the page number of the current slide slideNumber: false, // Add the current slide number to the URL hash so that reloading the // page/copying the URL will return you to the same slide hash: false, // Push each slide change to the browser history. Implies `hash: true` history: false, // Enable keyboard shortcuts for navigation keyboard: true, // Enable the slide overview mode overview: true, // Vertical centering of slides center: true, // Enables touch navigation on devices with touch input touch: true, // Loop the presentation loop: false, // Change the presentation direction to be RTL rtl: false, // See https://github.com/hakimel/reveal.js/#navigation-mode navigationMode: 'default', // Randomizes the order of slides each time the presentation loads shuffle: false, // Turns fragments on and off globally fragments: true, // Flags whether to include the current fragment in the URL, // so that reloading brings you to the same fragment position fragmentInURL: false, // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded: false, // Flags if we should show a help overlay when the questionmark // key is pressed help: true, // Flags if speaker notes should be visible to all viewers showNotes: false, // Global override for autoplaying embedded media (video/audio/iframe) // - null: Media will only autoplay if data-autoplay is present // - true: All media will autoplay, regardless of individual setting // - false: No media will autoplay, regardless of individual setting autoPlayMedia: null, // Global override for preloading lazy-loaded iframes // - null: Iframes with data-src AND data-preload will be loaded when within // the viewDistance, iframes with only data-src will be loaded when visible // - true: All iframes with data-src will be loaded when within the viewDistance // - false: All iframes with data-src will be loaded only when visible preloadIframes: null, // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide: 0, // Stop auto-sliding after user input autoSlideStoppable: true, // Use this method for navigation when auto-sliding autoSlideMethod: Reveal.navigateNext, // Specify the average time in seconds that you think you will spend // presenting each slide. This is used to show a pacing timer in the // speaker view defaultTiming: 120, // Enable slide navigation via mouse wheel mouseWheel: false, // Hide cursor if inactive hideInactiveCursor: true, // Time before the cursor is hidden (in ms) hideCursorTime: 5000, // Hides the address bar on mobile devices hideAddressBar: true, // Opens links in an iframe preview overlay // Add `data-preview-link` and `data-preview-link= false ` to customise each link // individually previewLinks: false, // Transition style transition: 'slide', // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed: 'default', // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition: 'fade', // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance: 3, // Parallax background image parallaxBackgroundImage: '', // e.g. 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg' // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: null, parallaxBackgroundVertical: null, // The display mode that will be used to show slides display: 'block' }); The configuration can be updated after initialization using the configure method: // Turn autoSlide off Reveal.configure({ autoSlide: 0 }); // Start auto-sliding every 5s Reveal.configure({ autoSlide: 5000 }); Presentation Size All presentations have a normal size, that is, the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport. See below for a list of configuration options related to sizing, including default values: Reveal.initialize({ // ... // The normal size of the presentation, aspect ratio will be preserved // when the presentation is scaled to fit different resolutions. Can be // specified using percentage units. width: 960, height: 700, // Factor of the display size that should remain empty around the content margin: 0.1, // Bounds for smallest/largest possible scale to apply to content minScale: 0.2, maxScale: 1.5 }); If you wish to disable this behavior and do your own scaling (e.g. using media queries), try these settings: Reveal.initialize({ // ... width: 100% , height: 100% , margin: 0, minScale: 1, maxScale: 1 }); Dependencies Reveal.js doesn't rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example: Reveal.initialize({ dependencies: [ // Interpret Markdown in section elements { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, // Syntax highlight for code elements { src: 'plugin/highlight/highlight.js', async: true }, // Zoom in and out with Alt+click { src: 'plugin/zoom-js/zoom.js', async: true }, // Speaker notes { src: 'plugin/notes/notes.js', async: true }, // MathJax { src: 'plugin/math/math.js', async: true } ] }); You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src : Path to the script to load - async : [optional] Flags if the script should load after reveal.js has started, defaults to false - callback : [optional] Function to execute when the script has loaded - condition : [optional] Function which must return true for the script to be loaded Ready Event A ready event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call Reveal.isReady() . Reveal.addEventListener( 'ready', function( event ) { // event.currentSlide, event.indexh, event.indexv } ); Note that we also add a .ready class to the .reveal element so that you can hook into this with CSS. Auto-sliding Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides: // Slide every five seconds Reveal.configure({ autoSlide: 5000 }); When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing \u00bbA\u00ab on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config. You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute: section data-autoslide= 2000 p After 2 seconds the first fragment will be shown. /p p class= fragment data-autoslide= 10000 After 10 seconds the next fragment will be shown. /p p class= fragment Now, the fragment is displayed for 2 seconds before the next slide is shown. /p /section To override the method used for navigation when auto-sliding, you can specify the autoSlideMethod setting. To only navigate along the top layer and ignore vertical slides, set this to Reveal.navigateRight . Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired. Keyboard Bindings If you're unhappy with any of the default keyboard bindings you can override them using the keyboard config option: Reveal.configure({ keyboard: { 13: 'next', // go to the next slide when the ENTER key is pressed 27: function() {}, // do something custom when ESC is pressed 32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding) } }); Vertical Slide Navigation Slides can be nested within other slides to create vertical stacks (see Markup ). When presenting, you use the left/right arrows to step through the main (horizontal) slides. When you arrive at a vertical stack you can optionally press the up/down arrows to view the vertical slides or skip past them by pressing the right arrow. Here's an example showing a bird's-eye view of what this looks like in action: Navigation Mode You can finetune the reveal.js navigation behavior by using the navigationMode config option. Note that these options are only useful for presnetations that use a mix of horizontal and vertical slides. The following navigation modes are available: Value Description default Left/right arrow keys step between horizontal slides. Up/down arrow keys step between vertical slides. Space key steps through all slides (both horizontal and vertical). linear Removes the up/down arrows. Left/right arrows step through all slides (both horizontal and vertical). grid When this is enabled, stepping left/right from a vertical stack to an adjacent vertical stack will land you at the same vertical index. Consider a deck with six slides ordered in two vertical stacks: 1.1 2.1 1.2 2.2 1.3 2.3 If you're on slide 1.3 and navigate right, you will normally move from 1.3 - 2.1. With navigationMode set to \"grid\" the same navigation takes you from 1.3 - 2.3. Touch Navigation You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js. If there's some part of your content that needs to remain accessible to touch events you'll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled. Lazy Loading When working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option. To enable lazy loading all you need to do is change your src attributes to data-src as shown below. This is supported for image, video, audio and iframe elements. section img data-src= image.png iframe data-src= http://hakim.se /iframe video source data-src= video.webm type= video/webm / source data-src= video.mp4 type= video/mp4 / /video /section Lazy Loading Iframes Note that lazy loaded iframes ignore the viewDistance configuration and will only load when their containing slide becomes visible. Iframes are also unloaded as soon as the slide is hidden. When we lazy load a video or audio element, reveal.js won't start playing that content until the slide becomes visible. However there is no way to control this for an iframe since that could contain any kind of content. That means if we loaded an iframe before the slide is visible on screen it could begin playing media and sound in the background. You can override this behavior with the data-preload attribute. The iframe below will be loaded according to the viewDistance . section iframe data-src= http://hakim.se data-preload /iframe /section You can also change the default globally with the preloadIframes configuration option. If set to true ALL iframes with a data-src attribute will be preloaded when within the viewDistance regardless of individual data-preload attributes. If set to false , all iframes will only be loaded when they become visible. API The Reveal object exposes a JavaScript API for controlling navigation and reading state: // Navigation Reveal.slide( indexh, indexv, indexf ); Reveal.left(); Reveal.right(); Reveal.up(); Reveal.down(); Reveal.prev(); Reveal.next(); Reveal.prevFragment(); Reveal.nextFragment(); // Randomize the order of slides Reveal.shuffle(); // Toggle presentation states, optionally pass true/false to force on/off Reveal.toggleOverview(); Reveal.togglePause(); Reveal.toggleAutoSlide(); // Shows a help overlay with keyboard shortcuts, optionally pass true/false // to force on/off Reveal.toggleHelp(); // Change a config value at runtime Reveal.configure({ controls: true }); // Returns the present configuration options Reveal.getConfig(); // Fetch the current scale of the presentation Reveal.getScale(); // Retrieves the previous and current slide elements Reveal.getPreviousSlide(); Reveal.getCurrentSlide(); Reveal.getIndices(); // { h: 0, v: 0, f: 0 } Reveal.getSlidePastCount(); Reveal.getProgress(); // (0 == first slide, 1 == last slide) Reveal.getSlides(); // Array of all slides Reveal.getTotalSlides(); // Total number of slides // Returns the speaker notes for the current slide Reveal.getSlideNotes(); // State checks Reveal.isFirstSlide(); Reveal.isLastSlide(); Reveal.isOverview(); Reveal.isPaused(); Reveal.isAutoSliding(); // Returns the top-level DOM element getRevealElement(); // div class= reveal ... /div Custom Key Bindings Custom key bindings can be added and removed using the following Javascript API. Custom key bindings will override the default keyboard bindings, but will in turn be overridden by the user defined bindings in the keyboard config option. Reveal.addKeyBinding( binding, callback ); Reveal.removeKeyBinding( keyCode ); For example // The binding parameter provides the following properties // keyCode: the keycode for binding to the callback // key: the key label to show in the help overlay // description: the description of the action to show in the help overlay Reveal.addKeyBinding( { keyCode: 84, key: 'T', description: 'Start timer' }, function() { // start timer } ) // The binding parameter can also be a direct keycode without providing the help description Reveal.addKeyBinding( 82, function() { // reset timer } ) This allows plugins to add key bindings directly to Reveal so they can make use of Reveal's pre-processing logic for key handling (for example, ignoring key presses when paused); and be included in the help overlay (optional) Slide Changed Event A slidechanged event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes. Some libraries, like MathJax (see #226 ), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'slidechanged', function( event ) { // event.previousSlide, event.currentSlide, event.indexh, event.indexv } ); Presentation State The presentation's current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire. Reveal.slide( 1 ); // we're on slide 1 var state = Reveal.getState(); Reveal.slide( 3 ); // we're on slide 3 Reveal.setState( state ); // we're back on slide 1 Slide States If you set data-state=\"somestate\" on a slide section , \"somestate\" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide. Furthermore you can also listen to these changes in state via JavaScript: Reveal.addEventListener( 'somestate', function() { // TODO: Sprinkle magic }, false ); Slide Backgrounds Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your section elements. Four different types of backgrounds are supported: color, image, video and iframe. Color Backgrounds All CSS color formats are supported, including hex values, keywords, rgba() or hsl() . section data-background-color= #ff0000 h2 Color /h2 /section Image Backgrounds By default, background images are resized to cover the full page. Available options: Attribute Default Description data-background-image URL of the image to show. GIFs restart when the slide opens. data-background-size cover See background-size on MDN. data-background-position center See background-position on MDN. data-background-repeat no-repeat See background-repeat on MDN. data-background-opacity 1 Opacity of the background image on a 0-1 scale. 0 is transparent and 1 is fully opaque. section data-background-image= http://example.com/image.png h2 Image /h2 /section section data-background-image= http://example.com/image.png data-background-size= 100px data-background-repeat= repeat h2 This background image will be sized to 100px and repeated /h2 /section Video Backgrounds Automatically plays a full size video behind the slide. Attribute Default Description data-background-video A single video source, or a comma separated list of video sources. data-background-video-loop false Flags if the video should play repeatedly. data-background-video-muted false Flags if the audio should be muted. data-background-size cover Use cover for full screen and some cropping or contain for letterboxing. data-background-opacity 1 Opacity of the background video on a 0-1 scale. 0 is transparent and 1 is fully opaque. section data-background-video= https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm data-background-video-loop data-background-video-muted h2 Video /h2 /section Iframe Backgrounds Embeds a web page as a slide background that covers 100% of the reveal.js width and height. The iframe is in the background layer, behind your slides, and as such it's not possible to interact with it by default. To make your background interactive, you can add the data-background-interactive attribute. section data-background-iframe= https://slides.com data-background-interactive h2 Iframe /h2 /section Background Transitions Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition. Parallax Background If you want to use a parallax scrolling background, set the first two properties below when initializing reveal.js (the other two are optional). Reveal.initialize({ // Parallax background image parallaxBackgroundImage: '', // e.g. https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px - currently only pixels are supported (don't use % or auto) // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: 200, parallaxBackgroundVertical: 50 }); Make sure that the background size is much bigger than screen size to allow for some scrolling. View example . Slide Transitions The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute: section data-transition= zoom h2 This slide will override the presentation transition and zoom! /h2 /section section data-transition-speed= fast h2 Choose from three transition speeds: default, fast or slow! /h2 /section You can also use different in and out transitions for the same slide: section data-transition= slide The train goes on \u2026 /section section data-transition= slide and on \u2026 /section section data-transition= slide-in fade-out and stops. /section section data-transition= fade-in slide-out (Passengers entering and leaving) /section section data-transition= slide And it starts again. /section You can choose from none , fade , slide , convex , concave and zoom . Internal links It's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute ( section id=\"some-slide\" ): a href= #/2/2 Link /a a href= #/some-slide Link /a You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it's a valid navigation route based on the current slide. a href= # class= navigate-left a href= # class= navigate-right a href= # class= navigate-up a href= # class= navigate-down a href= # class= navigate-prev !-- Previous vertical or horizontal slide -- a href= # class= navigate-next !-- Next vertical or horizontal slide -- Fragments Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here's an example: http://revealjs.com/#/fragments The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment: section p class= fragment grow grow /p p class= fragment shrink shrink /p p class= fragment fade-out fade-out /p p class= fragment fade-up fade-up (also down, left and right!) /p p class= fragment fade-in-then-out fades in, then out when we move to the next step /p p class= fragment fade-in-then-semi-out fades in, then obfuscate when we move to the next step /p p class= fragment highlight-current-blue blue only once /p p class= fragment highlight-red highlight-red /p p class= fragment highlight-green highlight-green /p p class= fragment highlight-blue highlight-blue /p /section Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second. section span class= fragment fade-in span class= fragment fade-out I'll fade in, then out /span /span /section The display order of fragments can be controlled using the data-fragment-index attribute. section p class= fragment data-fragment-index= 3 Appears last /p p class= fragment data-fragment-index= 1 Appears first /p p class= fragment data-fragment-index= 2 Appears second /p /section Fragment events When a slide fragment is either shown or hidden reveal.js will dispatch an event. Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'fragmentshown', function( event ) { // event.fragment = the fragment DOM element } ); Reveal.addEventListener( 'fragmenthidden', function( event ) { // event.fragment = the fragment DOM element } ); Code Syntax Highlighting By default, Reveal is configured with highlight.js for code syntax highlighting. To enable syntax highlighting, you'll have to load the highlight plugin ( plugin/highlight/highlight.js ) and a highlight.js CSS theme (Reveal comes packaged with the Monokai themes: lib/css/monokai.css ). Reveal.initialize({ // More info https://github.com/hakimel/reveal.js#dependencies dependencies: [ { src: 'plugin/highlight/highlight.js', async: true }, ] }); Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present, surrounding whitespace is automatically removed. HTML will be escaped by default. To avoid this, for example if you are using mark to call out a line of code, add the data-noescape attribute to the code element. section pre code data-trim data-noescape (def lazy-fib (concat [0 1] mark ((fn rfib [a b] /mark (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) /code /pre /section Line Numbers Highlights To enable line numbers, add data-line-numbers to your code tags. If you want to highlight specific lines you can provide a comma separated list of line numbers using the same attribute. For example, in the following example lines 4 and 8-11 are highlighted: pre code class= hljs data-line-numbers= 4,8-11 import React, { useState } from 'react'; function Example() { const [count, setCount] = useState(0); return ( div p You clicked {count} times /p button onClick={() = setCount(count + 1)} Click me /button /div ); } /code /pre Slide number If you would like to display the page number of the current slide you can do so using the slideNumber and showSlideNumber configuration values. // Shows the slide number using default formatting Reveal.configure({ slideNumber: true }); // Slide number formatting can be configured using these variables: // h.v : horizontal . vertical slide number (default) // h/v : horizontal / vertical slide number // c : flattened slide number // c/t : flattened slide number / total slides Reveal.configure({ slideNumber: 'c/t' }); // You can provide a function to fully customize the number: Reveal.configure({ slideNumber: function() { // Ignore numbering of vertical slides return [ Reveal.getIndices().h ]; }}); // Control which views the slide number displays on using the showSlideNumber value: // all : show on all views (default) // speaker : only show slide numbers on speaker notes view // print : only show slide numbers when printing to PDF Reveal.configure({ showSlideNumber: 'speaker' }); Overview mode Press \u00bbESC\u00ab or \u00bbO\u00ab keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks: Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } ); Reveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal.toggleOverview(); Fullscreen mode Just press \u00bbF\u00ab on your keyboard to show your presentation in fullscreen mode. Press the \u00bbESC\u00ab key to exit fullscreen mode. Embedded media Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown: video data-autoplay src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video If you want to enable or disable autoplay globally, for all embedded media, you can use the autoPlayMedia configuration option. If you set this to true ALL media will autoplay regardless of individual data-autoplay attributes. If you initialize with autoPlayMedia: false NO media will autoplay. Note that embedded HTML5 video / audio and YouTube/Vimeo iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute. Embedded iframes reveal.js automatically pushes two post messages to embedded iframes. slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden. Stretching elements Sometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below: section h2 This video will use up the remaining space on the slide /h2 video class= stretch src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video /section Limitations: - Only direct descendants of a slide section can be stretched - Only one descendant per slide section can be stretched Resize Event When reveal.js changes the scale of the slides it fires a resize event. You can subscribe to the event to resize your elements accordingly. Reveal.addEventListener( 'resize', function( event ) { // event.scale, event.oldScale, event.size } ); postMessage API The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2: window .postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' ); When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window: window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); if( data.namespace === 'reveal' data.eventName ==='slidechanged' ) { // Slide changed, see data.state for slide number } } ); This cross-window messaging can be toggled on or off using configuration flags. Reveal.initialize({ // ... // Exposes the reveal.js API through window.postMessage postMessage: true, // Dispatches all reveal.js events to the parent window through postMessage postMessageEvents: false }); PDF Export Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium and to be serving the presentation from a web server. Here's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300. Separate pages for fragments Fragments are printed on separate slides by default. Meaning if you have a slide with three fragment steps, it will generate three separate slides where the fragments appear incrementally. If you prefer printing all fragments in their visible states on the same slide you can set the pdfSeparateFragments config option to false. Page size Export dimensions are inferred from the configured presentation size . Slides that are too tall to fit within a single page will expand onto multiple pages. You can limit how many pages a slide may expand onto using the pdfMaxPagesPerSlide config option, for example Reveal.configure({ pdfMaxPagesPerSlide: 1 }) ensures that no slide ever grows to more than one printed page. Print stylesheet To enable the PDF print capability in your presentation, the special print stylesheet at /css/print/pdf.css must be loaded. The default index.html file handles this for you when print-pdf is included in the query string. If you're using a different HTML template, you can add this to your HEAD: script var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); /script Instructions Open your presentation with print-pdf included in the query string i.e. http://localhost:8000/?print-pdf. You can test this with revealjs.com?print-pdf . If you want to include speaker notes in your export, you can append showNotes=true to the query string: http://localhost:8000/?print-pdf showNotes=true Open the in-browser print dialog (CTRL/CMD+P). Change the Destination setting to Save as PDF . Change the Layout to Landscape . Change the Margins to None . Enable the Background graphics option. Click Save . Alternatively you can use the decktape project. Theming The framework comes with a few different themes included: black: Black background, white text, blue links (default theme) white: White background, black text, blue links league: Gray background, white text, blue links (default theme for reveal.js 3.0.0) beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html: link rel= stylesheet href= css/theme/black.css id= theme If you want to add a theme of your own see the instructions here: /css/theme/README.md . Speaker Notes reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the \u00bbS\u00ab key on your keyboard to open the notes window. A speaker timer starts as soon as the speaker view is opened. You can reset it to 00:00:00 at any time by simply clicking/tapping on it. Notes are defined by appending an aside element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown. Alternatively you can add your notes in a data-notes attribute on the slide. Like section data-notes=\"Something important\" /section . When used locally, this feature requires that reveal.js runs from a local web server . section h2 Some Slide /h2 aside class= notes Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit \u00bbS\u00ab on your keyboard). /aside /section If you're using the external Markdown plugin, you can add notes with the help of a special delimiter: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: /section # Title ## Sub-title Here is some content... Note: This will only display in the notes window. Share and Print Speaker Notes Notes are only visible to the speaker inside of the speaker view. If you wish to share your notes with others you can initialize reveal.js with the showNotes configuration value set to true . Notes will appear along the bottom of the presentations. When showNotes is enabled notes are also included when you export to PDF . By default, notes are printed in a box on top of the slide. If you'd rather print them on a separate page, after the slide, set showNotes: \"separate-page\" . Speaker notes clock and timers The speaker notes window will also show: Time elapsed since the beginning of the presentation. If you hover the mouse above this section, a timer reset button will appear. Current wall-clock time (Optionally) a pacing timer which indicates whether the current pace of the presentation is on track for the right timing (shown in green), and if not, whether the presenter should speed up (shown in red) or has the luxury of slowing down (blue). The pacing timer can be enabled by configuring by the defaultTiming parameter in the Reveal configuration block, which specifies the number of seconds per slide. 120 can be a reasonable rule of thumb. Timings can also be given per slide section by setting the data-timing attribute. Both values are in numbers of seconds. Server Side Speaker Notes In some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies: Reveal.initialize({ // ... dependencies: [ { src: 'socket.io/socket.io.js', async: true }, { src: 'plugin/notes-server/client.js', async: true } ] }); Then: Install Node.js (4.0.0 or later) Run npm install Run node plugin/notes-server Plugins Plugins should register themselves with reveal.js by calling Reveal.registerPlugin( 'myPluginID', MyPlugin ) . Registered plugin instances can optionally expose an \"init\" function that reveal.js will call to initialize them. When reveal.js is booted up via Reveal.initialize() , it will go through all registered plugins and invoke their \"init\" methods. If the \"init\" method returns a Promise, reveal.js will wait for that promise to be fullfilled before finshing the startup sequence and firing the ready event. Here's an example of a plugin that does some asynchronous work before reveal.js can proceed: let MyPlugin = { init: () = new Promise( resolve = setTimeout( resolve, 3000 ) ) }; Reveal.registerPlugin( 'myPlugin', MyPlugin ); Reveal.addEventListener( 'ready', () = console.log( 'Three seconds later...' ) ); Reveal.initialize(); If the init method does not return a Promise, the plugin is considered ready right away and will not hold up the reveal.js startup sequence. Retrieving Plugins If you want to check if a specific plugin is registered you can use the Reveal.hasPlugin method and pass in a plugin ID, for example: Reveal.hasPlugin( 'myPlugin' ) . If you want to retrieve a plugin instance you can use Reveal.getPlugin( 'myPlugin' ) . Multiplexing The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . The multiplex plugin needs the following 3 things to operate: Master presentation that has control Client presentations that follow the master Socket.io server to broadcast events from the master to the clients Master presentation Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation: npm install node-static static If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server. You can then access your master presentation at http://localhost:1947 Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, // and if you want speaker notes { src: 'plugin/notes-server/client.js', async: true } // other dependencies... ] }); Client presentation Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via http://example.com/path/to/presentation/client/index.html , with the configuration below causing them to connect to the socket.io server as clients. Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] }); Socket.io server Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands: npm install node plugin/multiplex Or you can use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . You'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit http://example.com/token , where http://example.com is the location of your socket.io server. Or if you're going to use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , visit https://reveal-js-multiplex-ccjbegmaii.now.sh/token . You are very welcome to point your presentations at the Socket.io server running at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. The easiest way to do this is by installing now . With that installed, deploying your own Multiplex server is as easy running the following command from the reveal.js folder: now plugin/multiplex . socket.io server as file static server The socket.io server can play the role of static file server for your client presentation, as in the example at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match.) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] }); MathJax If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you'll need to include it as a reveal.js dependency, find our more about dependencies here . The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the mathjax configuration value. Below is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the math config object at all. Reveal.initialize({ // other options ... math: { mathjax: 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js', config: 'TeX-AMS_HTML-full' // See http://docs.mathjax.org/en/latest/config-files.html // pass other options into `MathJax.Hub.Config()` TeX: { Macros: macros } }, dependencies: [ { src: 'plugin/math/math.js', async: true } ] }); Read MathJax's documentation if you need HTTPS delivery or serving of specific versions for stability. MathJax in Markdown If you want to include math inside of a presentation written in Markdown you need to wrap the formula in backticks. This prevents syntax conflicts between LaTeX and Markdown. For example: `$$ J(\\theta_0,\\theta_1) = \\sum_{i=0} $$` License MIT licensed Copyright (C) 2019 Hakim El Hattab, http://hakim.se","title":"reveal.js [![Build Status](https://travis-ci.org/hakimel/reveal.js.svg?branch=master)](https://travis-ci.org/hakimel/reveal.js) <a href=\"https://slides.com?ref=github\"><img src=\"https://s3.amazonaws.com/static.slid.es/images/slides-github-banner-320x40.png?1\" alt=\"Slides\" width=\"160\" height=\"20\"></a>"},{"location":"cppnow-2019/reveal.js/README.html#revealjs","text":"A framework for easily creating beautiful presentations using HTML. Check out the live demo . reveal.js comes with a broad range of features including nested slides , Markdown contents , PDF export , speaker notes and a JavaScript API . There's also a fully featured visual editor and platform for sharing reveal.js presentations at slides.com .","title":"reveal.js  "},{"location":"cppnow-2019/reveal.js/README.html#table-of-contents","text":"Online Editor Installation Basic setup Full setup Folder Structure Instructions Markup Markdown Element Attributes Slide Attributes Configuration Presentation Size Dependencies Ready Event Auto-sliding Keyboard Bindings Vertical Slide Navigation Touch Navigation Lazy Loading API Slide Changed Event Presentation State Slide States Slide Backgrounds Parallax Background Slide Transitions Internal links Fragments Fragment events Code syntax highlighting Slide number Overview mode Fullscreen mode Embedded media Stretching elements Resize Event postMessage API PDF Export Theming Speaker Notes Share and Print Speaker Notes Server Side Speaker Notes Plugins Multiplexing Master presentation Client presentation Socket.io server MathJax License","title":"Table of contents"},{"location":"cppnow-2019/reveal.js/README.html#more-reading","text":"Changelog : Up-to-date version history. Examples : Presentations created with reveal.js, add your own! Browser Support : Explanation of browser support and fallbacks. Plugins : A list of plugins that can be used to extend reveal.js.","title":"More reading"},{"location":"cppnow-2019/reveal.js/README.html#online-editor","text":"Presentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at https://slides.com .","title":"Online Editor"},{"location":"cppnow-2019/reveal.js/README.html#installation","text":"The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source.","title":"Installation"},{"location":"cppnow-2019/reveal.js/README.html#basic-setup","text":"The core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser. Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases Unzip and replace the example contents in index.html with your own Open index.html in a browser to view it","title":"Basic setup"},{"location":"cppnow-2019/reveal.js/README.html#full-setup","text":"Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code. Install Node.js (4.0.0 or later) Clone the reveal.js repository sh $ git clone https://github.com/hakimel/reveal.js.git Navigate to the reveal.js folder sh $ cd reveal.js Install dependencies sh $ npm install Serve the presentation and monitor source files for changes sh $ npm start Open http://localhost:8000 to view your presentation You can change the port by using npm start -- --port=8001 .","title":"Full setup"},{"location":"cppnow-2019/reveal.js/README.html#folder-structure","text":"css/ Core styles without which the project does not function js/ Like above but for JavaScript plugin/ Components that have been developed as extensions to reveal.js lib/ All other third party assets (JavaScript, CSS, fonts)","title":"Folder Structure"},{"location":"cppnow-2019/reveal.js/README.html#instructions","text":"","title":"Instructions"},{"location":"cppnow-2019/reveal.js/README.html#markup","text":"Here's a barebones example of a fully working reveal.js presentation: html head link rel= stylesheet href= css/reveal.css link rel= stylesheet href= css/theme/white.css /head body div class= reveal div class= slides section Slide 1 /section section Slide 2 /section /div /div script src= js/reveal.js /script script Reveal.initialize(); /script /body /html The presentation markup hierarchy needs to be .reveal .slides section where the section represents one slide and can be repeated indefinitely. If you place multiple section elements inside of another section they will be shown as vertical slides. The first of the vertical slides is the \"root\" of the others (at the top), and will be included in the horizontal sequence. For example: div class= reveal div class= slides section Single Horizontal Slide /section section section Vertical Slide 1 /section section Vertical Slide 2 /section /section /div /div","title":"Markup"},{"location":"cppnow-2019/reveal.js/README.html#markdown","text":"It's possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your section elements and wrap the contents in a textarea data-template like the example below. You'll also need to add the plugin/markdown/marked.js and plugin/markdown/markdown.js scripts (in that order) to your HTML file. This is based on data-markdown from Paul Irish modified to use marked to support GitHub Flavored Markdown . Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks). section data-markdown textarea data-template ## Page title A paragraph with some text and a [link](http://hakim.se). /textarea /section","title":"Markdown"},{"location":"cppnow-2019/reveal.js/README.html#external-markdown","text":"You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file: the data-separator attribute defines a regular expression for horizontal slides (defaults to ^\\r?\\n---\\r?\\n$ , a newline-bounded horizontal rule) and data-separator-vertical defines vertical slides (disabled by default). The data-separator-notes attribute is a regular expression for specifying the beginning of the current slide's speaker notes (defaults to notes?: , so it will match both \"note:\" and \"notes:\"). The data-charset attribute is optional and specifies which charset to use when loading the external file. When used locally, this feature requires that reveal.js runs from a local web server . The following example customises all available options: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: data-charset= iso-8859-15 !-- Note that Windows uses `\\r\\n` instead of `\\n` as its linefeed character. For a regex that supports all operating systems, use `\\r?\\n` instead of `\\n`. -- /section","title":"External Markdown"},{"location":"cppnow-2019/reveal.js/README.html#element-attributes","text":"Special syntax (through HTML comments) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things. section data-markdown script type= text/template - Item 1 !-- .element: class= fragment data-fragment-index= 2 -- - Item 2 !-- .element: class= fragment data-fragment-index= 1 -- /script /section","title":"Element Attributes"},{"location":"cppnow-2019/reveal.js/README.html#slide-attributes","text":"Special syntax (through HTML comments) is available for adding attributes to the slide section elements generated by your Markdown. section data-markdown script type= text/template !-- .slide: data-background= #ff0000 -- Markdown content /script /section","title":"Slide Attributes"},{"location":"cppnow-2019/reveal.js/README.html#configuring-marked","text":"We use marked to parse Markdown. To customise marked's rendering, you can pass in options when configuring Reveal : Reveal.initialize({ // Options which are passed into marked // See https://marked.js.org/#/USING_ADVANCED.md#options markdown: { smartypants: true } });","title":"Configuring marked"},{"location":"cppnow-2019/reveal.js/README.html#configuration","text":"At the end of your page you need to initialize reveal by running the following code. Note that all configuration values are optional and will default to the values specified below. Reveal.initialize({ // Display presentation control arrows controls: true, // Help the user learn the controls by providing hints, for example by // bouncing the down arrow when they first encounter a vertical slide controlsTutorial: true, // Determines where controls appear, edges or bottom-right controlsLayout: 'bottom-right', // Visibility rule for backwards navigation arrows; faded , hidden // or visible controlsBackArrows: 'faded', // Display a presentation progress bar progress: true, // Display the page number of the current slide slideNumber: false, // Add the current slide number to the URL hash so that reloading the // page/copying the URL will return you to the same slide hash: false, // Push each slide change to the browser history. Implies `hash: true` history: false, // Enable keyboard shortcuts for navigation keyboard: true, // Enable the slide overview mode overview: true, // Vertical centering of slides center: true, // Enables touch navigation on devices with touch input touch: true, // Loop the presentation loop: false, // Change the presentation direction to be RTL rtl: false, // See https://github.com/hakimel/reveal.js/#navigation-mode navigationMode: 'default', // Randomizes the order of slides each time the presentation loads shuffle: false, // Turns fragments on and off globally fragments: true, // Flags whether to include the current fragment in the URL, // so that reloading brings you to the same fragment position fragmentInURL: false, // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded: false, // Flags if we should show a help overlay when the questionmark // key is pressed help: true, // Flags if speaker notes should be visible to all viewers showNotes: false, // Global override for autoplaying embedded media (video/audio/iframe) // - null: Media will only autoplay if data-autoplay is present // - true: All media will autoplay, regardless of individual setting // - false: No media will autoplay, regardless of individual setting autoPlayMedia: null, // Global override for preloading lazy-loaded iframes // - null: Iframes with data-src AND data-preload will be loaded when within // the viewDistance, iframes with only data-src will be loaded when visible // - true: All iframes with data-src will be loaded when within the viewDistance // - false: All iframes with data-src will be loaded only when visible preloadIframes: null, // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide: 0, // Stop auto-sliding after user input autoSlideStoppable: true, // Use this method for navigation when auto-sliding autoSlideMethod: Reveal.navigateNext, // Specify the average time in seconds that you think you will spend // presenting each slide. This is used to show a pacing timer in the // speaker view defaultTiming: 120, // Enable slide navigation via mouse wheel mouseWheel: false, // Hide cursor if inactive hideInactiveCursor: true, // Time before the cursor is hidden (in ms) hideCursorTime: 5000, // Hides the address bar on mobile devices hideAddressBar: true, // Opens links in an iframe preview overlay // Add `data-preview-link` and `data-preview-link= false ` to customise each link // individually previewLinks: false, // Transition style transition: 'slide', // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed: 'default', // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition: 'fade', // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance: 3, // Parallax background image parallaxBackgroundImage: '', // e.g. 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg' // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: null, parallaxBackgroundVertical: null, // The display mode that will be used to show slides display: 'block' }); The configuration can be updated after initialization using the configure method: // Turn autoSlide off Reveal.configure({ autoSlide: 0 }); // Start auto-sliding every 5s Reveal.configure({ autoSlide: 5000 });","title":"Configuration"},{"location":"cppnow-2019/reveal.js/README.html#presentation-size","text":"All presentations have a normal size, that is, the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport. See below for a list of configuration options related to sizing, including default values: Reveal.initialize({ // ... // The normal size of the presentation, aspect ratio will be preserved // when the presentation is scaled to fit different resolutions. Can be // specified using percentage units. width: 960, height: 700, // Factor of the display size that should remain empty around the content margin: 0.1, // Bounds for smallest/largest possible scale to apply to content minScale: 0.2, maxScale: 1.5 }); If you wish to disable this behavior and do your own scaling (e.g. using media queries), try these settings: Reveal.initialize({ // ... width: 100% , height: 100% , margin: 0, minScale: 1, maxScale: 1 });","title":"Presentation Size"},{"location":"cppnow-2019/reveal.js/README.html#dependencies","text":"Reveal.js doesn't rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example: Reveal.initialize({ dependencies: [ // Interpret Markdown in section elements { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, // Syntax highlight for code elements { src: 'plugin/highlight/highlight.js', async: true }, // Zoom in and out with Alt+click { src: 'plugin/zoom-js/zoom.js', async: true }, // Speaker notes { src: 'plugin/notes/notes.js', async: true }, // MathJax { src: 'plugin/math/math.js', async: true } ] }); You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src : Path to the script to load - async : [optional] Flags if the script should load after reveal.js has started, defaults to false - callback : [optional] Function to execute when the script has loaded - condition : [optional] Function which must return true for the script to be loaded","title":"Dependencies"},{"location":"cppnow-2019/reveal.js/README.html#ready-event","text":"A ready event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call Reveal.isReady() . Reveal.addEventListener( 'ready', function( event ) { // event.currentSlide, event.indexh, event.indexv } ); Note that we also add a .ready class to the .reveal element so that you can hook into this with CSS.","title":"Ready Event"},{"location":"cppnow-2019/reveal.js/README.html#auto-sliding","text":"Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides: // Slide every five seconds Reveal.configure({ autoSlide: 5000 }); When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing \u00bbA\u00ab on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config. You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute: section data-autoslide= 2000 p After 2 seconds the first fragment will be shown. /p p class= fragment data-autoslide= 10000 After 10 seconds the next fragment will be shown. /p p class= fragment Now, the fragment is displayed for 2 seconds before the next slide is shown. /p /section To override the method used for navigation when auto-sliding, you can specify the autoSlideMethod setting. To only navigate along the top layer and ignore vertical slides, set this to Reveal.navigateRight . Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired.","title":"Auto-sliding"},{"location":"cppnow-2019/reveal.js/README.html#keyboard-bindings","text":"If you're unhappy with any of the default keyboard bindings you can override them using the keyboard config option: Reveal.configure({ keyboard: { 13: 'next', // go to the next slide when the ENTER key is pressed 27: function() {}, // do something custom when ESC is pressed 32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding) } });","title":"Keyboard Bindings"},{"location":"cppnow-2019/reveal.js/README.html#vertical-slide-navigation","text":"Slides can be nested within other slides to create vertical stacks (see Markup ). When presenting, you use the left/right arrows to step through the main (horizontal) slides. When you arrive at a vertical stack you can optionally press the up/down arrows to view the vertical slides or skip past them by pressing the right arrow. Here's an example showing a bird's-eye view of what this looks like in action:","title":"Vertical Slide Navigation"},{"location":"cppnow-2019/reveal.js/README.html#navigation-mode","text":"You can finetune the reveal.js navigation behavior by using the navigationMode config option. Note that these options are only useful for presnetations that use a mix of horizontal and vertical slides. The following navigation modes are available: Value Description default Left/right arrow keys step between horizontal slides. Up/down arrow keys step between vertical slides. Space key steps through all slides (both horizontal and vertical). linear Removes the up/down arrows. Left/right arrows step through all slides (both horizontal and vertical). grid When this is enabled, stepping left/right from a vertical stack to an adjacent vertical stack will land you at the same vertical index. Consider a deck with six slides ordered in two vertical stacks: 1.1 2.1 1.2 2.2 1.3 2.3 If you're on slide 1.3 and navigate right, you will normally move from 1.3 - 2.1. With navigationMode set to \"grid\" the same navigation takes you from 1.3 - 2.3.","title":"Navigation Mode"},{"location":"cppnow-2019/reveal.js/README.html#touch-navigation","text":"You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js. If there's some part of your content that needs to remain accessible to touch events you'll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled.","title":"Touch Navigation"},{"location":"cppnow-2019/reveal.js/README.html#lazy-loading","text":"When working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option. To enable lazy loading all you need to do is change your src attributes to data-src as shown below. This is supported for image, video, audio and iframe elements. section img data-src= image.png iframe data-src= http://hakim.se /iframe video source data-src= video.webm type= video/webm / source data-src= video.mp4 type= video/mp4 / /video /section","title":"Lazy Loading"},{"location":"cppnow-2019/reveal.js/README.html#lazy-loading-iframes","text":"Note that lazy loaded iframes ignore the viewDistance configuration and will only load when their containing slide becomes visible. Iframes are also unloaded as soon as the slide is hidden. When we lazy load a video or audio element, reveal.js won't start playing that content until the slide becomes visible. However there is no way to control this for an iframe since that could contain any kind of content. That means if we loaded an iframe before the slide is visible on screen it could begin playing media and sound in the background. You can override this behavior with the data-preload attribute. The iframe below will be loaded according to the viewDistance . section iframe data-src= http://hakim.se data-preload /iframe /section You can also change the default globally with the preloadIframes configuration option. If set to true ALL iframes with a data-src attribute will be preloaded when within the viewDistance regardless of individual data-preload attributes. If set to false , all iframes will only be loaded when they become visible.","title":"Lazy Loading Iframes"},{"location":"cppnow-2019/reveal.js/README.html#api","text":"The Reveal object exposes a JavaScript API for controlling navigation and reading state: // Navigation Reveal.slide( indexh, indexv, indexf ); Reveal.left(); Reveal.right(); Reveal.up(); Reveal.down(); Reveal.prev(); Reveal.next(); Reveal.prevFragment(); Reveal.nextFragment(); // Randomize the order of slides Reveal.shuffle(); // Toggle presentation states, optionally pass true/false to force on/off Reveal.toggleOverview(); Reveal.togglePause(); Reveal.toggleAutoSlide(); // Shows a help overlay with keyboard shortcuts, optionally pass true/false // to force on/off Reveal.toggleHelp(); // Change a config value at runtime Reveal.configure({ controls: true }); // Returns the present configuration options Reveal.getConfig(); // Fetch the current scale of the presentation Reveal.getScale(); // Retrieves the previous and current slide elements Reveal.getPreviousSlide(); Reveal.getCurrentSlide(); Reveal.getIndices(); // { h: 0, v: 0, f: 0 } Reveal.getSlidePastCount(); Reveal.getProgress(); // (0 == first slide, 1 == last slide) Reveal.getSlides(); // Array of all slides Reveal.getTotalSlides(); // Total number of slides // Returns the speaker notes for the current slide Reveal.getSlideNotes(); // State checks Reveal.isFirstSlide(); Reveal.isLastSlide(); Reveal.isOverview(); Reveal.isPaused(); Reveal.isAutoSliding(); // Returns the top-level DOM element getRevealElement(); // div class= reveal ... /div","title":"API"},{"location":"cppnow-2019/reveal.js/README.html#custom-key-bindings","text":"Custom key bindings can be added and removed using the following Javascript API. Custom key bindings will override the default keyboard bindings, but will in turn be overridden by the user defined bindings in the keyboard config option. Reveal.addKeyBinding( binding, callback ); Reveal.removeKeyBinding( keyCode ); For example // The binding parameter provides the following properties // keyCode: the keycode for binding to the callback // key: the key label to show in the help overlay // description: the description of the action to show in the help overlay Reveal.addKeyBinding( { keyCode: 84, key: 'T', description: 'Start timer' }, function() { // start timer } ) // The binding parameter can also be a direct keycode without providing the help description Reveal.addKeyBinding( 82, function() { // reset timer } ) This allows plugins to add key bindings directly to Reveal so they can make use of Reveal's pre-processing logic for key handling (for example, ignoring key presses when paused); and be included in the help overlay (optional)","title":"Custom Key Bindings"},{"location":"cppnow-2019/reveal.js/README.html#slide-changed-event","text":"A slidechanged event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes. Some libraries, like MathJax (see #226 ), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'slidechanged', function( event ) { // event.previousSlide, event.currentSlide, event.indexh, event.indexv } );","title":"Slide Changed Event"},{"location":"cppnow-2019/reveal.js/README.html#presentation-state","text":"The presentation's current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire. Reveal.slide( 1 ); // we're on slide 1 var state = Reveal.getState(); Reveal.slide( 3 ); // we're on slide 3 Reveal.setState( state ); // we're back on slide 1","title":"Presentation State"},{"location":"cppnow-2019/reveal.js/README.html#slide-states","text":"If you set data-state=\"somestate\" on a slide section , \"somestate\" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide. Furthermore you can also listen to these changes in state via JavaScript: Reveal.addEventListener( 'somestate', function() { // TODO: Sprinkle magic }, false );","title":"Slide States"},{"location":"cppnow-2019/reveal.js/README.html#slide-backgrounds","text":"Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your section elements. Four different types of backgrounds are supported: color, image, video and iframe.","title":"Slide Backgrounds"},{"location":"cppnow-2019/reveal.js/README.html#color-backgrounds","text":"All CSS color formats are supported, including hex values, keywords, rgba() or hsl() . section data-background-color= #ff0000 h2 Color /h2 /section","title":"Color Backgrounds"},{"location":"cppnow-2019/reveal.js/README.html#image-backgrounds","text":"By default, background images are resized to cover the full page. Available options: Attribute Default Description data-background-image URL of the image to show. GIFs restart when the slide opens. data-background-size cover See background-size on MDN. data-background-position center See background-position on MDN. data-background-repeat no-repeat See background-repeat on MDN. data-background-opacity 1 Opacity of the background image on a 0-1 scale. 0 is transparent and 1 is fully opaque. section data-background-image= http://example.com/image.png h2 Image /h2 /section section data-background-image= http://example.com/image.png data-background-size= 100px data-background-repeat= repeat h2 This background image will be sized to 100px and repeated /h2 /section","title":"Image Backgrounds"},{"location":"cppnow-2019/reveal.js/README.html#video-backgrounds","text":"Automatically plays a full size video behind the slide. Attribute Default Description data-background-video A single video source, or a comma separated list of video sources. data-background-video-loop false Flags if the video should play repeatedly. data-background-video-muted false Flags if the audio should be muted. data-background-size cover Use cover for full screen and some cropping or contain for letterboxing. data-background-opacity 1 Opacity of the background video on a 0-1 scale. 0 is transparent and 1 is fully opaque. section data-background-video= https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm data-background-video-loop data-background-video-muted h2 Video /h2 /section","title":"Video Backgrounds"},{"location":"cppnow-2019/reveal.js/README.html#iframe-backgrounds","text":"Embeds a web page as a slide background that covers 100% of the reveal.js width and height. The iframe is in the background layer, behind your slides, and as such it's not possible to interact with it by default. To make your background interactive, you can add the data-background-interactive attribute. section data-background-iframe= https://slides.com data-background-interactive h2 Iframe /h2 /section","title":"Iframe Backgrounds"},{"location":"cppnow-2019/reveal.js/README.html#background-transitions","text":"Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition.","title":"Background Transitions"},{"location":"cppnow-2019/reveal.js/README.html#parallax-background","text":"If you want to use a parallax scrolling background, set the first two properties below when initializing reveal.js (the other two are optional). Reveal.initialize({ // Parallax background image parallaxBackgroundImage: '', // e.g. https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px - currently only pixels are supported (don't use % or auto) // Number of pixels to move the parallax background per slide // - Calculated automatically unless specified // - Set to 0 to disable movement along an axis parallaxBackgroundHorizontal: 200, parallaxBackgroundVertical: 50 }); Make sure that the background size is much bigger than screen size to allow for some scrolling. View example .","title":"Parallax Background"},{"location":"cppnow-2019/reveal.js/README.html#slide-transitions","text":"The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute: section data-transition= zoom h2 This slide will override the presentation transition and zoom! /h2 /section section data-transition-speed= fast h2 Choose from three transition speeds: default, fast or slow! /h2 /section You can also use different in and out transitions for the same slide: section data-transition= slide The train goes on \u2026 /section section data-transition= slide and on \u2026 /section section data-transition= slide-in fade-out and stops. /section section data-transition= fade-in slide-out (Passengers entering and leaving) /section section data-transition= slide And it starts again. /section You can choose from none , fade , slide , convex , concave and zoom .","title":"Slide Transitions"},{"location":"cppnow-2019/reveal.js/README.html#internal-links","text":"It's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute ( section id=\"some-slide\" ): a href= #/2/2 Link /a a href= #/some-slide Link /a You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it's a valid navigation route based on the current slide. a href= # class= navigate-left a href= # class= navigate-right a href= # class= navigate-up a href= # class= navigate-down a href= # class= navigate-prev !-- Previous vertical or horizontal slide -- a href= # class= navigate-next !-- Next vertical or horizontal slide --","title":"Internal links"},{"location":"cppnow-2019/reveal.js/README.html#fragments","text":"Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here's an example: http://revealjs.com/#/fragments The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment: section p class= fragment grow grow /p p class= fragment shrink shrink /p p class= fragment fade-out fade-out /p p class= fragment fade-up fade-up (also down, left and right!) /p p class= fragment fade-in-then-out fades in, then out when we move to the next step /p p class= fragment fade-in-then-semi-out fades in, then obfuscate when we move to the next step /p p class= fragment highlight-current-blue blue only once /p p class= fragment highlight-red highlight-red /p p class= fragment highlight-green highlight-green /p p class= fragment highlight-blue highlight-blue /p /section Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second. section span class= fragment fade-in span class= fragment fade-out I'll fade in, then out /span /span /section The display order of fragments can be controlled using the data-fragment-index attribute. section p class= fragment data-fragment-index= 3 Appears last /p p class= fragment data-fragment-index= 1 Appears first /p p class= fragment data-fragment-index= 2 Appears second /p /section","title":"Fragments"},{"location":"cppnow-2019/reveal.js/README.html#fragment-events","text":"When a slide fragment is either shown or hidden reveal.js will dispatch an event. Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'fragmentshown', function( event ) { // event.fragment = the fragment DOM element } ); Reveal.addEventListener( 'fragmenthidden', function( event ) { // event.fragment = the fragment DOM element } );","title":"Fragment events"},{"location":"cppnow-2019/reveal.js/README.html#code-syntax-highlighting","text":"By default, Reveal is configured with highlight.js for code syntax highlighting. To enable syntax highlighting, you'll have to load the highlight plugin ( plugin/highlight/highlight.js ) and a highlight.js CSS theme (Reveal comes packaged with the Monokai themes: lib/css/monokai.css ). Reveal.initialize({ // More info https://github.com/hakimel/reveal.js#dependencies dependencies: [ { src: 'plugin/highlight/highlight.js', async: true }, ] }); Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present, surrounding whitespace is automatically removed. HTML will be escaped by default. To avoid this, for example if you are using mark to call out a line of code, add the data-noescape attribute to the code element. section pre code data-trim data-noescape (def lazy-fib (concat [0 1] mark ((fn rfib [a b] /mark (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) /code /pre /section","title":"Code Syntax Highlighting"},{"location":"cppnow-2019/reveal.js/README.html#line-numbers-highlights","text":"To enable line numbers, add data-line-numbers to your code tags. If you want to highlight specific lines you can provide a comma separated list of line numbers using the same attribute. For example, in the following example lines 4 and 8-11 are highlighted: pre code class= hljs data-line-numbers= 4,8-11 import React, { useState } from 'react'; function Example() { const [count, setCount] = useState(0); return ( div p You clicked {count} times /p button onClick={() = setCount(count + 1)} Click me /button /div ); } /code /pre","title":"Line Numbers &amp; Highlights"},{"location":"cppnow-2019/reveal.js/README.html#slide-number","text":"If you would like to display the page number of the current slide you can do so using the slideNumber and showSlideNumber configuration values. // Shows the slide number using default formatting Reveal.configure({ slideNumber: true }); // Slide number formatting can be configured using these variables: // h.v : horizontal . vertical slide number (default) // h/v : horizontal / vertical slide number // c : flattened slide number // c/t : flattened slide number / total slides Reveal.configure({ slideNumber: 'c/t' }); // You can provide a function to fully customize the number: Reveal.configure({ slideNumber: function() { // Ignore numbering of vertical slides return [ Reveal.getIndices().h ]; }}); // Control which views the slide number displays on using the showSlideNumber value: // all : show on all views (default) // speaker : only show slide numbers on speaker notes view // print : only show slide numbers when printing to PDF Reveal.configure({ showSlideNumber: 'speaker' });","title":"Slide number"},{"location":"cppnow-2019/reveal.js/README.html#overview-mode","text":"Press \u00bbESC\u00ab or \u00bbO\u00ab keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks: Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } ); Reveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal.toggleOverview();","title":"Overview mode"},{"location":"cppnow-2019/reveal.js/README.html#fullscreen-mode","text":"Just press \u00bbF\u00ab on your keyboard to show your presentation in fullscreen mode. Press the \u00bbESC\u00ab key to exit fullscreen mode.","title":"Fullscreen mode"},{"location":"cppnow-2019/reveal.js/README.html#embedded-media","text":"Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown: video data-autoplay src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video If you want to enable or disable autoplay globally, for all embedded media, you can use the autoPlayMedia configuration option. If you set this to true ALL media will autoplay regardless of individual data-autoplay attributes. If you initialize with autoPlayMedia: false NO media will autoplay. Note that embedded HTML5 video / audio and YouTube/Vimeo iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute.","title":"Embedded media"},{"location":"cppnow-2019/reveal.js/README.html#embedded-iframes","text":"reveal.js automatically pushes two post messages to embedded iframes. slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden.","title":"Embedded iframes"},{"location":"cppnow-2019/reveal.js/README.html#stretching-elements","text":"Sometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below: section h2 This video will use up the remaining space on the slide /h2 video class= stretch src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video /section Limitations: - Only direct descendants of a slide section can be stretched - Only one descendant per slide section can be stretched","title":"Stretching elements"},{"location":"cppnow-2019/reveal.js/README.html#resize-event","text":"When reveal.js changes the scale of the slides it fires a resize event. You can subscribe to the event to resize your elements accordingly. Reveal.addEventListener( 'resize', function( event ) { // event.scale, event.oldScale, event.size } );","title":"Resize Event"},{"location":"cppnow-2019/reveal.js/README.html#postmessage-api","text":"The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2: window .postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' ); When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window: window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); if( data.namespace === 'reveal' data.eventName ==='slidechanged' ) { // Slide changed, see data.state for slide number } } ); This cross-window messaging can be toggled on or off using configuration flags. Reveal.initialize({ // ... // Exposes the reveal.js API through window.postMessage postMessage: true, // Dispatches all reveal.js events to the parent window through postMessage postMessageEvents: false });","title":"postMessage API"},{"location":"cppnow-2019/reveal.js/README.html#pdf-export","text":"Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium and to be serving the presentation from a web server. Here's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300.","title":"PDF Export"},{"location":"cppnow-2019/reveal.js/README.html#separate-pages-for-fragments","text":"Fragments are printed on separate slides by default. Meaning if you have a slide with three fragment steps, it will generate three separate slides where the fragments appear incrementally. If you prefer printing all fragments in their visible states on the same slide you can set the pdfSeparateFragments config option to false.","title":"Separate pages for fragments"},{"location":"cppnow-2019/reveal.js/README.html#page-size","text":"Export dimensions are inferred from the configured presentation size . Slides that are too tall to fit within a single page will expand onto multiple pages. You can limit how many pages a slide may expand onto using the pdfMaxPagesPerSlide config option, for example Reveal.configure({ pdfMaxPagesPerSlide: 1 }) ensures that no slide ever grows to more than one printed page.","title":"Page size"},{"location":"cppnow-2019/reveal.js/README.html#print-stylesheet","text":"To enable the PDF print capability in your presentation, the special print stylesheet at /css/print/pdf.css must be loaded. The default index.html file handles this for you when print-pdf is included in the query string. If you're using a different HTML template, you can add this to your HEAD: script var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css'; document.getElementsByTagName( 'head' )[0].appendChild( link ); /script","title":"Print stylesheet"},{"location":"cppnow-2019/reveal.js/README.html#instructions_1","text":"Open your presentation with print-pdf included in the query string i.e. http://localhost:8000/?print-pdf. You can test this with revealjs.com?print-pdf . If you want to include speaker notes in your export, you can append showNotes=true to the query string: http://localhost:8000/?print-pdf showNotes=true Open the in-browser print dialog (CTRL/CMD+P). Change the Destination setting to Save as PDF . Change the Layout to Landscape . Change the Margins to None . Enable the Background graphics option. Click Save . Alternatively you can use the decktape project.","title":"Instructions"},{"location":"cppnow-2019/reveal.js/README.html#theming","text":"The framework comes with a few different themes included: black: Black background, white text, blue links (default theme) white: White background, black text, blue links league: Gray background, white text, blue links (default theme for reveal.js 3.0.0) beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html: link rel= stylesheet href= css/theme/black.css id= theme If you want to add a theme of your own see the instructions here: /css/theme/README.md .","title":"Theming"},{"location":"cppnow-2019/reveal.js/README.html#speaker-notes","text":"reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the \u00bbS\u00ab key on your keyboard to open the notes window. A speaker timer starts as soon as the speaker view is opened. You can reset it to 00:00:00 at any time by simply clicking/tapping on it. Notes are defined by appending an aside element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown. Alternatively you can add your notes in a data-notes attribute on the slide. Like section data-notes=\"Something important\" /section . When used locally, this feature requires that reveal.js runs from a local web server . section h2 Some Slide /h2 aside class= notes Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit \u00bbS\u00ab on your keyboard). /aside /section If you're using the external Markdown plugin, you can add notes with the help of a special delimiter: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: /section # Title ## Sub-title Here is some content... Note: This will only display in the notes window.","title":"Speaker Notes"},{"location":"cppnow-2019/reveal.js/README.html#share-and-print-speaker-notes","text":"Notes are only visible to the speaker inside of the speaker view. If you wish to share your notes with others you can initialize reveal.js with the showNotes configuration value set to true . Notes will appear along the bottom of the presentations. When showNotes is enabled notes are also included when you export to PDF . By default, notes are printed in a box on top of the slide. If you'd rather print them on a separate page, after the slide, set showNotes: \"separate-page\" .","title":"Share and Print Speaker Notes"},{"location":"cppnow-2019/reveal.js/README.html#speaker-notes-clock-and-timers","text":"The speaker notes window will also show: Time elapsed since the beginning of the presentation. If you hover the mouse above this section, a timer reset button will appear. Current wall-clock time (Optionally) a pacing timer which indicates whether the current pace of the presentation is on track for the right timing (shown in green), and if not, whether the presenter should speed up (shown in red) or has the luxury of slowing down (blue). The pacing timer can be enabled by configuring by the defaultTiming parameter in the Reveal configuration block, which specifies the number of seconds per slide. 120 can be a reasonable rule of thumb. Timings can also be given per slide section by setting the data-timing attribute. Both values are in numbers of seconds.","title":"Speaker notes clock and timers"},{"location":"cppnow-2019/reveal.js/README.html#server-side-speaker-notes","text":"In some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies: Reveal.initialize({ // ... dependencies: [ { src: 'socket.io/socket.io.js', async: true }, { src: 'plugin/notes-server/client.js', async: true } ] }); Then: Install Node.js (4.0.0 or later) Run npm install Run node plugin/notes-server","title":"Server Side Speaker Notes"},{"location":"cppnow-2019/reveal.js/README.html#plugins","text":"Plugins should register themselves with reveal.js by calling Reveal.registerPlugin( 'myPluginID', MyPlugin ) . Registered plugin instances can optionally expose an \"init\" function that reveal.js will call to initialize them. When reveal.js is booted up via Reveal.initialize() , it will go through all registered plugins and invoke their \"init\" methods. If the \"init\" method returns a Promise, reveal.js will wait for that promise to be fullfilled before finshing the startup sequence and firing the ready event. Here's an example of a plugin that does some asynchronous work before reveal.js can proceed: let MyPlugin = { init: () = new Promise( resolve = setTimeout( resolve, 3000 ) ) }; Reveal.registerPlugin( 'myPlugin', MyPlugin ); Reveal.addEventListener( 'ready', () = console.log( 'Three seconds later...' ) ); Reveal.initialize(); If the init method does not return a Promise, the plugin is considered ready right away and will not hold up the reveal.js startup sequence.","title":"Plugins"},{"location":"cppnow-2019/reveal.js/README.html#retrieving-plugins","text":"If you want to check if a specific plugin is registered you can use the Reveal.hasPlugin method and pass in a plugin ID, for example: Reveal.hasPlugin( 'myPlugin' ) . If you want to retrieve a plugin instance you can use Reveal.getPlugin( 'myPlugin' ) .","title":"Retrieving Plugins"},{"location":"cppnow-2019/reveal.js/README.html#multiplexing","text":"The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . The multiplex plugin needs the following 3 things to operate: Master presentation that has control Client presentations that follow the master Socket.io server to broadcast events from the master to the clients","title":"Multiplexing"},{"location":"cppnow-2019/reveal.js/README.html#master-presentation","text":"Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation: npm install node-static static If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server. You can then access your master presentation at http://localhost:1947 Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, // and if you want speaker notes { src: 'plugin/notes-server/client.js', async: true } // other dependencies... ] });","title":"Master presentation"},{"location":"cppnow-2019/reveal.js/README.html#client-presentation","text":"Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via http://example.com/path/to/presentation/client/index.html , with the configuration below causing them to connect to the socket.io server as clients. Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'https://reveal-js-multiplex-ccjbegmaii.now.sh' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] });","title":"Client presentation"},{"location":"cppnow-2019/reveal.js/README.html#socketio-server","text":"Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands: npm install node plugin/multiplex Or you can use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . You'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit http://example.com/token , where http://example.com is the location of your socket.io server. Or if you're going to use the socket.io server at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , visit https://reveal-js-multiplex-ccjbegmaii.now.sh/token . You are very welcome to point your presentations at the Socket.io server running at https://reveal-js-multiplex-ccjbegmaii.now.sh/ , but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. The easiest way to do this is by installing now . With that installed, deploying your own Multiplex server is as easy running the following command from the reveal.js folder: now plugin/multiplex .","title":"Socket.io server"},{"location":"cppnow-2019/reveal.js/README.html#socketio-server-as-file-static-server","text":"The socket.io server can play the role of static file server for your client presentation, as in the example at https://reveal-js-multiplex-ccjbegmaii.now.sh/ . (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match.) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open https://reveal-js-multiplex-ccjbegmaii.now.sh/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] });","title":"socket.io server as file static server"},{"location":"cppnow-2019/reveal.js/README.html#mathjax","text":"If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you'll need to include it as a reveal.js dependency, find our more about dependencies here . The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the mathjax configuration value. Below is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the math config object at all. Reveal.initialize({ // other options ... math: { mathjax: 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js', config: 'TeX-AMS_HTML-full' // See http://docs.mathjax.org/en/latest/config-files.html // pass other options into `MathJax.Hub.Config()` TeX: { Macros: macros } }, dependencies: [ { src: 'plugin/math/math.js', async: true } ] }); Read MathJax's documentation if you need HTTPS delivery or serving of specific versions for stability.","title":"MathJax"},{"location":"cppnow-2019/reveal.js/README.html#mathjax-in-markdown","text":"If you want to include math inside of a presentation written in Markdown you need to wrap the formula in backticks. This prevents syntax conflicts between LaTeX and Markdown. For example: `$$ J(\\theta_0,\\theta_1) = \\sum_{i=0} $$`","title":"MathJax in Markdown"},{"location":"cppnow-2019/reveal.js/README.html#license","text":"MIT licensed Copyright (C) 2019 Hakim El Hattab, http://hakim.se","title":"License"},{"location":"cppnow-2019/reveal.js/CONTRIBUTING.html","text":"Contributing Please keep the issue tracker limited to bug reports , feature requests and pull requests . Personal Support If you have personal support or setup questions the best place to ask those are StackOverflow . Bug Reports When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested. Pull Requests Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master) Plugins Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"CONTRIBUTING"},{"location":"cppnow-2019/reveal.js/CONTRIBUTING.html#contributing","text":"Please keep the issue tracker limited to bug reports , feature requests and pull requests .","title":"Contributing"},{"location":"cppnow-2019/reveal.js/CONTRIBUTING.html#personal-support","text":"If you have personal support or setup questions the best place to ask those are StackOverflow .","title":"Personal Support"},{"location":"cppnow-2019/reveal.js/CONTRIBUTING.html#bug-reports","text":"When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested.","title":"Bug Reports"},{"location":"cppnow-2019/reveal.js/CONTRIBUTING.html#pull-requests","text":"Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master)","title":"Pull Requests"},{"location":"cppnow-2019/reveal.js/CONTRIBUTING.html#plugins","text":"Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"Plugins"},{"location":"cppnow-2019/reveal.js/css/theme/README.html","text":"Dependencies Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceeding: https://github.com/hakimel/reveal.js#full-setup Creating a Theme To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run npm run build -- css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Home"},{"location":"cppnow-2019/reveal.js/css/theme/README.html#dependencies","text":"Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceeding: https://github.com/hakimel/reveal.js#full-setup","title":"Dependencies"},{"location":"cppnow-2019/reveal.js/css/theme/README.html#creating-a-theme","text":"To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run npm run build -- css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Creating a Theme"},{"location":"cppnow-2019/reveal.js/plugin/markdown/example.html","text":"Markdown Demo External 1.1 Content 1.1 Note: This will only appear in the speaker notes window. External 1.2 Content 1.2 External 2 Content 2.1 External 3.1 Content 3.1 External 3.2 Content 3.2 External 3.3","title":"Markdown Demo"},{"location":"cppnow-2019/reveal.js/plugin/markdown/example.html#markdown-demo","text":"","title":"Markdown Demo"},{"location":"cppnow-2019/reveal.js/plugin/markdown/example.html#external-11","text":"Content 1.1 Note: This will only appear in the speaker notes window.","title":"External 1.1"},{"location":"cppnow-2019/reveal.js/plugin/markdown/example.html#external-12","text":"Content 1.2","title":"External 1.2"},{"location":"cppnow-2019/reveal.js/plugin/markdown/example.html#external-2","text":"Content 2.1","title":"External 2"},{"location":"cppnow-2019/reveal.js/plugin/markdown/example.html#external-31","text":"Content 3.1","title":"External 3.1"},{"location":"cppnow-2019/reveal.js/plugin/markdown/example.html#external-32","text":"Content 3.2","title":"External 3.2"},{"location":"cppnow-2019/reveal.js/plugin/markdown/example.html#external-33","text":"","title":"External 3.3"},{"location":"cppnow-2019/reveal.js/test/simple.html","text":"Slide 1.1 var a = 1; Slide 1.2 Slide 2","title":"Simple"},{"location":"cppnow-2019/reveal.js/test/simple.html#slide-11","text":"var a = 1;","title":"Slide 1.1"},{"location":"cppnow-2019/reveal.js/test/simple.html#slide-12","text":"","title":"Slide 1.2"},{"location":"cppnow-2019/reveal.js/test/simple.html#slide-2","text":"","title":"Slide 2"},{"location":"meetingcpp-2016/README.html","text":"reveal.js A framework for easily creating beautiful presentations using HTML. Check out the live demo . reveal.js comes with a broad range of features including nested slides , Markdown contents , PDF export , speaker notes and a JavaScript API . It's best viewed in a modern browser but fallbacks are available to make sure your presentation can still be viewed elsewhere. More reading: Installation : Step-by-step instructions for getting reveal.js running on your computer. Changelog : Up-to-date version history. Examples : Presentations created with reveal.js, add your own! Browser Support : Explanation of browser support and fallbacks. Plugins : A list of plugins that can be used to extend reveal.js. Online Editor Presentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at http://slides.com . Instructions Markup Markup hierarchy needs to be div class=\"reveal\" div class=\"slides\" section where the section represents one slide and can be repeated indefinitely. If you place multiple section 's inside of another section they will be shown as vertical slides. The first of the vertical slides is the \"root\" of the others (at the top), and it will be included in the horizontal sequence. For example: div class= reveal div class= slides section Single Horizontal Slide /section section section Vertical Slide 1 /section section Vertical Slide 2 /section /section /div /div Markdown It's possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your section elements and wrap the contents in a script type=\"text/template\" like the example below. This is based on data-markdown from Paul Irish modified to use marked to support Github Flavoured Markdown . Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks). section data-markdown script type= text/template ## Page title A paragraph with some text and a [link](http://hakim.se). /script /section External Markdown You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file. The data-charset attribute is optional and specifies which charset to use when loading the external file. When used locally, this feature requires that reveal.js runs from a local web server . section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: data-charset= iso-8859-15 /section Element Attributes Special syntax (in html comment) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things. section data-markdown script type= text/template - Item 1 !-- .element: class= fragment data-fragment-index= 2 -- - Item 2 !-- .element: class= fragment data-fragment-index= 1 -- /script /section Slide Attributes Special syntax (in html comment) is available for adding attributes to the slide section elements generated by your Markdown. section data-markdown script type= text/template !-- .slide: data-background= #ff0000 -- Markdown content /script /section Configuration At the end of your page you need to initialize reveal by running the following code. Note that all config values are optional and will default as specified below. Reveal.initialize({ // Display controls in the bottom right corner controls: true, // Display a presentation progress bar progress: true, // Display the page number of the current slide slideNumber: false, // Push each slide change to the browser history history: false, // Enable keyboard shortcuts for navigation keyboard: true, // Enable the slide overview mode overview: true, // Vertical centering of slides center: true, // Enables touch navigation on devices with touch input touch: true, // Loop the presentation loop: false, // Change the presentation direction to be RTL rtl: false, // Turns fragments on and off globally fragments: true, // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded: false, // Flags if we should show a help overlay when the questionmark // key is pressed help: true, // Flags if speaker notes should be visible to all viewers showNotes: false, // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide: 0, // Stop auto-sliding after user input autoSlideStoppable: true, // Enable slide navigation via mouse wheel mouseWheel: false, // Hides the address bar on mobile devices hideAddressBar: true, // Opens links in an iframe preview overlay previewLinks: false, // Transition style transition: 'default', // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed: 'default', // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition: 'default', // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance: 3, // Parallax background image parallaxBackgroundImage: '', // e.g. 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg' // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px // Amount to move parallax background (horizontal and vertical) on slide change // Number, e.g. 100 parallaxBackgroundHorizontal: '', parallaxBackgroundVertical: '' }); The configuration can be updated after initialization using the configure method: // Turn autoSlide off Reveal.configure({ autoSlide: 0 }); // Start auto-sliding every 5s Reveal.configure({ autoSlide: 5000 }); Presentation Size All presentations have a normal size, that is the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport. See below for a list of configuration options related to sizing, including default values: Reveal.initialize({ ... // The normal size of the presentation, aspect ratio will be preserved // when the presentation is scaled to fit different resolutions. Can be // specified using percentage units. width: 960, height: 700, // Factor of the display size that should remain empty around the content margin: 0.1, // Bounds for smallest/largest possible scale to apply to content minScale: 0.2, maxScale: 1.5 }); Dependencies Reveal.js doesn't rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example: Reveal.initialize({ dependencies: [ // Cross-browser shim that fully implements classList - https://github.com/eligrey/classList.js/ { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } }, // Interpret Markdown in section elements { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, // Syntax highlight for code elements { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, // Zoom in and out with Alt+click { src: 'plugin/zoom-js/zoom.js', async: true }, // Speaker notes { src: 'plugin/notes/notes.js', async: true }, // MathJax { src: 'plugin/math/math.js', async: true } ] }); You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src : Path to the script to load - async : [optional] Flags if the script should load after reveal.js has started, defaults to false - callback : [optional] Function to execute when the script has loaded - condition : [optional] Function which must return true for the script to be loaded Ready Event A 'ready' event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call Reveal.isReady() . Reveal.addEventListener( 'ready', function( event ) { // event.currentSlide, event.indexh, event.indexv } ); Auto-sliding Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides: // Slide every five seconds Reveal.configure({ autoSlide: 5000 }); When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing \u00bba\u00ab on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config. You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute: section data-autoslide= 2000 p After 2 seconds the first fragment will be shown. /p p class= fragment data-autoslide= 10000 After 10 seconds the next fragment will be shown. /p p class= fragment Now, the fragment is displayed for 2 seconds before the next slide is shown. /p /section Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired. Keyboard Bindings If you're unhappy with any of the default keyboard bindings you can override them using the keyboard config option: Reveal.configure({ keyboard: { 13: 'next', // go to the next slide when the ENTER key is pressed 27: function() {}, // do something custom when ESC is pressed 32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding) } }); Touch Navigation You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js. If there's some part of your content that needs to remain accessible to touch events you'll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled. Lazy Loading When working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option. To enable lazy loading all you need to do is change your \"src\" attributes to \"data-src\" as shown below. This is supported for image, video, audio and iframe elements. Lazy loaded iframes will also unload when the containing slide is no longer visible. section img data-src= image.png iframe data-src= http://hakim.se /iframe video source data-src= video.webm type= video/webm / source data-src= video.mp4 type= video/mp4 / /video /section API The Reveal object exposes a JavaScript API for controlling navigation and reading state: // Navigation Reveal.slide( indexh, indexv, indexf ); Reveal.left(); Reveal.right(); Reveal.up(); Reveal.down(); Reveal.prev(); Reveal.next(); Reveal.prevFragment(); Reveal.nextFragment(); // Toggle presentation states, optionally pass true/false to force on/off Reveal.toggleOverview(); Reveal.togglePause(); Reveal.toggleAutoSlide(); // Change a config value at runtime Reveal.configure({ controls: true }); // Returns the present configuration options Reveal.getConfig(); // Fetch the current scale of the presentation Reveal.getScale(); // Retrieves the previous and current slide elements Reveal.getPreviousSlide(); Reveal.getCurrentSlide(); Reveal.getIndices(); // { h: 0, v: 0 } } Reveal.getProgress(); // 0-1 Reveal.getTotalSlides(); // Returns the speaker notes for the current slide Reveal.getSlideNotes(); // State checks Reveal.isFirstSlide(); Reveal.isLastSlide(); Reveal.isOverview(); Reveal.isPaused(); Reveal.isAutoSliding(); Slide Changed Event A 'slidechanged' event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes. Some libraries, like MathJax (see #226 ), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'slidechanged', function( event ) { // event.previousSlide, event.currentSlide, event.indexh, event.indexv } ); Presentation State The presentation's current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire. Reveal.slide( 1 ); // we're on slide 1 var state = Reveal.getState(); Reveal.slide( 3 ); // we're on slide 3 Reveal.setState( state ); // we're back on slide 1 Slide States If you set data-state=\"somestate\" on a slide section , \"somestate\" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide. Furthermore you can also listen to these changes in state via JavaScript: Reveal.addEventListener( 'somestate', function() { // TODO: Sprinkle magic }, false ); Slide Backgrounds Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your section elements. Four different types of backgrounds are supported: color, image, video and iframe. Below are a few examples. section data-background= #ff0000 h2 All CSS color formats are supported, like rgba() or hsl(). /h2 /section section data-background= http://example.com/image.png h2 This slide will have a full-size background image. /h2 /section section data-background= http://example.com/image.png data-background-size= 100px data-background-repeat= repeat h2 This background image will be sized to 100px and repeated. /h2 /section section data-background-video= https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm data-background-video-loop h2 Video. Multiple sources can be defined using a comma separated list. Video will loop when the data-background-video-loop attribute is provided. /h2 /section section data-background-iframe= https://slides.com h2 Embeds a web page as a background. Note that the page won't be interactive. /h2 /section Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition. Parallax Background If you want to use a parallax scrolling background, set the first two config properties below when initializing reveal.js (the other two are optional). Reveal.initialize({ // Parallax background image parallaxBackgroundImage: '', // e.g. https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px - currently only pixels are supported (don't use % or auto) // Amount of pixels to move the parallax background per slide step, // a value of 0 disables movement along the given axis // These are optional, if they aren't specified they'll be calculated automatically parallaxBackgroundHorizontal: 200, parallaxBackgroundVertical: 50 }); Make sure that the background size is much bigger than screen size to allow for some scrolling. View example . Slide Transitions The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute: section data-transition= zoom h2 This slide will override the presentation transition and zoom! /h2 /section section data-transition-speed= fast h2 Choose from three transition speeds: default, fast or slow! /h2 /section You can also use different in and out transitions for the same slide: section data-transition= slide The train goes on \u2026 /section section data-transition= slide and on \u2026 /section section data-transition= slide-in fade-out and stops. /section section data-transition= fade-in slide-out (Passengers entering and leaving) /section section data-transition= slide And it starts again. /section Internal links It's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute ( section id=\"some-slide\" ): a href= #/2/2 Link /a a href= #/some-slide Link /a You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it's a valid navigation route based on the current slide. a href= # class= navigate-left a href= # class= navigate-right a href= # class= navigate-up a href= # class= navigate-down a href= # class= navigate-prev !-- Previous vertical or horizontal slide -- a href= # class= navigate-next !-- Next vertical or horizontal slide -- Fragments Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here's an example: http://lab.hakim.se/reveal-js/#/fragments The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment: section p class= fragment grow grow /p p class= fragment shrink shrink /p p class= fragment fade-out fade-out /p p class= fragment current-visible visible only once /p p class= fragment highlight-current-blue blue only once /p p class= fragment highlight-red highlight-red /p p class= fragment highlight-green highlight-green /p p class= fragment highlight-blue highlight-blue /p /section Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second. section span class= fragment fade-in span class= fragment fade-out I'll fade in, then out /span /span /section The display order of fragments can be controlled using the data-fragment-index attribute. section p class= fragment data-fragment-index= 3 Appears last /p p class= fragment data-fragment-index= 1 Appears first /p p class= fragment data-fragment-index= 2 Appears second /p /section Fragment events When a slide fragment is either shown or hidden reveal.js will dispatch an event. Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'fragmentshown', function( event ) { // event.fragment = the fragment DOM element } ); Reveal.addEventListener( 'fragmenthidden', function( event ) { // event.fragment = the fragment DOM element } ); Code syntax highlighting By default, Reveal is configured with highlight.js for code syntax highlighting. Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present surrounding whitespace is automatically removed. section pre code data-trim (def lazy-fib (concat [0 1] ((fn rfib [a b] (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) /code /pre /section Slide number If you would like to display the page number of the current slide you can do so using the slideNumber configuration value. // Shows the slide number using default formatting Reveal.configure({ slideNumber: true }); // Slide number formatting can be configured using these variables: // h.v : horizontal . vertical slide number (default) // h/v : horizontal / vertical slide number // c : flattened slide number // c/t : flattened slide number / total slides Reveal.configure({ slideNumber: 'c/t' }); Overview mode Press \"Esc\" or \"o\" keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks: Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } ); Reveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal.toggleOverview(); Fullscreen mode Just press \u00bbF\u00ab on your keyboard to show your presentation in fullscreen mode. Press the \u00bbESC\u00ab key to exit fullscreen mode. Embedded media Embedded HTML5 video / audio and YouTube iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute. Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown: video data-autoplay src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video Additionally the framework automatically pushes two post messages to all iframes, slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden. Stretching elements Sometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below: section h2 This video will use up the remaining space on the slide /h2 video class= stretch src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video /section Limitations: - Only direct descendants of a slide section can be stretched - Only one descendant per slide section can be stretched postMessage API The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2: window .postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' ); When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window: window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); if( data.namespace === 'reveal' data.eventName ==='slidechanged' ) { // Slide changed, see data.state for slide number } } ); This cross-window messaging can be toggled on or off using configuration flags. Reveal.initialize({ ..., // Exposes the reveal.js API through window.postMessage postMessage: true, // Dispatches all reveal.js events to the parent window through postMessage postMessageEvents: false }); PDF Export Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium . Here's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300. Open your presentation with print-pdf included anywhere in the query string. This triggers the default index HTML to load the PDF print stylesheet ( css/print/pdf.css ). You can test this with lab.hakim.se/reveal-js?print-pdf . Open the in-browser print dialog (CMD+P). Change the Destination setting to Save as PDF . Change the Layout to Landscape . Change the Margins to None . Click Save . Alternatively you can use the decktape project. Theming The framework comes with a few different themes included: black: Black background, white text, blue links (default theme) white: White background, black text, blue links league: Gray background, white text, blue links (default theme for reveal.js 3.0.0) beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html: link rel= stylesheet href= css/theme/black.css id= theme If you want to add a theme of your own see the instructions here: /css/theme/README.md . Speaker Notes reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the 's' key on your keyboard to open the notes window. Notes are defined by appending an aside element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown. Alternatively you can add your notes in a data-notes attribute on the slide. Like section data-notes=\"Something important\" /section . When used locally, this feature requires that reveal.js runs from a local web server . section h2 Some Slide /h2 aside class= notes Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit 's' on your keyboard). /aside /section Notes are only visible to you in the speaker view. If you wish to share your notes with the audience initialize reveal.js with the showNotes config value set to true . If you're using the external Markdown plugin, you can add notes with the help of a special delimiter: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: /section # Title ## Sub-title Here is some content... Note: This will only display in the notes window. Server Side Speaker Notes In some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies: Reveal.initialize({ ... dependencies: [ { src: 'socket.io/socket.io.js', async: true }, { src: 'plugin/notes-server/client.js', async: true } ] }); Then: Install Node.js Run npm install Run node plugin/notes-server Multiplexing The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at http://revealjs-51546.onmodulus.net/ . The multiplex plugin needs the following 3 things to operate: Master presentation that has control Client presentations that follow the master Socket.io server to broadcast events from the master to the clients More details: Master presentation Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation: npm install node-static static If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server. You can then access your master presentation at http://localhost:1947 Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'revealjs-51546.onmodulus.net:80' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, // and if you want speaker notes { src: 'plugin/notes-server/client.js', async: true } // other dependencies... ] }); Client presentation Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via http://example.com/path/to/presentation/client/index.html , with the configuration below causing them to connect to the socket.io server as clients. Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'revealjs-51546.onmodulus.net:80' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] }); Socket.io server Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands: npm install node plugin/multiplex Or you use the socket.io server at http://revealjs-51546.onmodulus.net/ . You'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit http://example.com/token , where http://example.com is the location of your socket.io server. Or if you're going to use the socket.io server at http://revealjs-51546.onmodulus.net/ , visit http://revealjs-51546.onmodulus.net/token . You are very welcome to point your presentations at the Socket.io server running at http://revealjs-51546.onmodulus.net/ , but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. It is simple to deploy to nodejitsu, heroku, your own environment, etc. socket.io server as file static server The socket.io server can play the role of static file server for your client presentation, as in the example at http://revealjs-51546.onmodulus.net/ . (Open http://revealjs-51546.onmodulus.net/ in two browsers. Navigate through the slides on one, and the other will update to match.) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open http://revealjs-51546.onmodulus.net/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] }); MathJax If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you'll need to include it as a reveal.js dependency, find our more about dependencies here . The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the mathjax configuration value. Below is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the math config object at all. Reveal.initialize({ // other options ... math: { mathjax: 'https://cdn.mathjax.org/mathjax/latest/MathJax.js', config: 'TeX-AMS_HTML-full' // See http://docs.mathjax.org/en/latest/config-files.html }, dependencies: [ { src: 'plugin/math/math.js', async: true } ] }); Read MathJax's documentation if you need HTTPS delivery or serving of specific versions for stability. Installation The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source. Basic setup The core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser. Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases Unzip and replace the example contents in index.html with your own Open index.html in a browser to view it Full setup Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code. Install Node.js Install Grunt Clone the reveal.js repository sh $ git clone https://github.com/hakimel/reveal.js.git Navigate to the reveal.js folder sh $ cd reveal.js Install dependencies sh $ npm install Serve the presentation and monitor source files for changes sh $ grunt serve Open http://localhost:8000 to view your presentation You can change the port by using grunt serve --port 8001 . Folder Structure css/ Core styles without which the project does not function js/ Like above but for JavaScript plugin/ Components that have been developed as extensions to reveal.js lib/ All other third party assets (JavaScript, CSS, fonts) License MIT licensed Copyright (C) 2015 Hakim El Hattab, http://hakim.se","title":"reveal.js [![Build Status](https://travis-ci.org/hakimel/reveal.js.svg?branch=master)](https://travis-ci.org/hakimel/reveal.js)"},{"location":"meetingcpp-2016/README.html#revealjs","text":"A framework for easily creating beautiful presentations using HTML. Check out the live demo . reveal.js comes with a broad range of features including nested slides , Markdown contents , PDF export , speaker notes and a JavaScript API . It's best viewed in a modern browser but fallbacks are available to make sure your presentation can still be viewed elsewhere.","title":"reveal.js"},{"location":"meetingcpp-2016/README.html#more-reading","text":"Installation : Step-by-step instructions for getting reveal.js running on your computer. Changelog : Up-to-date version history. Examples : Presentations created with reveal.js, add your own! Browser Support : Explanation of browser support and fallbacks. Plugins : A list of plugins that can be used to extend reveal.js.","title":"More reading:"},{"location":"meetingcpp-2016/README.html#online-editor","text":"Presentations are written using HTML or Markdown but there's also an online editor for those of you who prefer a graphical interface. Give it a try at http://slides.com .","title":"Online Editor"},{"location":"meetingcpp-2016/README.html#instructions","text":"","title":"Instructions"},{"location":"meetingcpp-2016/README.html#markup","text":"Markup hierarchy needs to be div class=\"reveal\" div class=\"slides\" section where the section represents one slide and can be repeated indefinitely. If you place multiple section 's inside of another section they will be shown as vertical slides. The first of the vertical slides is the \"root\" of the others (at the top), and it will be included in the horizontal sequence. For example: div class= reveal div class= slides section Single Horizontal Slide /section section section Vertical Slide 1 /section section Vertical Slide 2 /section /section /div /div","title":"Markup"},{"location":"meetingcpp-2016/README.html#markdown","text":"It's possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your section elements and wrap the contents in a script type=\"text/template\" like the example below. This is based on data-markdown from Paul Irish modified to use marked to support Github Flavoured Markdown . Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks). section data-markdown script type= text/template ## Page title A paragraph with some text and a [link](http://hakim.se). /script /section","title":"Markdown"},{"location":"meetingcpp-2016/README.html#external-markdown","text":"You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file. The data-charset attribute is optional and specifies which charset to use when loading the external file. When used locally, this feature requires that reveal.js runs from a local web server . section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: data-charset= iso-8859-15 /section","title":"External Markdown"},{"location":"meetingcpp-2016/README.html#element-attributes","text":"Special syntax (in html comment) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things. section data-markdown script type= text/template - Item 1 !-- .element: class= fragment data-fragment-index= 2 -- - Item 2 !-- .element: class= fragment data-fragment-index= 1 -- /script /section","title":"Element Attributes"},{"location":"meetingcpp-2016/README.html#slide-attributes","text":"Special syntax (in html comment) is available for adding attributes to the slide section elements generated by your Markdown. section data-markdown script type= text/template !-- .slide: data-background= #ff0000 -- Markdown content /script /section","title":"Slide Attributes"},{"location":"meetingcpp-2016/README.html#configuration","text":"At the end of your page you need to initialize reveal by running the following code. Note that all config values are optional and will default as specified below. Reveal.initialize({ // Display controls in the bottom right corner controls: true, // Display a presentation progress bar progress: true, // Display the page number of the current slide slideNumber: false, // Push each slide change to the browser history history: false, // Enable keyboard shortcuts for navigation keyboard: true, // Enable the slide overview mode overview: true, // Vertical centering of slides center: true, // Enables touch navigation on devices with touch input touch: true, // Loop the presentation loop: false, // Change the presentation direction to be RTL rtl: false, // Turns fragments on and off globally fragments: true, // Flags if the presentation is running in an embedded mode, // i.e. contained within a limited portion of the screen embedded: false, // Flags if we should show a help overlay when the questionmark // key is pressed help: true, // Flags if speaker notes should be visible to all viewers showNotes: false, // Number of milliseconds between automatically proceeding to the // next slide, disabled when set to 0, this value can be overwritten // by using a data-autoslide attribute on your slides autoSlide: 0, // Stop auto-sliding after user input autoSlideStoppable: true, // Enable slide navigation via mouse wheel mouseWheel: false, // Hides the address bar on mobile devices hideAddressBar: true, // Opens links in an iframe preview overlay previewLinks: false, // Transition style transition: 'default', // none/fade/slide/convex/concave/zoom // Transition speed transitionSpeed: 'default', // default/fast/slow // Transition style for full page slide backgrounds backgroundTransition: 'default', // none/fade/slide/convex/concave/zoom // Number of slides away from the current that are visible viewDistance: 3, // Parallax background image parallaxBackgroundImage: '', // e.g. 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg' // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px // Amount to move parallax background (horizontal and vertical) on slide change // Number, e.g. 100 parallaxBackgroundHorizontal: '', parallaxBackgroundVertical: '' }); The configuration can be updated after initialization using the configure method: // Turn autoSlide off Reveal.configure({ autoSlide: 0 }); // Start auto-sliding every 5s Reveal.configure({ autoSlide: 5000 });","title":"Configuration"},{"location":"meetingcpp-2016/README.html#presentation-size","text":"All presentations have a normal size, that is the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport. See below for a list of configuration options related to sizing, including default values: Reveal.initialize({ ... // The normal size of the presentation, aspect ratio will be preserved // when the presentation is scaled to fit different resolutions. Can be // specified using percentage units. width: 960, height: 700, // Factor of the display size that should remain empty around the content margin: 0.1, // Bounds for smallest/largest possible scale to apply to content minScale: 0.2, maxScale: 1.5 });","title":"Presentation Size"},{"location":"meetingcpp-2016/README.html#dependencies","text":"Reveal.js doesn't rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example: Reveal.initialize({ dependencies: [ // Cross-browser shim that fully implements classList - https://github.com/eligrey/classList.js/ { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } }, // Interpret Markdown in section elements { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, // Syntax highlight for code elements { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, // Zoom in and out with Alt+click { src: 'plugin/zoom-js/zoom.js', async: true }, // Speaker notes { src: 'plugin/notes/notes.js', async: true }, // MathJax { src: 'plugin/math/math.js', async: true } ] }); You can add your own extensions using the same syntax. The following properties are available for each dependency object: - src : Path to the script to load - async : [optional] Flags if the script should load after reveal.js has started, defaults to false - callback : [optional] Function to execute when the script has loaded - condition : [optional] Function which must return true for the script to be loaded","title":"Dependencies"},{"location":"meetingcpp-2016/README.html#ready-event","text":"A 'ready' event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already 'ready' you can call Reveal.isReady() . Reveal.addEventListener( 'ready', function( event ) { // event.currentSlide, event.indexh, event.indexv } );","title":"Ready Event"},{"location":"meetingcpp-2016/README.html#auto-sliding","text":"Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides: // Slide every five seconds Reveal.configure({ autoSlide: 5000 }); When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing \u00bba\u00ab on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config. You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute: section data-autoslide= 2000 p After 2 seconds the first fragment will be shown. /p p class= fragment data-autoslide= 10000 After 10 seconds the next fragment will be shown. /p p class= fragment Now, the fragment is displayed for 2 seconds before the next slide is shown. /p /section Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired.","title":"Auto-sliding"},{"location":"meetingcpp-2016/README.html#keyboard-bindings","text":"If you're unhappy with any of the default keyboard bindings you can override them using the keyboard config option: Reveal.configure({ keyboard: { 13: 'next', // go to the next slide when the ENTER key is pressed 27: function() {}, // do something custom when ESC is pressed 32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding) } });","title":"Keyboard Bindings"},{"location":"meetingcpp-2016/README.html#touch-navigation","text":"You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js. If there's some part of your content that needs to remain accessible to touch events you'll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled.","title":"Touch Navigation"},{"location":"meetingcpp-2016/README.html#lazy-loading","text":"When working on presentation with a lot of media or iframe content it's important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option. To enable lazy loading all you need to do is change your \"src\" attributes to \"data-src\" as shown below. This is supported for image, video, audio and iframe elements. Lazy loaded iframes will also unload when the containing slide is no longer visible. section img data-src= image.png iframe data-src= http://hakim.se /iframe video source data-src= video.webm type= video/webm / source data-src= video.mp4 type= video/mp4 / /video /section","title":"Lazy Loading"},{"location":"meetingcpp-2016/README.html#api","text":"The Reveal object exposes a JavaScript API for controlling navigation and reading state: // Navigation Reveal.slide( indexh, indexv, indexf ); Reveal.left(); Reveal.right(); Reveal.up(); Reveal.down(); Reveal.prev(); Reveal.next(); Reveal.prevFragment(); Reveal.nextFragment(); // Toggle presentation states, optionally pass true/false to force on/off Reveal.toggleOverview(); Reveal.togglePause(); Reveal.toggleAutoSlide(); // Change a config value at runtime Reveal.configure({ controls: true }); // Returns the present configuration options Reveal.getConfig(); // Fetch the current scale of the presentation Reveal.getScale(); // Retrieves the previous and current slide elements Reveal.getPreviousSlide(); Reveal.getCurrentSlide(); Reveal.getIndices(); // { h: 0, v: 0 } } Reveal.getProgress(); // 0-1 Reveal.getTotalSlides(); // Returns the speaker notes for the current slide Reveal.getSlideNotes(); // State checks Reveal.isFirstSlide(); Reveal.isLastSlide(); Reveal.isOverview(); Reveal.isPaused(); Reveal.isAutoSliding();","title":"API"},{"location":"meetingcpp-2016/README.html#slide-changed-event","text":"A 'slidechanged' event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes. Some libraries, like MathJax (see #226 ), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'slidechanged', function( event ) { // event.previousSlide, event.currentSlide, event.indexh, event.indexv } );","title":"Slide Changed Event"},{"location":"meetingcpp-2016/README.html#presentation-state","text":"The presentation's current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It's a simple object that can easily be stringified and persisted or sent over the wire. Reveal.slide( 1 ); // we're on slide 1 var state = Reveal.getState(); Reveal.slide( 3 ); // we're on slide 3 Reveal.setState( state ); // we're back on slide 1","title":"Presentation State"},{"location":"meetingcpp-2016/README.html#slide-states","text":"If you set data-state=\"somestate\" on a slide section , \"somestate\" will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide. Furthermore you can also listen to these changes in state via JavaScript: Reveal.addEventListener( 'somestate', function() { // TODO: Sprinkle magic }, false );","title":"Slide States"},{"location":"meetingcpp-2016/README.html#slide-backgrounds","text":"Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your section elements. Four different types of backgrounds are supported: color, image, video and iframe. Below are a few examples. section data-background= #ff0000 h2 All CSS color formats are supported, like rgba() or hsl(). /h2 /section section data-background= http://example.com/image.png h2 This slide will have a full-size background image. /h2 /section section data-background= http://example.com/image.png data-background-size= 100px data-background-repeat= repeat h2 This background image will be sized to 100px and repeated. /h2 /section section data-background-video= https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm data-background-video-loop h2 Video. Multiple sources can be defined using a comma separated list. Video will loop when the data-background-video-loop attribute is provided. /h2 /section section data-background-iframe= https://slides.com h2 Embeds a web page as a background. Note that the page won't be interactive. /h2 /section Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: 'slide' to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition.","title":"Slide Backgrounds"},{"location":"meetingcpp-2016/README.html#parallax-background","text":"If you want to use a parallax scrolling background, set the first two config properties below when initializing reveal.js (the other two are optional). Reveal.initialize({ // Parallax background image parallaxBackgroundImage: '', // e.g. https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg // Parallax background size parallaxBackgroundSize: '', // CSS syntax, e.g. 2100px 900px - currently only pixels are supported (don't use % or auto) // Amount of pixels to move the parallax background per slide step, // a value of 0 disables movement along the given axis // These are optional, if they aren't specified they'll be calculated automatically parallaxBackgroundHorizontal: 200, parallaxBackgroundVertical: 50 }); Make sure that the background size is much bigger than screen size to allow for some scrolling. View example .","title":"Parallax Background"},{"location":"meetingcpp-2016/README.html#slide-transitions","text":"The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute: section data-transition= zoom h2 This slide will override the presentation transition and zoom! /h2 /section section data-transition-speed= fast h2 Choose from three transition speeds: default, fast or slow! /h2 /section You can also use different in and out transitions for the same slide: section data-transition= slide The train goes on \u2026 /section section data-transition= slide and on \u2026 /section section data-transition= slide-in fade-out and stops. /section section data-transition= fade-in slide-out (Passengers entering and leaving) /section section data-transition= slide And it starts again. /section","title":"Slide Transitions"},{"location":"meetingcpp-2016/README.html#internal-links","text":"It's easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute ( section id=\"some-slide\" ): a href= #/2/2 Link /a a href= #/some-slide Link /a You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it's a valid navigation route based on the current slide. a href= # class= navigate-left a href= # class= navigate-right a href= # class= navigate-up a href= # class= navigate-down a href= # class= navigate-prev !-- Previous vertical or horizontal slide -- a href= # class= navigate-next !-- Next vertical or horizontal slide --","title":"Internal links"},{"location":"meetingcpp-2016/README.html#fragments","text":"Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here's an example: http://lab.hakim.se/reveal-js/#/fragments The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment: section p class= fragment grow grow /p p class= fragment shrink shrink /p p class= fragment fade-out fade-out /p p class= fragment current-visible visible only once /p p class= fragment highlight-current-blue blue only once /p p class= fragment highlight-red highlight-red /p p class= fragment highlight-green highlight-green /p p class= fragment highlight-blue highlight-blue /p /section Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second. section span class= fragment fade-in span class= fragment fade-out I'll fade in, then out /span /span /section The display order of fragments can be controlled using the data-fragment-index attribute. section p class= fragment data-fragment-index= 3 Appears last /p p class= fragment data-fragment-index= 1 Appears first /p p class= fragment data-fragment-index= 2 Appears second /p /section","title":"Fragments"},{"location":"meetingcpp-2016/README.html#fragment-events","text":"When a slide fragment is either shown or hidden reveal.js will dispatch an event. Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback. Reveal.addEventListener( 'fragmentshown', function( event ) { // event.fragment = the fragment DOM element } ); Reveal.addEventListener( 'fragmenthidden', function( event ) { // event.fragment = the fragment DOM element } );","title":"Fragment events"},{"location":"meetingcpp-2016/README.html#code-syntax-highlighting","text":"By default, Reveal is configured with highlight.js for code syntax highlighting. Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present surrounding whitespace is automatically removed. section pre code data-trim (def lazy-fib (concat [0 1] ((fn rfib [a b] (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) /code /pre /section","title":"Code syntax highlighting"},{"location":"meetingcpp-2016/README.html#slide-number","text":"If you would like to display the page number of the current slide you can do so using the slideNumber configuration value. // Shows the slide number using default formatting Reveal.configure({ slideNumber: true }); // Slide number formatting can be configured using these variables: // h.v : horizontal . vertical slide number (default) // h/v : horizontal / vertical slide number // c : flattened slide number // c/t : flattened slide number / total slides Reveal.configure({ slideNumber: 'c/t' });","title":"Slide number"},{"location":"meetingcpp-2016/README.html#overview-mode","text":"Press \"Esc\" or \"o\" keys to toggle the overview mode on and off. While you're in this mode, you can still navigate between slides, as if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks: Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } ); Reveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } ); // Toggle the overview mode programmatically Reveal.toggleOverview();","title":"Overview mode"},{"location":"meetingcpp-2016/README.html#fullscreen-mode","text":"Just press \u00bbF\u00ab on your keyboard to show your presentation in fullscreen mode. Press the \u00bbESC\u00ab key to exit fullscreen mode.","title":"Fullscreen mode"},{"location":"meetingcpp-2016/README.html#embedded-media","text":"Embedded HTML5 video / audio and YouTube iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute. Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown: video data-autoplay src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video Additionally the framework automatically pushes two post messages to all iframes, slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden.","title":"Embedded media"},{"location":"meetingcpp-2016/README.html#stretching-elements","text":"Sometimes it's desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below: section h2 This video will use up the remaining space on the slide /h2 video class= stretch src= http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4 /video /section Limitations: - Only direct descendants of a slide section can be stretched - Only one descendant per slide section can be stretched","title":"Stretching elements"},{"location":"meetingcpp-2016/README.html#postmessage-api","text":"The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here's an example showing how you'd make a reveal.js instance in the given window proceed to slide 2: window .postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' ); When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here's how you subscribe to them from the parent window: window.addEventListener( 'message', function( event ) { var data = JSON.parse( event.data ); if( data.namespace === 'reveal' data.eventName ==='slidechanged' ) { // Slide changed, see data.state for slide number } } ); This cross-window messaging can be toggled on or off using configuration flags. Reveal.initialize({ ..., // Exposes the reveal.js API through window.postMessage postMessage: true, // Dispatches all reveal.js events to the parent window through postMessage postMessageEvents: false });","title":"postMessage API"},{"location":"meetingcpp-2016/README.html#pdf-export","text":"Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium . Here's an example of an exported presentation that's been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300. Open your presentation with print-pdf included anywhere in the query string. This triggers the default index HTML to load the PDF print stylesheet ( css/print/pdf.css ). You can test this with lab.hakim.se/reveal-js?print-pdf . Open the in-browser print dialog (CMD+P). Change the Destination setting to Save as PDF . Change the Layout to Landscape . Change the Margins to None . Click Save . Alternatively you can use the decktape project.","title":"PDF Export"},{"location":"meetingcpp-2016/README.html#theming","text":"The framework comes with a few different themes included: black: Black background, white text, blue links (default theme) white: White background, black text, blue links league: Gray background, white text, blue links (default theme for reveal.js 3.0.0) beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html: link rel= stylesheet href= css/theme/black.css id= theme If you want to add a theme of your own see the instructions here: /css/theme/README.md .","title":"Theming"},{"location":"meetingcpp-2016/README.html#speaker-notes","text":"reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven't written any notes. Press the 's' key on your keyboard to open the notes window. Notes are defined by appending an aside element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown. Alternatively you can add your notes in a data-notes attribute on the slide. Like section data-notes=\"Something important\" /section . When used locally, this feature requires that reveal.js runs from a local web server . section h2 Some Slide /h2 aside class= notes Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit 's' on your keyboard). /aside /section Notes are only visible to you in the speaker view. If you wish to share your notes with the audience initialize reveal.js with the showNotes config value set to true . If you're using the external Markdown plugin, you can add notes with the help of a special delimiter: section data-markdown= example.md data-separator= ^\\n\\n\\n data-separator-vertical= ^\\n\\n data-separator-notes= ^Note: /section # Title ## Sub-title Here is some content... Note: This will only display in the notes window.","title":"Speaker Notes"},{"location":"meetingcpp-2016/README.html#server-side-speaker-notes","text":"In some cases it can be desirable to run notes on a separate device from the one you're presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies: Reveal.initialize({ ... dependencies: [ { src: 'socket.io/socket.io.js', async: true }, { src: 'plugin/notes-server/client.js', async: true } ] }); Then: Install Node.js Run npm install Run node plugin/notes-server","title":"Server Side Speaker Notes"},{"location":"meetingcpp-2016/README.html#multiplexing","text":"The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at http://revealjs-51546.onmodulus.net/ . The multiplex plugin needs the following 3 things to operate: Master presentation that has control Client presentations that follow the master Socket.io server to broadcast events from the master to the clients More details:","title":"Multiplexing"},{"location":"meetingcpp-2016/README.html#master-presentation","text":"Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter's) computer. (It's safer to run the master presentation from your own computer, so if the venue's Internet goes down it doesn't stop the show.) An example would be to execute the following commands in the directory of your master presentation: npm install node-static static If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server. You can then access your master presentation at http://localhost:1947 Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'revealjs-51546.onmodulus.net:80' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, // and if you want speaker notes { src: 'plugin/notes-server/client.js', async: true } // other dependencies... ] });","title":"Master presentation"},{"location":"meetingcpp-2016/README.html#client-presentation","text":"Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via http://example.com/path/to/presentation/client/index.html , with the configuration below causing them to connect to the socket.io server as clients. Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'revealjs-51546.onmodulus.net:80' // Location of socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] });","title":"Client presentation"},{"location":"meetingcpp-2016/README.html#socketio-server","text":"Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands: npm install node plugin/multiplex Or you use the socket.io server at http://revealjs-51546.onmodulus.net/ . You'll need to generate a unique secret and token pair for your master and client presentations. To do so, visit http://example.com/token , where http://example.com is the location of your socket.io server. Or if you're going to use the socket.io server at http://revealjs-51546.onmodulus.net/ , visit http://revealjs-51546.onmodulus.net/token . You are very welcome to point your presentations at the Socket.io server running at http://revealjs-51546.onmodulus.net/ , but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. It is simple to deploy to nodejitsu, heroku, your own environment, etc.","title":"Socket.io server"},{"location":"meetingcpp-2016/README.html#socketio-server-as-file-static-server","text":"The socket.io server can play the role of static file server for your client presentation, as in the example at http://revealjs-51546.onmodulus.net/ . (Open http://revealjs-51546.onmodulus.net/ in two browsers. Navigate through the slides on one, and the other will update to match.) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: null, // null so the clients do not have control of the master presentation id: '1ea875674b17ca76', // id, obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don't want to use speaker notes). (Open http://revealjs-51546.onmodulus.net/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don't want your audience to mess with your slides while you're presenting. ;) Example configuration: Reveal.initialize({ // other options... multiplex: { // Example values. To generate your own, see the socket.io server instructions. secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation id: '1ea875674b17ca76', // Obtained from socket.io server url: 'example.com:80' // Location of your socket.io server }, // Don't forget to add the dependencies dependencies: [ { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true }, { src: 'plugin/multiplex/master.js', async: true }, { src: 'plugin/multiplex/client.js', async: true } // other dependencies... ] });","title":"socket.io server as file static server"},{"location":"meetingcpp-2016/README.html#mathjax","text":"If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you'll need to include it as a reveal.js dependency, find our more about dependencies here . The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you'll need to download a copy of the library and adjust the mathjax configuration value. Below is an example of how the plugin can be configured. If you don't intend to change these values you do not need to include the math config object at all. Reveal.initialize({ // other options ... math: { mathjax: 'https://cdn.mathjax.org/mathjax/latest/MathJax.js', config: 'TeX-AMS_HTML-full' // See http://docs.mathjax.org/en/latest/config-files.html }, dependencies: [ { src: 'plugin/math/math.js', async: true } ] }); Read MathJax's documentation if you need HTTPS delivery or serving of specific versions for stability.","title":"MathJax"},{"location":"meetingcpp-2016/README.html#installation","text":"The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source.","title":"Installation"},{"location":"meetingcpp-2016/README.html#basic-setup","text":"The core of reveal.js is very easy to install. You'll simply need to download a copy of this repository and open the index.html file directly in your browser. Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases Unzip and replace the example contents in index.html with your own Open index.html in a browser to view it","title":"Basic setup"},{"location":"meetingcpp-2016/README.html#full-setup","text":"Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code. Install Node.js Install Grunt Clone the reveal.js repository sh $ git clone https://github.com/hakimel/reveal.js.git Navigate to the reveal.js folder sh $ cd reveal.js Install dependencies sh $ npm install Serve the presentation and monitor source files for changes sh $ grunt serve Open http://localhost:8000 to view your presentation You can change the port by using grunt serve --port 8001 .","title":"Full setup"},{"location":"meetingcpp-2016/README.html#folder-structure","text":"css/ Core styles without which the project does not function js/ Like above but for JavaScript plugin/ Components that have been developed as extensions to reveal.js lib/ All other third party assets (JavaScript, CSS, fonts)","title":"Folder Structure"},{"location":"meetingcpp-2016/README.html#license","text":"MIT licensed Copyright (C) 2015 Hakim El Hattab, http://hakim.se","title":"License"},{"location":"meetingcpp-2016/CONTRIBUTING.html","text":"Contributing Please keep the issue tracker limited to bug reports , feature requests and pull requests . Personal Support If you have personal support or setup questions the best place to ask those are StackOverflow . Bug Reports When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested. Pull Requests Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master) Plugins Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"CONTRIBUTING"},{"location":"meetingcpp-2016/CONTRIBUTING.html#contributing","text":"Please keep the issue tracker limited to bug reports , feature requests and pull requests .","title":"Contributing"},{"location":"meetingcpp-2016/CONTRIBUTING.html#personal-support","text":"If you have personal support or setup questions the best place to ask those are StackOverflow .","title":"Personal Support"},{"location":"meetingcpp-2016/CONTRIBUTING.html#bug-reports","text":"When reporting a bug make sure to include information about which browser and operating system you are on as well as the necessary steps to reproduce the issue. If possible please include a link to a sample presentation where the bug can be tested.","title":"Bug Reports"},{"location":"meetingcpp-2016/CONTRIBUTING.html#pull-requests","text":"Should follow the coding style of the file you work in, most importantly: Tabs to indent Single-quoted strings Should be made towards the dev branch Should be submitted from a feature/topic branch (not your master)","title":"Pull Requests"},{"location":"meetingcpp-2016/CONTRIBUTING.html#plugins","text":"Please do not submit plugins as pull requests. They should be maintained in their own separate repository. More information here: https://github.com/hakimel/reveal.js/wiki/Plugin-Guidelines","title":"Plugins"},{"location":"meetingcpp-2016/css/theme/README.html","text":"Dependencies Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceding: https://github.com/hakimel/reveal.js#full-setup Creating a Theme To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run grunt css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Home"},{"location":"meetingcpp-2016/css/theme/README.html#dependencies","text":"Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceding: https://github.com/hakimel/reveal.js#full-setup","title":"Dependencies"},{"location":"meetingcpp-2016/css/theme/README.html#creating-a-theme","text":"To create your own theme, start by duplicating a .scss file in /css/theme/source . It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile ) when you run grunt css-themes . Each theme file does four things in the following order: Include /css/theme/template/mixins.scss Shared utility functions. Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3. Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please. Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.","title":"Creating a Theme"},{"location":"meetingcpp-2016/plugin/markdown/example.html","text":"Markdown Demo External 1.1 Content 1.1 Note: This will only appear in the speaker notes window. External 1.2 Content 1.2 External 2 Content 2.1 External 3.1 Content 3.1 External 3.2 Content 3.2","title":"Markdown Demo"},{"location":"meetingcpp-2016/plugin/markdown/example.html#markdown-demo","text":"","title":"Markdown Demo"},{"location":"meetingcpp-2016/plugin/markdown/example.html#external-11","text":"Content 1.1 Note: This will only appear in the speaker notes window.","title":"External 1.1"},{"location":"meetingcpp-2016/plugin/markdown/example.html#external-12","text":"Content 1.2","title":"External 1.2"},{"location":"meetingcpp-2016/plugin/markdown/example.html#external-2","text":"Content 2.1","title":"External 2"},{"location":"meetingcpp-2016/plugin/markdown/example.html#external-31","text":"Content 3.1","title":"External 3.1"},{"location":"meetingcpp-2016/plugin/markdown/example.html#external-32","text":"Content 3.2","title":"External 3.2"}]}